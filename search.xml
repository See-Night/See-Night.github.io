<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据分析排序</title>
    <url>/2019-12-12/Hadoop-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="数据分析排序"><a href="#数据分析排序" class="headerlink" title="数据分析排序"></a>数据分析排序</h1><h3 id="Mapper-py"><a href="#Mapper-py" class="headerlink" title="Mapper.py"></a>Mapper.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin :</span><br><span class="line">        line = line.split()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> line :</span><br><span class="line">                print(num)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Mapper.py</code> 用于读取数据并传递数据到Reduce</li>
<li><code>sys.stdin</code> 用于读取数据流  </li>
<li><code>split()</code> 用于格式化字符串为List列表  </li>
</ul>
<a id="more"></a>

<h3 id="Reduce-py"><a href="#Reduce-py" class="headerlink" title="Reduce.py"></a>Reduce.py</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/python3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">cache   = []</span><br><span class="line"></span><br><span class="line">for num in sys.stdin :</span><br><span class="line">        num = int(num.split()[0])</span><br><span class="line">        cache.insert(len(cache), num)</span><br><span class="line"></span><br><span class="line">t = sorted(cache)</span><br><span class="line"></span><br><span class="line">i = 1</span><br><span class="line"></span><br><span class="line">for temp in t :</span><br><span class="line">        out = "&#123;&#125;\t&#123;&#125;".format(temp, i)</span><br><span class="line">        i = i + 1</span><br><span class="line">        print(out)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Reduce.py</code> 用于对数据进行处理</li>
<li><code>sys.stdin</code> 用于读取数据流</li>
<li><code>split()</code> 用于格式化字符串为List列表  </li>
<li><code>sorted()</code> 用于对List列表进行排序操作</li>
</ul>
<h3 id="A-txt"><a href="#A-txt" class="headerlink" title="A.txt"></a>A.txt</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">37</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure>

<h3 id="B-txt"><a href="#B-txt" class="headerlink" title="B.txt"></a>B.txt</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">39</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="result"><a href="#result" class="headerlink" title="result"></a>result</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">37</span></span><br><span class="line"><span class="number">39</span></span><br><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure>

<h5 id="Mapper与Reduce之间的数据传输格式的错误是导致大多数Reduce错误的根本原因"><a href="#Mapper与Reduce之间的数据传输格式的错误是导致大多数Reduce错误的根本原因" class="headerlink" title="Mapper与Reduce之间的数据传输格式的错误是导致大多数Reduce错误的根本原因"></a>Mapper与Reduce之间的数据传输格式的错误是导致大多数Reduce错误的根本原因</h5>]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题美化——Muse主题侧边栏与目录位置优化</title>
    <url>/2019-12-13/NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E2%80%94%E2%80%94Muse%E4%B8%BB%E9%A2%98%E4%BE%A7%E8%BE%B9%E6%A0%8F%E4%B8%8E%E7%9B%AE%E5%BD%95%E4%BD%8D%E7%BD%AE%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="NexT-主题优化——Muse"><a href="#NexT-主题优化——Muse" class="headerlink" title="NexT 主题优化——Muse"></a>NexT 主题优化——Muse</h3><p><strong>Hexo version: v4.1.0</strong></p>
<p><strong>NexT version: v5.1.4</strong></p>
<blockquote>
<p>Hexo博客支持很多主题风格，其中<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT</a>主题是Github上Star最多的主题，其一直在更新维护，支持非常多的外部插件和功能选项。我目前使用的是Next6.0版本，下面我会介绍基于NexT主题中Muse主题的界面美化手法。</p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>未优化</strong></p>
<p><img src="/img/Muse.png" alt="Muse"></p>
<p>可以看到未优化的Muse主题的侧边栏默认在右边，而且_config.yml中<code>sidebar position</code>字段是无法修改Muse主题的侧边栏位置的</p>
<p><code># Sidebar Display, available value (only for Muse | Mist):</code></p>
<p>同时博客标题和目录的布局都是相对布局，只要鼠标一滚动就会随着博文消失（讲道理这绝对是NexT开发者的锅），使用体验比较差，因此对其进行优化乃是大势所趋。话不多说，咱先开始。</p>
<a id="more"></a>

<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h4><p>侧边栏的位置其实各取所需就好，喜欢放在右边的话可以直接跳过这一段。</p>
<h5 id="修改motion-js"><a href="#修改motion-js" class="headerlink" title="修改motion.js"></a>修改motion.js</h5><p>首先调整侧边栏的动画效果，让他从左边伸出来</p>
<p>打开 <code>&lt;your blog&gt;/theme/next/source/js/src</code> ，找到 <code>motion.js</code> 并打开</p>
<p><code>Ctrl + F</code> 查找 <code>paddingRight</code> 将其改为 <code>paddingLeft</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>)</span><br><span class="line">        .on(<span class="string">'sidebar.isShowing'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          NexT.utils.isDesktop() &amp;&amp; $(<span class="string">'body'</span>).velocity(<span class="string">'stop'</span>).velocity(</span><br><span class="line">            &#123;<span class="attr">paddingLeft</span>: SIDEBAR_WIDTH&#125;,			</span><br><span class="line">            SIDEBAR_DISPLAY_DURATION</span><br><span class="line">          );</span><br><span class="line">        &#125;)</span><br><span class="line">        .on(<span class="string">'sidebar.isHiding'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   		&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hideSidebar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      NexT.utils.isDesktop() &amp;&amp; $(<span class="string">'body'</span>).velocity(<span class="string">'stop'</span>).velocity(&#123;<span class="attr">paddingLeft</span>: <span class="number">0</span>&#125;);</span><br><span class="line">      <span class="keyword">this</span>.sidebarEl.find(<span class="string">'.motion-element'</span>).velocity(<span class="string">'stop'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span><br><span class="line">      <span class="keyword">this</span>.sidebarEl.velocity(<span class="string">'stop'</span>).velocity(&#123;<span class="attr">width</span>: <span class="number">0</span>&#125;, &#123;<span class="attr">display</span>: <span class="string">'none'</span>&#125;);</span><br><span class="line"></span><br><span class="line">      sidebarToggleLines.init();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.sidebarEl.removeClass(<span class="string">'sidebar-active'</span>);</span><br><span class="line">      <span class="keyword">this</span>.sidebarEl.trigger(<span class="string">'sidebar.isHiding'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Prevent adding TOC to Overview if Overview was selected when close &amp; open sidebar.</span></span><br><span class="line">      <span class="keyword">if</span> (!!$(<span class="string">'.post-toc-wrap'</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">'.site-overview-wrap'</span>).css(<span class="string">'display'</span>) === <span class="string">'block'</span>) &#123;</span><br><span class="line">          $(<span class="string">'.post-toc-wrap'</span>).removeClass(<span class="string">'motion-element'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $(<span class="string">'.post-toc-wrap'</span>).addClass(<span class="string">'motion-element'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="调整CSS样式表"><a href="#调整CSS样式表" class="headerlink" title="调整CSS样式表"></a>调整CSS样式表</h5><p>找到 <code>&lt;your blog&gt;/theme/next/source/css/_common/components/sidebar/sidebar-toggle.styl</code></p>
<p>修改类 <code>.sidebar-toggle</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">45px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background</span>: $black-deep;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: $zindex-<span class="number">5</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateZ</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    fixbutton() if hexo-config('sidebar.onmobile');</span><br><span class="line">    hide() if not hexo-config('sidebar.onmobile');</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">    fixbutton() if hexo-config('sidebar.onmobile');</span><br><span class="line">    hide() if not hexo-config('sidebar.onmobile');</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CSS样式建议根据自己实际情况修改</p>
<p>不懂CSS的话只需要将 <code>right</code> 字段删除，然后添加 <code>letf: xxpx;</code> 或者<code>left: xx%;</code>，分号一定要加</p>
<p><code>xx</code>是数字，<code>px</code>是像素的意思，可以直观体现出距离位置</p>
<h5 id="修改箭头动画"><a href="#修改箭头动画" class="headerlink" title="修改箭头动画"></a>修改箭头动画</h5><p>还是刚才的<code>motion.js</code>文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sidebarToggleLine1st = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">  el: <span class="string">'.sidebar-toggle-line-first'</span>,</span><br><span class="line">  status: &#123;</span><br><span class="line">    arrow: &#123;<span class="attr">width</span>: <span class="string">'60%'</span>, <span class="attr">rotateZ</span>: <span class="string">'45deg'</span>, <span class="attr">top</span>: <span class="string">'2px'</span>, <span class="attr">left</span>: <span class="string">'50%'</span>&#125;,</span><br><span class="line">    close: &#123;<span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">rotateZ</span>: <span class="string">'-45deg'</span>, <span class="attr">top</span>: <span class="string">'5px'</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> sidebarToggleLine2nd = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">  el: <span class="string">'.sidebar-toggle-line-middle'</span>,</span><br><span class="line">  status: &#123;</span><br><span class="line">    arrow: &#123;<span class="attr">width</span>: <span class="string">'90%'</span>&#125;,</span><br><span class="line">    close: &#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> sidebarToggleLine3rd = <span class="keyword">new</span> SidebarToggleLine(&#123;</span><br><span class="line">  el: <span class="string">'.sidebar-toggle-line-last'</span>,</span><br><span class="line">  status: &#123;</span><br><span class="line">    arrow: &#123;<span class="attr">width</span>: <span class="string">'60%'</span>, <span class="attr">rotateZ</span>: <span class="string">'-45deg'</span>, <span class="attr">top</span>: <span class="string">'-2px'</span>, <span class="attr">left</span>: <span class="string">'50%'</span>&#125;,</span><br><span class="line">    close: &#123;<span class="attr">width</span>: <span class="string">'100%'</span>, <span class="attr">rotateZ</span>: <span class="string">'45deg'</span>, <span class="attr">top</span>: <span class="string">'-5px'</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>侧边栏的工作就大功告成了</strong></p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p>刚开始我是打算把目录放在界面上端设置一个绝对位置让他停留在界面上的，但是由于要搭配背景的关系最终决定放在右面</p>
<p>更改目录位置只需要修改一个文件</p>
<p><code>&lt;your blog&gt;/theme/next/source/css/_schemes/Muse/sidebar/_menu.styl</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-nav</span> &#123;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">left</span>: 0;</span><br><span class="line">    <span class="selector-tag">top</span>: 52<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">margin</span>: 0;</span><br><span class="line">    <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    <span class="selector-tag">padding</span>: 0;</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-tag">white</span>;</span><br><span class="line">    border-bottom: 1px solid $gray-lighter;</span><br><span class="line">    z-index: $zindex-5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*以下为新增内容*/</span></span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br><span class="line">  <span class="selector-tag">right</span>: 10%;</span><br><span class="line">  <span class="selector-tag">top</span>: 15%;</span><br><span class="line">  <span class="selector-tag">margin</span>: 0;</span><br><span class="line">  <span class="selector-tag">padding</span>: 0;</span><br><span class="line">  border-left: 1px solid $gray-lighter;</span><br><span class="line">  z-index: $zindex-5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  +mobile() &#123; text-align: left; &#125;</span><br><span class="line">  <span class="comment">/*以下为新增内容*/</span></span><br><span class="line">  <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line">  <span class="selector-tag">flex-direction</span>: <span class="selector-tag">column</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h4><p>默认的社交链接是 <code>inhert-block</code>行内块元素，因此它默认先填满一行再换行显示，观感不是太好，我们也可以靠修改css使他达到换行的效果</p>
<p>打开 <code>&lt;your blog&gt;/theme/next/source/css/_common/components/sidebar-author-links.styl</code></p>
<p>修改 <code>.links-of-author</code>类</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.links-of-author</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就大功告成了</p>
<h4 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h4><p><img src="/img/Muse_u.png" alt="Muse"></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>主题优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 常见错误</title>
    <url>/2019-12-12/Hadoop-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h1 id="Hadoop-常见错误"><a href="#Hadoop-常见错误" class="headerlink" title="Hadoop 常见错误"></a>Hadoop 常见错误</h1><h2 id="subprocess-failed-with-code-类型的错误"><a href="#subprocess-failed-with-code-类型的错误" class="headerlink" title="subprocess failed with code 类型的错误"></a><code>subprocess failed with code</code> 类型的错误</h2><a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PipeMapRed.waitOutputThreads(): subprocess failed with code X </span><br><span class="line">error code 1: Operation not permitted</span><br><span class="line">error code 2: No such file or directory</span><br><span class="line">error code 3: No such process</span><br><span class="line">error code 4: Interrupted system call</span><br><span class="line">error code 5: Input/output error</span><br><span class="line">error code 6: No such device or address</span><br><span class="line">error code 7: Argument list too long</span><br><span class="line">error code 8: Exec format error</span><br><span class="line">error code 9: Bad file descriptor</span><br><span class="line">error code 10: No child processes</span><br><span class="line">error code 11: Resource temporarily unavailable</span><br><span class="line">error code 12: Cannot allocate memory</span><br><span class="line">error code 13: Permission denied</span><br><span class="line">error code 14: Bad address</span><br><span class="line">error code 15: Block device required</span><br><span class="line">error code 16: Device or resource busy</span><br><span class="line">error code 17: File exists</span><br><span class="line">error code 18: Invalid cross-device link</span><br><span class="line">error code 19: No such device</span><br><span class="line">error code 20: Not a directory</span><br><span class="line">error code 21: Is a directory</span><br><span class="line">error code 22: Invalid argument</span><br><span class="line">error code 23: Too many open files in system</span><br><span class="line">error code 24: Too many open files</span><br><span class="line">error code 25: Inappropriate ioctl for device</span><br><span class="line">error code 26: Text file busy</span><br><span class="line">error code 27: File too large</span><br><span class="line">error code 28: No space left on device</span><br><span class="line">error code 29: Illegal seek</span><br><span class="line">error code 30: Read-only file system</span><br><span class="line">error code 31: Too many links</span><br><span class="line">error code 32: Broken pipe</span><br><span class="line">error code 33: Numerical argument out of domain</span><br><span class="line">error code 34: Numerical result out of range</span><br><span class="line">error code 35: Resource deadlock avoided</span><br><span class="line">error code 36: File name too long</span><br><span class="line">error code 37: No locks available</span><br><span class="line">error code 38: Function not implemented</span><br><span class="line">error code 39: Directory not empty</span><br><span class="line">error code 40: Too many levels of symbolic links</span><br><span class="line">error code 42: No message of desired type</span><br><span class="line">error code 43: Identifier removed</span><br><span class="line">error code 44: Channel number out of range</span><br><span class="line">error code 45: Level 2 not synchronized</span><br><span class="line">error code 46: Level 3 halted</span><br><span class="line">error code 47: Level 3 reset</span><br><span class="line">error code 48: Link number out of range</span><br><span class="line">error code 49: Protocol driver not attached</span><br><span class="line">error code 50: No CSI structure available</span><br><span class="line">error code 51: Level 2 halted</span><br><span class="line">error code 52: Invalid exchange</span><br><span class="line">error code 53: Invalid request descriptor</span><br><span class="line">error code 54: Exchange full</span><br><span class="line">error code 55: No anode</span><br><span class="line">error code 56: Invalid request code</span><br><span class="line">error code 57: Invalid slot</span><br><span class="line">error code 59: Bad font file format</span><br><span class="line">error code 60: Device not a stream</span><br><span class="line">error code 61: No data available</span><br><span class="line">error code 62: Timer expired</span><br><span class="line">error code 63: Out of streams resources</span><br><span class="line">error code 64: Machine is not on the network</span><br><span class="line">error code 65: Package not installed</span><br><span class="line">error code 66: Object is remote</span><br><span class="line">error code 67: Link has been severed</span><br><span class="line">error code 68: Advertise error</span><br><span class="line">error code 69: Srmount error</span><br><span class="line">error code 70: Communication error on send</span><br><span class="line">error code 71: Protocol error</span><br><span class="line">error code 72: Multihop attempted</span><br><span class="line">error code 73: RFS specific error</span><br><span class="line">error code 74: Bad message</span><br><span class="line">error code 75: Value too large for defined data type</span><br><span class="line">error code 76: Name not unique on network</span><br><span class="line">error code 77: File descriptor in bad state</span><br><span class="line">error code 78: Remote address changed</span><br><span class="line">error code 79: Can not access a needed shared library</span><br><span class="line">error code 80: Accessing a corrupted shared library</span><br><span class="line">error code 81: .lib section in a.out corrupted</span><br><span class="line">error code 82: Attempting to link in too many shared libraries</span><br><span class="line">error code 83: Cannot exec a shared library directly</span><br><span class="line">error code 84: Invalid or incomplete multibyte or wide character</span><br><span class="line">error code 85: Interrupted system call should be restarted</span><br><span class="line">error code 86: Streams pipe error</span><br><span class="line">error code 87: Too many users</span><br><span class="line">error code 88: Socket operation on non-socket</span><br><span class="line">error code 89: Destination address required</span><br><span class="line">error code 90: Message too long</span><br><span class="line">error code 91: Protocol wrong type for socket</span><br><span class="line">error code 92: Protocol not available</span><br><span class="line">error code 93: Protocol not supported</span><br><span class="line">error code 94: Socket type not supported</span><br><span class="line">error code 95: Operation not supported</span><br><span class="line">error code 96: Protocol family not supported</span><br><span class="line">error code 97: Address family not supported by protocol</span><br><span class="line">error code 98: Address already in use</span><br><span class="line">error code 99: Cannot assign requested address</span><br><span class="line">error code 100: Network is down</span><br><span class="line">error code 101: Network is unreachable</span><br><span class="line">error code 102: Network dropped connection on reset</span><br><span class="line">error code 103: Software caused connection abort</span><br><span class="line">error code 104: Connection reset by peer</span><br><span class="line">error code 105: No buffer space available</span><br><span class="line">error code 106: Transport endpoint is already connected</span><br><span class="line">error code 107: Transport endpoint is not connected</span><br><span class="line">error code 108: Cannot send after transport endpoint shutdown</span><br><span class="line">error code 109: Too many references: cannot splice</span><br><span class="line">error code 110: Connection timed out</span><br><span class="line">error code 111: Connection refused</span><br><span class="line">error code 112: Host is down</span><br><span class="line">error code 113: No route to host</span><br><span class="line">error code 114: Operation already in progress</span><br><span class="line">error code 115: Operation now in progress</span><br><span class="line">error code 116: Stale NFS file handle</span><br><span class="line">error code 117: Structure needs cleaning</span><br><span class="line">error code 118: Not a XENIX named type file</span><br><span class="line">error code 119: No XENIX semaphores available</span><br><span class="line">error code 120: Is a named type file</span><br><span class="line">error code 121: Remote I/O error</span><br><span class="line">error code 122: Disk quota exceeded</span><br><span class="line">error code 123: No medium found</span><br><span class="line">error code 124: Wrong medium type</span><br><span class="line">error code 125: Operation canceled</span><br><span class="line">error code 126: Required key not available</span><br><span class="line">error code 127: Key has expired</span><br><span class="line">error code 128: Key has been revoked</span><br><span class="line">error code 129: Key was rejected by service</span><br><span class="line">error code 130: Owner died</span><br><span class="line">error code 131: State not recoverable</span><br><span class="line">error code 132: Old database file</span><br><span class="line">error code 133: No record read before update</span><br><span class="line">error code 134: Record was already deleted (or record file crashed)</span><br><span class="line">error code 135: No more room in record file</span><br><span class="line">error code 136: No more room in index file</span><br><span class="line">error code 137: No more records (read after end of file)</span><br><span class="line">error code 138: Unsupported extension used for table</span><br><span class="line">error code 139: Too big row</span><br><span class="line">error code 140: Wrong create options</span><br><span class="line">error code 141: Duplicate unique key or constraint on write or update</span><br><span class="line">error code 142: Unknown character set used</span><br><span class="line">error code 143: Conflicting table definitions in sub-tables of MERGE table</span><br><span class="line">error code 144: Table is crashed and last repair failed</span><br><span class="line">error code 145: Table was marked as crashed and should be repaired</span><br><span class="line">error code 146: Lock timed out; Retry transaction</span><br><span class="line">error code 147: Lock table is full; Restart program with a larger locktable</span><br><span class="line">error code 148: Updates are not allowed under a read only transactions</span><br><span class="line">error code 149: Lock deadlock; Retry transaction</span><br><span class="line">error code 150: Foreign key constraint is incorrectly formed</span><br><span class="line">error code 151: Cannot add a child row</span><br><span class="line">error code 152: Cannot delete a parent row</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Django+Nginx+Uwsgi+Https环境开发文档——环境搭建</title>
    <url>/2020-03-23/Django-Nginx-Uwsgi-Https%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E2%80%94%E2%80%94%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>以Python为Web主要开发环境的开发者大多数会采用Django+Uwsgi的框架来进行开发，因此必不可少的要接触服务器环境的搭建以及维护工作。</p>
<p>本文档以介绍和总结服务器环境搭建为主。</p>
</blockquote>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h2><ul>
<li>RASPBERRY PI 3B+</li>
<li>100Mbps 2.4GHz Wi-Fi Network</li>
<li>320GB Western Digital HHD</li>
</ul>
<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ul>
<li>Raspbian GNU/Linux 10 (buster) armv7l</li>
</ul>
<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><ul>
<li>Bash 5.0.3</li>
<li>vim 8.1</li>
</ul>
<a id="more"></a>

<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Python现在最稳定的版本是Python3.7，当然现在官网已经推出了3.8，其实哪个版本都不重要，服务器能运行就行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">更新软件包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt upgrade</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装python3和pip3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install python3 python3-pip</span></span><br></pre></td></tr></table></figure>

<h2 id="更换pip源"><a href="#更换pip源" class="headerlink" title="更换pip源"></a>更换pip源</h2><p>由于网络原因国内一部分地区访问官方的源会有网络问题，因此我们可以将源换成国内的镜像源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /root/.pip/pip.conf</span></span><br></pre></td></tr></table></figure>

<p>如果没有这个文件的话就新建一个</p>
<p>将<code>pip.conf</code>中的内容改为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 阿里源</span></span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 中科大源</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> index-url = https://pypi.mirrors.ustc.edu.cn/simple/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 豆瓣源</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> index-url = http://pypi.douban.com/simple/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清华源</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> index-url = https://pypi.tuna.tsinghua.edu.cn/simple/</span></span><br></pre></td></tr></table></figure>

<h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install django</span></span><br></pre></td></tr></table></figure>

<h2 id="新建Django项目"><a href="#新建Django项目" class="headerlink" title="新建Django项目"></a>新建Django项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> django-admin startproject &lt;project&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;project&gt;</code>是你的项目名称</li>
</ul>
<h2 id="配置项目AllowHost"><a href="#配置项目AllowHost" class="headerlink" title="配置项目AllowHost"></a>配置项目AllowHost</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;project&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vim &lt;project&gt;/settings.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到ALLOWED_HOSTS，将它的值从[]改成[<span class="string">'*'</span>]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存退出</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;project&gt;</code>是你的项目名称</li>
</ul>
<h2 id="测试启动"><a href="#测试启动" class="headerlink" title="测试启动"></a>测试启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 manager.py runserver 0.0.0.0:9000</span></span><br></pre></td></tr></table></figure>

<p>打开浏览器，在地址栏输入<code>&lt;host&gt;:9000</code></p>
<p><img src="/img/Django/django.png" alt="django"></p>
<p>启动成功</p>
<h1 id="Uwsgi"><a href="#Uwsgi" class="headerlink" title="Uwsgi"></a>Uwsgi</h1><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pip3 install uwsgi</span></span><br></pre></td></tr></table></figure>

<h2 id="测试uwsgi-Django"><a href="#测试uwsgi-Django" class="headerlink" title="测试uwsgi+Django"></a>测试uwsgi+Django</h2><h3 id="进入刚刚创建的项目"><a href="#进入刚刚创建的项目" class="headerlink" title="进入刚刚创建的项目"></a>进入刚刚创建的项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;project&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="uwsgi测试"><a href="#uwsgi测试" class="headerlink" title="uwsgi测试"></a>uwsgi测试</h3><h4 id="启动uwsgi"><a href="#启动uwsgi" class="headerlink" title="启动uwsgi"></a>启动uwsgi</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uwsgi --http :8080 --module &lt;project&gt;.wsgi</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;project&gt;</code>是你的项目名称</li>
</ul>
<h4 id="浏览器测试"><a href="#浏览器测试" class="headerlink" title="浏览器测试"></a>浏览器测试</h4><p>浏览器输入<code>&lt;host&gt;:8080</code></p>
<p><img src="/img/Django/django.png" alt="django"></p>
<p>启动成功</p>
<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install nginx</span></span><br></pre></td></tr></table></figure>

<h2 id="测试Nginx"><a href="#测试Nginx" class="headerlink" title="测试Nginx"></a>测试Nginx</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/nginx/uwsgi_params</span><br><span class="line"></span><br><span class="line">uwsgi_param  QUERY_STRING       $query_string;</span><br><span class="line">uwsgi_param  REQUEST_METHOD     $request_method;</span><br><span class="line">uwsgi_param  CONTENT_TYPE       $content_type;</span><br><span class="line">uwsgi_param  CONTENT_LENGTH     $content_length;</span><br><span class="line"></span><br><span class="line">uwsgi_param  REQUEST_URI        $request_uri;</span><br><span class="line">uwsgi_param  PATH_INFO          $document_uri;</span><br><span class="line">uwsgi_param  DOCUMENT_ROOT      $document_root;</span><br><span class="line">uwsgi_param  SERVER_PROTOCOL    $server_protocol;</span><br><span class="line">uwsgi_param  REQUEST_SCHEME     $scheme;</span><br><span class="line">uwsgi_param  HTTPS              $https if_not_empty;</span><br><span class="line"></span><br><span class="line">uwsgi_param  REMOTE_ADDR        $remote_addr;</span><br><span class="line">uwsgi_param  REMOTE_PORT        $remote_port;</span><br><span class="line">uwsgi_param  SERVER_PORT        $server_port;</span><br><span class="line">uwsgi_param  SERVER_NAME        $server_name;</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除默认的配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm /etc/nginx/site-enabled/*</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm /etc/nginx/site-available/*</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建用户配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo touch /etc/nginx/site-enabled/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 软链</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /etc/nginx/site-enabled/nginx.conf /etc/nginx/site-available/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编写配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/nginx/site-enbaled/nginx.conf</span></span><br></pre></td></tr></table></figure>

<h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> django组件连接</span></span><br><span class="line">upstream django&#123;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> tmp/uwsgi_1.sock只是sock文件的路径，可以自行定义</span></span><br><span class="line">	server unix:///tmp/uwsgi_1.sock;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    # 监视的网站端口</span><br><span class="line">    listen    80;</span><br><span class="line">    # UTF-8编码</span><br><span class="line">    charset    utf-8;</span><br><span class="line">    # 最大上传大小128M，可自由定义</span><br><span class="line">    client_max_body_size 128M;  </span><br><span class="line">    # 媒体文件   </span><br><span class="line">    location /media  &#123;</span><br><span class="line">        alias /&lt;自定义路径&gt;/media; </span><br><span class="line">    &#125;</span><br><span class="line">    # 静态文件</span><br><span class="line">    location /static &#123;</span><br><span class="line">        alias /&lt;自定义路径&gt;/static; # 静态网页存放，位置可自定义，地址写详细</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 其他交由django处理</span><br><span class="line">    location / &#123;</span><br><span class="line">        uwsgi_pass  django;</span><br><span class="line">        include    uwsgi_params; # uwsgi</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存退出</p>
<h3 id="测试配置文件"><a href="#测试配置文件" class="headerlink" title="测试配置文件"></a>测试配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo nginx -t</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Django/nginx.png" alt="django"></p>
<h3 id="重启Nginx服务"><a href="#重启Nginx服务" class="headerlink" title="重启Nginx服务"></a>重启Nginx服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /etc/init.d/nginx restart</span></span><br></pre></td></tr></table></figure>

<h2 id="测试Django-Uwsgi-Nginx"><a href="#测试Django-Uwsgi-Nginx" class="headerlink" title="测试Django+Uwsgi+Nginx"></a>测试Django+Uwsgi+Nginx</h2><h3 id="使用ini文件配置服务器启动"><a href="#使用ini文件配置服务器启动" class="headerlink" title="使用ini文件配置服务器启动"></a>使用ini文件配置服务器启动</h3><h4 id="自行新建一个文件夹，用来储存ini文件"><a href="#自行新建一个文件夹，用来储存ini文件" class="headerlink" title="自行新建一个文件夹，用来储存ini文件"></a>自行新建一个文件夹，用来储存ini文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim uwsgi.ini</span></span><br></pre></td></tr></table></figure>

<h4 id="uwsgi-ini"><a href="#uwsgi-ini" class="headerlink" title="uwsgi.ini"></a>uwsgi.ini</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">chdir</span> = &lt;你的项目地址&gt;</span><br><span class="line"><span class="attr">socket</span> = /tmp/uwsgi_1.sock</span><br><span class="line"><span class="attr">module</span> = &lt;你的项目名称&gt;.wsgi</span><br><span class="line"><span class="attr">chmod-socket</span> = <span class="number">666</span></span><br><span class="line"><span class="attr">processes</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">master</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">vacuum</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">uid</span> = pi</span><br><span class="line"><span class="attr">gid</span> = pi</span><br></pre></td></tr></table></figure>

<ul>
<li><code>chdir</code>  你的项目绝对路径</li>
<li><code>socket</code>  之前配置nginx.conf时设置的路径</li>
<li><code>module</code>  项目名称.wsgi</li>
</ul>
<h4 id="新建系统服务用来后台启动"><a href="#新建系统服务用来后台启动" class="headerlink" title="新建系统服务用来后台启动"></a>新建系统服务用来后台启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/systemd/system/emperor.uwsgi.service</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=uWSGI Emperor</span><br><span class="line">After=syslog.target</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/uwsgi --emperor &lt;ini文件路径&gt; --daemonize /var/log/uwsgi_emperor.log</span><br><span class="line">RuntimeDirectory=uwsgi</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">Restart=on-failure</span><br><span class="line">Type=forking</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> emperor.uwsgi.service</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start emperor.uwsgi.service</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器输入<code>http://&lt;host&gt;</code></p>
<p><img src="/img/Django/django.png" alt="django"></p>
<h1 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h1><p>https作为当今主流的协议自然是应该兼容一下的</p>
<h2 id="生成ssl证书"><a href="#生成ssl证书" class="headerlink" title="生成ssl证书"></a>生成ssl证书</h2><h3 id="安装openssl"><a href="#安装openssl" class="headerlink" title="安装openssl"></a>安装openssl</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ sudo apt <span class="keyword">install</span> openssl</span><br></pre></td></tr></table></figure>

<h3 id="新建文件夹用来存放证书"><a href="#新建文件夹用来存放证书" class="headerlink" title="新建文件夹用来存放证书"></a>新建文件夹用来存放证书</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /usr/<span class="built_in">local</span>/nginx</span></span><br></pre></td></tr></table></figure>

<h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo openssl genrsa -des3 -out server.key 4096</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo openssl req -new -key server.key -out server.csr</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp server.key server.key.org</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo openssl rsa -<span class="keyword">in</span> server.key.org -out server.key</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span></span><br></pre></td></tr></table></figure>

<h2 id="修改Nginx配置文件"><a href="#修改Nginx配置文件" class="headerlink" title="修改Nginx配置文件"></a>修改Nginx配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/nginx/site-enabled/nginx.conf</span></span><br></pre></td></tr></table></figure>

<p>在原有的文件末尾添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 					443;</span><br><span class="line">	charset					utf-8;</span><br><span class="line">	client_max_body_size 	512M;</span><br><span class="line">	ssl                     on;</span><br><span class="line">    ssl_certificate         /usr/local/nginx/server.crt;</span><br><span class="line">    ssl_certificate_key     /usr/local/nginx/server.key;</span><br><span class="line">    ssl_session_timeout     5m;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">    	uwsgi_pass      django;</span><br><span class="line">        include         uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">   	location /media &#123;</span><br><span class="line">        alias /website/media;</span><br><span class="line">    &#125;</span><br><span class="line">    location /static &#123;</span><br><span class="line">        alias /website/static;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo nginx -t</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Django/nginx.png" alt="django"></p>
<h2 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/nginx restart</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/Django/django.png" alt="django"></p>
<p>成功</p>
<h2 id="强制Https"><a href="#强制Https" class="headerlink" title="强制Https"></a>强制Https</h2><p>毕竟都有Https了要啥Http啊</p>
<h3 id="修改Nginx配置文件-1"><a href="#修改Nginx配置文件-1" class="headerlink" title="修改Nginx配置文件"></a>修改Nginx配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/nginx/site-enabled/nginx.conf</span></span><br></pre></td></tr></table></figure>

<p>把之前http的文件配置全部注释，换成</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> 					<span class="number">80</span>;</span><br><span class="line">	<span class="attribute">charset</span>					utf-<span class="number">8</span>;</span><br><span class="line">	<span class="attribute">client_max_body_size</span> 	<span class="number">512M</span>;</span><br><span class="line">	<span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span>  		https://<span class="variable">$host</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存，重启</p>
<p><strong>大功告成</strong></p>
]]></content>
      <categories>
        <category>doc</category>
        <category>code</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Nginx</tag>
        <tag>Uwsgi</tag>
        <tag>Https</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu19.10主题美化</title>
    <url>/2020-01-23/Ubuntu19-10%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Ubuntu-19-10-主题美化"><a href="#Ubuntu-19-10-主题美化" class="headerlink" title="Ubuntu 19.10 主题美化"></a>Ubuntu 19.10 主题美化</h1><blockquote>
<p>Ubuntu 19.10 和上个版本相比其实并没有太大的变化，主要把Gnome升级到了3.34，同时进行了系统优化，Ubuntu 19.10的启动速度要比之前的版本更快更稳定。</p>
<p>其实Ubuntu的桌面系统一直受不少人诟病，主要是个性化支持太少，对比其他针对桌面系统优化的系统（比如Mint Linux、Deepin等）有明显的差距。</p>
<p>索性Gnome桌面支持用户自行设计主题，于是有不少大佬把Ubuntu玩出了花。</p>
<p>当然优化美化这种事智者见智，适合自己最重要。</p>
</blockquote>
<a id="more"></a>

<h2 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h2><p>由于众所周知的原因Ubuntu的软件源有一定几率无法使用（得看网络运营商和所在区域），因此换源就成为了Ubuntu用户每次安装完系统的首要任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开sources.list文件</span></span><br><span class="line">sudo nano /etc/apt/sources.list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件中所有的域名更换成可用软件源的域名并保存</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我这里使用的是中科大源 http://mirrors.ustc.edu.cn/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Git安装及配置"><a href="#Git安装及配置" class="headerlink" title="Git安装及配置"></a>Git安装及配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo apt install git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置</span></span><br><span class="line">git config --global user.name "your name"</span><br><span class="line">git config --global user.email "your email"</span><br></pre></td></tr></table></figure>

<h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">xz -d node-v12.14.1-linux-x64.tar.xz</span><br><span class="line">tar -xvf node-v12.14.1-linux-x64.tar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移动</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 我习惯将nodejs放在/opt/文件夹下</span></span></span><br><span class="line">sudo mv node-v12.14.1-linux-x64 /opt/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 链接</span></span><br><span class="line">sudo ln -s /opt/node-v12.14.1-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line">sudo ln -s /opt/node-v12.14.1-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure>

<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><h3 id="安装tweak"><a href="#安装tweak" class="headerlink" title="安装tweak"></a>安装tweak</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome-tweak-tool</span><br></pre></td></tr></table></figure>

<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>在<a href="https://www.gnome-look.org/" target="_blank" rel="noopener">gnome look</a>上可以下载桌面、图标、鼠标等主题</p>
<p>我使用的主题：</p>
<ul>
<li>应用程序：<a href="https://www.gnome-look.org/p/1326889/" target="_blank" rel="noopener">Kimi</a></li>
<li>图标：<a href="https://www.gnome-look.org/p/1279924/" target="_blank" rel="noopener">Tela-black-dark</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装主题和shell主题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">sudo tar -xvf &lt;themefile&gt; </span><br><span class="line">sudo mv &lt;theme&gt; /usr/share/themes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装鼠标和图标</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">sudo tar -xvf &lt;themefile&gt;</span><br><span class="line">sudo mv &lt;theme&gt; /usr/share/icons</span><br></pre></td></tr></table></figure>

<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/2.png" alt="Tweak"></p>
<h2 id="优化Dock"><a href="#优化Dock" class="headerlink" title="优化Dock"></a>优化Dock</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome-shell-extensions </span><br><span class="line">sudo apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure>

<h3 id="浏览器安装shell-extensions"><a href="#浏览器安装shell-extensions" class="headerlink" title="浏览器安装shell extensions"></a>浏览器安装shell extensions</h3><p>chrome和firefox直接去<a href="https://extensions.gnome.org/" target="_blank" rel="noopener">shell extensions</a>下载安装插件</p>
<p>傻瓜式安装不多赘述</p>
<h3 id="Dash-to-dock"><a href="#Dash-to-dock" class="headerlink" title="Dash-to-dock"></a>Dash-to-dock</h3><p>Ubuntu自带的Ubuntu-dock说实话太丑了，还不支持个性化修改</p>
<p>所以我们使用dash-to-dock这个插件就可以定制自己的dock了</p>
<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/dash-to-dock.png" alt="dash-to-dock"></p>
<h3 id="Blyr"><a href="#Blyr" class="headerlink" title="Blyr"></a>Blyr</h3><p>对 GNOME 外壳 UI 元素应用模糊效果。</p>
<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/blyr.png" alt="dash-to-dock"></p>
<h3 id="Coverflow-alt-tab"><a href="#Coverflow-alt-tab" class="headerlink" title="Coverflow alt-tab"></a>Coverflow alt-tab</h3><p>添加桌面窗口之间的切换特效（似乎是仿照Mac的但我没用过Mac我也不清楚）</p>
<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/coverflow.png" alt="dash-to-dock"></p>
<h3 id="User-theme"><a href="#User-theme" class="headerlink" title="User theme"></a>User theme</h3><p>将桌面主题应用到顶栏以及dock</p>
<p>添加User theme插件以后之前tweak（优化）的界面shell选项那里的感叹号就没有了，就可以自己添加shell主题了。</p>
<p>我使用的shell主题是<a href="https://www.gnome-look.org/p/1203425/" target="_blank" rel="noopener">Transparent shell</a></p>
<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/transparent.png" alt="dash-to-dock"></p>
<h2 id="安装Conky"><a href="#安装Conky" class="headerlink" title="安装Conky"></a>安装Conky</h2><blockquote>
<p>Conky 是一个用于X窗口系统的系统监视软件。它可以运行在 GNU/Linux 和 FreeBSD 上，是一个基于GPL协议的免费软件。Conky 可以监控许多系统变量，包括 CPU，内存，交换分区，磁盘空间，温度，top，上传，下载，系统消息，以及更多。它具有很高的可配置性，但配置有一些难于理解。Conky是torsmo的一个分支。</p>
<p>​                                                                                                                                                            —— ArchWiki</p>
</blockquote>
<h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/conky.jpeg" alt="conky"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install conky-all</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在自己的目录下新建一个conky文件夹</span></span><br><span class="line">cd</span><br><span class="line">mkdir conky</span><br><span class="line">cd conky</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用git下载conky-grapes</span></span><br><span class="line">git clone https://github.com/popindavibe/conky-grapes.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 授予权限，否则无法编译</span></span><br><span class="line">sudo chmod -R 777 ~/conky/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译(请确保已安装python)</span></span><br><span class="line">cd ~/conky/conky-grapes</span><br><span class="line">python ./create_config.py</span><br><span class="line">mv ./*.conkyrc ~/.conkyrc</span><br></pre></td></tr></table></figure>

<p>不喜欢这个颜色的话可以修改<code>~/.conkyrc</code>和<code>~/conky/conky-grapes/rings-v2_gen.lua</code>文件中的颜色值（RGB值）</p>
<p>配置完成后进入<code>~/conky/conky-grapes/</code>文件夹下手动安装那三个<code>.ttf</code>结尾的字体文件</p>
<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p>新建开机启动文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.config/autostart/conky.desktop</span><br></pre></td></tr></table></figure>

<p>将以下代码写入文件内</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=Conky</span><br><span class="line">Comment=Start conky script</span><br><span class="line">Exec=\s/usr/bin/conky -p 10</span><br><span class="line">OnlyShowIn=GNOME</span><br><span class="line">X-GNOME-Autostart-Phase=Application</span><br><span class="line">Name[zh_CN]=conky.desktop</span><br></pre></td></tr></table></figure>

<p>保存退出就好了</p>
<h2 id="更换GRUB主题"><a href="#更换GRUB主题" class="headerlink" title="更换GRUB主题"></a>更换GRUB主题</h2><p>Grub主题更换更加方便一点</p>
<p>同样是在<a href="https://www.gnome-look.org/" target="_blank" rel="noopener">gnome look</a>网站上找Grub Theme，下载的压缩包里一般都有<code>install.sh</code>文件，按照说明安装即可</p>
<p>我使用的是主题是Tela grub，这个作者还有其他作品都在一个git仓库里，可以直接<a href="https://github.com/vinceliuice/grub2-themes" target="_blank" rel="noopener">下载</a>使用</p>
<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/grub-theme-slaze.jpg" alt="slaze"></p>
<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/grub-theme-stylish.jpg" alt="stylish"></p>
<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/grub-theme-tela.jpg" alt="tela"></p>
<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/grub-theme-vimix.jpg" alt="vimix"></p>
<h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><h3 id="卸载-ibus"><a href="#卸载-ibus" class="headerlink" title="卸载 ibus"></a>卸载 ibus</h3><p>搜狗输入法Linux版基于fcitx，如果不把ibus卸载可能会出现bug</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove ibus</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure>

<h3 id="安装fcitx"><a href="#安装fcitx" class="headerlink" title="安装fcitx"></a>安装fcitx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install fcitx</span><br></pre></td></tr></table></figure>

<h3 id="下载安装包进行安装"><a href="#下载安装包进行安装" class="headerlink" title="下载安装包进行安装"></a>下载安装包进行安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget http://cdn2.ime.sogou.com/dl/index/1571302197/sogoupinyin_2.3.1.0112_amd64.deb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo dpkg -i sogoupinyin_2.3.1.0112_amd64.deb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一次安装可能会出现依赖问题，执行以下代码安装依赖</span></span><br><span class="line">sudo apt install -f</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖以后再执行上面的安装命令</span></span><br></pre></td></tr></table></figure>

<h2 id="安装百度网盘"><a href="#安装百度网盘" class="headerlink" title="安装百度网盘"></a>安装百度网盘</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget http://issuecdn.baidupcs.com/issue/netdisk/LinuxGuanjia/3.0.1/baidunetdisk_linux_3.0.1.2.deb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo dpkg -i baidunetdisk_linux_3.0.1.2.deb</span><br></pre></td></tr></table></figure>

<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/baidu.png" alt="desktop"></p>
<h2 id="安装网易云音乐"><a href="#安装网易云音乐" class="headerlink" title="安装网易云音乐"></a>安装网易云音乐</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget http://d1.music.126.net/dmusic/netease-cloud-music_1.2.1_amd64_ubuntu_20190428.deb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">sudo dpkg -i netease-cloud-music_1.2.1_amd64_ubuntu_20190428.deb</span><br></pre></td></tr></table></figure>

<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/neteasy.png" alt="desktop"></p>
<h2 id="安装Sublime-Text"><a href="#安装Sublime-Text" class="headerlink" title="安装Sublime Text"></a>安装Sublime Text</h2><h3 id="安装GPG密钥"><a href="#安装GPG密钥" class="headerlink" title="安装GPG密钥"></a>安装GPG密钥</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<h3 id="确保-apt-设置为使用-https-源"><a href="#确保-apt-设置为使用-https-源" class="headerlink" title="确保 apt 设置为使用 https 源"></a>确保 apt 设置为使用 https 源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https</span><br></pre></td></tr></table></figure>

<h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br></pre></td></tr></table></figure>

<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install sublime-text</span><br></pre></td></tr></table></figure>

<h2 id="安装Typora"><a href="#安装Typora" class="headerlink" title="安装Typora"></a>安装Typora</h2><h3 id="安装GPG密钥-1"><a href="#安装GPG密钥-1" class="headerlink" title="安装GPG密钥"></a>安装GPG密钥</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<h3 id="添加源-1"><a href="#添加源-1" class="headerlink" title="添加源"></a>添加源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository 'deb https://typora.io/linux ./'</span><br></pre></td></tr></table></figure>

<h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install typora</span><br></pre></td></tr></table></figure>

<h2 id="优化效果图"><a href="#优化效果图" class="headerlink" title="优化效果图"></a>优化效果图</h2><p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/desktop.png" alt="desktop"></p>
<p><img src="/img/ubuntu19.10%E7%BE%8E%E5%8C%96/documents.png" alt="desktop"></p>
]]></content>
      <categories>
        <category>doc</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>theme</tag>
        <tag>主题美化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记（七）——事件处理</title>
    <url>/2020-08-20/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h1><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        The button above has been clicked &#123;&#123; counter &#125;&#125; times</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        counter: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h1><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 还可以接收一个需要调用的方法名称。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"greet"</span>&gt;</span></span><br><span class="line">        Greet</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">'Vue.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        greet: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'Hello'</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>)</span><br><span class="line">            <span class="keyword">if</span> (event) &#123;</span><br><span class="line">                alert(event.target.tagName)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h1><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('hi')"</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('what')"</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        say: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">            alert(msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"warn('Form cannot be submitted yet.', $event)"</span>&gt;</span></span><br><span class="line">  	Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    warn: <span class="function"><span class="keyword">function</span> (<span class="params">msg, event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event) &#123;</span><br><span class="line">            event.preventDefault()</span><br><span class="line">        &#125;</span><br><span class="line">        alert(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h1><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p>
<p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p>
<ul>
<li><code>.stop</code></li>
<li><code>.prevent</code></li>
<li><code>.capture</code></li>
<li><code>.self</code></li>
<li><code>.once</code></li>
<li><code>.passive</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记（三）——模板语法</title>
    <url>/2020-08-17/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。</p>
<p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p>
<p>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染 (render) 函数，使用可选的 JSX 语法。</p>
<a id="more"></a>

<h1 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h1><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        a: <span class="string">'hello Vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Mustache 标签将会被替代为对应数据对象上 <code>msg</code> property 的值。无论何时，绑定的数据对象上 <code>msg</code> property 发生了改变，插值处的内容都会更新。</p>
<p>通过使用<code>v-once</code>指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="原始HTML"><a href="#原始HTML" class="headerlink" title="原始HTML"></a>原始HTML</h2><p>双大括号会将数据解析为普通文本，而非HTML代码。为了输出真正的HTML需要使用<code>v-html</code>指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; rawHTML &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"rawHTML"</span>&gt;</span></span><br><span class="line">        &#123;&#123; rawHTML&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        rawHTML: <span class="string">'&lt;span style="color: red"&gt;Red&lt;/span&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <code>v-bind</code> 指令：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        color: <span class="string">'red'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用JS表达式"><a href="#使用JS表达式" class="headerlink" title="使用JS表达式"></a>使用JS表达式</h2><p>Vue支持在模板中对变量使用JS表达式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 二元表达式 --&gt;</span><br><span class="line">&#123;&#123; num + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 三元表达式 --&gt;</span><br><span class="line">&#123;&#123; ok ? &#39;YES&#39; : &#39;NO&#39; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- JS对象操作 --&gt;</span><br><span class="line">&#123;&#123; msg.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- HTML标签 --&gt;</span><br><span class="line">&lt;div v-bind:id&#x3D;&quot;&#39;list-&#39; + id&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里 <code>href</code> 是参数，告知 <code>v-bind</code> 指令将该元素的 <code>href</code> attribute 与表达式 <code>url</code> 的值绑定。</p>
<h2 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h2><p>从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">"url"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的 <code>attributeName</code> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 <code>data</code> property <code>attributeName</code>，其值为 <code>&quot;href&quot;</code>，那么这个绑定将等价于 <code>v-bind:href</code></p>
<p>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">"doSomething"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个示例中，当 <code>eventName</code> 的值为 <code>&quot;focus&quot;</code> 时，<code>v-on:[eventName]</code> 将等价于 <code>v-on:focus</code>。</p>
<h3 id="对动态参数的值的约束"><a href="#对动态参数的值的约束" class="headerlink" title="对动态参数的值的约束"></a>对动态参数的值的约束</h3><p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>
<h3 id="对动态参数表达式的约束"><a href="#对动态参数表达式的约束" class="headerlink" title="对动态参数表达式的约束"></a>对动态参数表达式的约束</h3><p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这会触发一个编译警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>['<span class="attr">foo</span>' + <span class="attr">bar</span>]=<span class="string">"value"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>变通的办法是使用没有空格或引号的表达式，或用计算属性替代这种复杂表达式。</p>
<p>在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someattr]`。</span></span><br><span class="line"><span class="comment">除非在实例中有一个名为“someattr”的 property，否则代码不会工作。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">someAttr</span>]=<span class="string">"value"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p><code>v-</code> 前缀作为一种视觉提示，用来识别模板中 Vue 特定的 attribute。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，<code>v-</code> 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的单页面应用程序 (SPA - single page application) 时，<code>v-</code> 前缀也变得没那么重要了。因此，Vue 为 <code>v-bind</code> 和 <code>v-on</code> 这两个最常用的指令，提供了特定简写：</p>
<h3 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a><code>v-bind</code> 缩写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">"url"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a><code>v-on</code> 缩写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">"doSomething"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>它们看起来可能与普通的 HTML 略有不同，但 <code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。</p>
<h1 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h1><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个地方，模板不再是简单的声明式逻辑。你必须看一段时间才能意识到，这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中多包含此处的翻转字符串时，就会更加难以处理。</p>
<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">app</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'Hello'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        <span class="comment">// 计算属性的 getter</span></span><br><span class="line">        reversedMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p>Original message: “Hello”</p>
<p>Computed reversed message: “olleH”</p>
<div role="alert" style="background-color: lightskyblue; padding: .5rem; color: white; border-radius: 10px;">app.reversedMessage 的值始终取决于 app.message 的值。</div>

<h3 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h3><p>上面的例子也可以写成下面这种形式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Reversed message: "&#123;&#123; reversedMessage() &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'Hello'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        reversedMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reversed().join(<span class="string">''</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">	now: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Date</span>.now()</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>
<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>
<h3 id="计算属性-vs-侦听属性"><a href="#计算属性-vs-侦听属性" class="headerlink" title="计算属性 vs 侦听属性"></a>计算属性 vs 侦听属性</h3><p>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：<strong>侦听属性</strong>。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 <code>watch</code>——特别是如果你之前使用过 AngularJS。然而，通常更好的做法是使用计算属性而不是命令式的 <code>watch</code> 回调。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#demo'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">'Foo'</span>,</span><br><span class="line">        lastName: <span class="string">'Bar'</span>,</span><br><span class="line">        fullName: <span class="string">'Foo Bar'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        firstName: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        lastName: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面代码是命令式且重复的。将它与计算属性的版本进行比较：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#demo'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">'Foo'</span>,</span><br><span class="line">        lastName: <span class="string">'Bar'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        fullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h3><p>计算属性默认只有 getter ，不过在需要时也可以自行提供一个 setter ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    fullName: &#123;</span><br><span class="line">        <span class="comment">// getter</span></span><br><span class="line">        <span class="keyword">get</span>: function() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// setter</span></span><br><span class="line">        <span class="keyword">set</span>: function(newValue) &#123;</span><br><span class="line">            <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">            <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在再运行 <code>demo.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>demo.firstName</code> 和 <code>demo.lastName</code> 也会相应地被更新。</p>
<h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"watch-demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Ask a yes/no question:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"question"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; answer &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class="line">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/lodash@<span class="number">4.13</span><span class="number">.1</span>/lodash.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">var watchDemo = new Vue(&#123;</span></span><br><span class="line"><span class="string">  el: '#watch-demo',</span></span><br><span class="line"><span class="string">  data: &#123;</span></span><br><span class="line"><span class="string">    question: '',</span></span><br><span class="line"><span class="string">    answer: 'I cannot give you an answer until you ask a question!'</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  watch: &#123;</span></span><br><span class="line"><span class="string">    // 如果 `question` 发生改变，这个函数就会运行</span></span><br><span class="line"><span class="string">    question: function (newQuestion, oldQuestion) &#123;</span></span><br><span class="line"><span class="string">      this.answer = 'Waiting for you to stop typing...'</span></span><br><span class="line"><span class="string">      this.debouncedGetAnswer()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  created: function () &#123;</span></span><br><span class="line"><span class="string">    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span><br><span class="line"><span class="string">    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span><br><span class="line"><span class="string">    // AJAX 请求直到用户输入完毕才会发出。</span></span><br><span class="line"><span class="string">    this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  methods: &#123;</span></span><br><span class="line"><span class="string">    getAnswer: function () &#123;</span></span><br><span class="line"><span class="string">      if (this.question.indexOf('?') === -1) &#123;</span></span><br><span class="line"><span class="string">        this.answer = 'Questions usually contain a question mark. ;-)'</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      this.answer = 'Thinking...'</span></span><br><span class="line"><span class="string">      var vm = this</span></span><br><span class="line"><span class="string">      axios.get('https://yesno.wtf/api')</span></span><br><span class="line"><span class="string">        .then(function (response) &#123;</span></span><br><span class="line"><span class="string">          vm.answer = _.capitalize(response.data.answer)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        .catch(function (error) &#123;</span></span><br><span class="line"><span class="string">          vm.answer = 'Error! Could not reach the API. ' + error</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个示例中，使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p>
]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记（一）——入门</title>
    <url>/2020-08-16/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="通过-lt-script-gt-引入"><a href="#通过-lt-script-gt-引入" class="headerlink" title="通过&lt;script&gt;引入"></a>通过<code>&lt;script&gt;</code>引入</h3><h4 id="开发版本"><a href="#开发版本" class="headerlink" title="开发版本"></a>开发版本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="生产版本"><a href="#生产版本" class="headerlink" title="生产版本"></a>生产版本</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="通过NPM安装"><a href="#通过NPM安装" class="headerlink" title="通过NPM安装"></a>通过NPM安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install vue</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="创建Vue实例"><a href="#创建Vue实例" class="headerlink" title="创建Vue实例"></a>创建Vue实例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 引入VueJS --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el: <span class="string">'#app'</span>,</span></span><br><span class="line">                data: &#123;</span><br><span class="line"><span class="actionscript">                    message: <span class="string">'Hello Vue!'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>el</code>是element的缩写，用来绑定界面中的dom元素</li>
<li><code>data</code>是数据，用来和dom元素进行数据交互</li>
</ul>
<h2 id="Vue数据与方法"><a href="#Vue数据与方法" class="headerlink" title="Vue数据与方法"></a>Vue数据与方法</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当绑定数据时，会将变量直接绑定到Vue的data属性中，此时绑定数据并不是将变量的值赋给Vue对象，而是直接将变量作为数据源绑定到Vue对象中。在绑定以后，修改变量的值会同时改变Vue的数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.b = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>这种方法是无法将b的值绑定到Vue对象中的，在绑定数据时应该提前声明变量。</p>
<p>使用<code>Object.freeze()</code>方法可以阻止修改现有的属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.freeze(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: obj</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这之后再执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data.a = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>就无法再更改Vue对象中的属性</p>
<h3 id="Vue预制属性与方法"><a href="#Vue预制属性与方法" class="headerlink" title="Vue预制属性与方法"></a>Vue预制属性与方法</h3><p>Vue预制的属性一般以<code>$</code>为前缀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="data"><a href="#data" class="headerlink" title="$data"></a><code>$data</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.$data === data <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<p><code>$data</code>是Vue对象中的<code>data</code>属性</p>
<h4 id="el"><a href="#el" class="headerlink" title="$el"></a><code>$el</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.$el === <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br></pre></td></tr></table></figure>

<p><code>$el</code>是Vue对象中的<code>el</code>属性</p>
<h4 id="watch-option-callback"><a href="#watch-option-callback" class="headerlink" title="$watch(option, callback)"></a><code>$watch(option, callback)</code></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.$watch(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">new, old</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这个回调函数会在‘app.a’改变之后调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>$watch(option, callback)</code>是一个实例方法，它会观察属性的变化。</p>
<p>回调函数有两个属性值<code>newValue</code>和<code>oldValue</code>，代表更新后的值和更新前的值</p>
]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记（九）——组件基础</title>
    <url>/2020-08-23/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h1><p>组件是可复用的 Vue 实例，在开发过程中，一般将重复的功能封装成组件，达到快捷、便捷开发的目的。</p>
<p>Vue.js使用 <code>Vue.component()</code> 创建组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>因为组件是可复用的 Vue 实例，所以它们与 <code>new Vue</code> 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p>
<a id="more"></a>

<h1 id="组件的服用"><a href="#组件的服用" class="headerlink" title="组件的服用"></a>组件的服用</h1><p>你可以将组件进行任意次数的复用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意当点击按钮时，每个组件都会各自独立维护它的 <code>count</code>。因为你每用一次组件，就会有一个它的新<strong>实例</strong>被创建。</p>
<p><strong>组件中 <code>data</code> 必须是一个函数</strong></p>
<p>当我们定义这个 <code>&lt;button-counter&gt;</code> 组件时，你可能会发现它的 <code>data</code> 并不是像这样直接提供一个对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取而代之的是，<strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> &#123;</span><br><span class="line">    	count: <span class="number">0</span></span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 Vue 没有这条规则，点击一个按钮就可能会影响到其它所有实例：</p>
<h1 id="组件的组织"><a href="#组件的组织" class="headerlink" title="组件的组织"></a>组件的组织</h1><p>通常一个应用会以一棵嵌套的组件树的形式来组织：</p>
<p><img src="/img/Vue/vue_components.png" alt="Vue_components"></p>
<p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p>
<p>为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。这里有两种组件的注册类型：<strong>全局注册</strong>和<strong>局部注册</strong>。至此，我们的组件都只是通过 <code>Vue.component</code> 全局注册的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123;</span><br><span class="line">  	<span class="comment">// ... options ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>全局注册的组件可以用在其被注册之后的任何 (通过 <code>new Vue</code>) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。</p>
<h1 id="通过-Prop-向子组件传递数据"><a href="#通过-Prop-向子组件传递数据" class="headerlink" title="通过 Prop 向子组件传递数据"></a>通过 Prop 向子组件传递数据</h1><p>Prop 是你可以在组件上注册的一些自定义 attribute。当一个值传递给一个 prop attribute 的时候，它就变成了那个组件实例的一个 property。为了给博文组件传递一个标题，我们可以用一个 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">  	props: [<span class="string">'title'</span>],</span><br><span class="line">  	template: <span class="string">'&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。在上述模板中，你会发现我们能够在组件实例中访问这个值，就像访问 <code>data</code> 中的值一样。</p>
<p>一个 prop 被注册之后，你就可以像这样把数据作为一个自定义 attribute 传递进来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"My journey with Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"Blogging with Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"Why Vue is so fun"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然而在一个典型的应用中，你可能在 <code>data</code> 里有一个博文的数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  	el: <span class="string">'#blog-post-demo'</span>,</span><br><span class="line">  	data: &#123;</span><br><span class="line">    	posts: [</span><br><span class="line">      		&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'My journey with Vue'</span> &#125;,</span><br><span class="line">      		&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'Blogging with Vue'</span> &#125;,</span><br><span class="line">      		&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'Why Vue is so fun'</span> &#125;</span><br><span class="line">    	]</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>并想要为每篇博文渲染一个组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-for</span>=<span class="string">"post in posts"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:key</span>=<span class="string">"post.id"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:title</span>=<span class="string">"post.title"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="单个根元素"><a href="#单个根元素" class="headerlink" title="单个根元素"></a>单个根元素</h1><p>当构建一个 <code>&lt;blog-post&gt;</code> 组件时，你的模板最终会包含的东西远不止一个标题：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最最起码，你会包含这篇博文的正文：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然而如果你在模板中尝试这样写，Vue 会显示一个错误，并解释道 <strong>every component must have a single root element (每个组件必须只有一个根元素)</strong>。你可以将模板的内容包裹在一个父元素内，来修复这个问题，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blog-post"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>看起来当组件变得越来越复杂的时候，我们的博文不只需要标题和内容，还需要发布日期、评论等等。为每个相关的信息定义一个 prop 会变得很麻烦：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-for</span>=<span class="string">"post in posts"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:key</span>=<span class="string">"post.id"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:title</span>=<span class="string">"post.title"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:content</span>=<span class="string">"post.content"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:publishedAt</span>=<span class="string">"post.publishedAt"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:comments</span>=<span class="string">"post.comments"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以是时候重构一下这个 <code>&lt;blog-post&gt;</code> 组件了，让它变成接受一个单独的 <code>post</code> prop：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-for</span>=<span class="string">"post in posts"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:key</span>=<span class="string">"post.id"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:post</span>=<span class="string">"post"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">  	props: [<span class="string">'post'</span>],</span><br><span class="line">  	template: <span class="string">`</span></span><br><span class="line"><span class="string">    	&lt;div class="blog-post"&gt;</span></span><br><span class="line"><span class="string">      		&lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      		&lt;div v-html="post.content"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    	&lt;/div&gt;</span></span><br><span class="line"><span class="string"> 	`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h1><p>在我们开发 <code>&lt;blog-post&gt;</code> 组件时，它的一些功能可能要求我们和父级组件进行沟通。例如我们可能会引入一个辅助功能来放大博文的字号，同时让页面的其它部分保持默认的字号。</p>
<p>在其父组件中，我们可以通过添加一个 <code>postFontSize</code> 数据 property 来支持这个功能：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  	el: <span class="string">'#blog-posts-events-demo'</span>,</span><br><span class="line">  	data: &#123;</span><br><span class="line">    	posts: [<span class="comment">/* ... */</span>],</span><br><span class="line">    	postFontSize: <span class="number">1</span></span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>它可以在模板中用来控制所有博文的字号：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"blog-posts-events-demo"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; fontSize: postFontSize + 'em' &#125;"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">v-for</span>=<span class="string">"post in posts"</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">v-bind:key</span>=<span class="string">"post.id"</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">v-bind:post</span>=<span class="string">"post"</span></span></span><br><span class="line"><span class="tag">    	&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在我们在每篇博文正文之前添加一个按钮来放大字号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">  	props: [<span class="string">'post'</span>],</span><br><span class="line">  	template: <span class="string">`</span></span><br><span class="line"><span class="string">    	&lt;div class="blog-post"&gt;</span></span><br><span class="line"><span class="string">      		&lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">      		&lt;button&gt;</span></span><br><span class="line"><span class="string">        		Enlarge text</span></span><br><span class="line"><span class="string">      		&lt;/button&gt;</span></span><br><span class="line"><span class="string">      		&lt;div v-html="post.content"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    	&lt;/div&gt;</span></span><br><span class="line"><span class="string">  	`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>问题是这个按钮不会做任何事：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">  	Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当点击这个按钮时，我们需要告诉父级组件放大所有博文的文本。幸好 Vue 实例提供了一个自定义事件的系统来解决这个问题。父级组件可以像处理 native DOM 事件一样通过 <code>v-on</code> 监听子组件实例的任意事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">...</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-on:enlarge-text</span>=<span class="string">"postFontSize += 0.1"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同时子组件可以通过调用内建的 <code>$emit</code>方法并传入事件名称来触发一个事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"$emit('enlarge-text')"</span>&gt;</span></span><br><span class="line">	Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有了这个 <code>v-on:enlarge-text=&quot;postFontSize += 0.1&quot;</code> 监听器，父级组件就会接收该事件并更新 <code>postFontSize</code> 的值。</p>
<h2 id="使用事件抛出一个值"><a href="#使用事件抛出一个值" class="headerlink" title="使用事件抛出一个值"></a>使用事件抛出一个值</h2><p>有的时候用一个事件来抛出一个特定的值是非常有用的。例如我们可能想让 <code>&lt;blog-post&gt;</code> 组件决定它的文本要放大多少。这时可以使用 <code>$emit</code> 的第二个参数来提供这个值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"$emit('enlarge-text', 0.1)"</span>&gt;</span></span><br><span class="line">  	Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后当在父级组件监听这个事件的时候，我们可以通过 <code>$event</code> 访问到被抛出的这个值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">...</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-on:enlarge-text</span>=<span class="string">"postFontSize += $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者，如果这个事件处理函数是一个方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">...</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-on:enlarge-text</span>=<span class="string">"onEnlargeText"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么这个值将会作为第一个参数传入这个方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  	onEnlargeText: <span class="function"><span class="keyword">function</span> (<span class="params">enlargeAmount</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.postFontSize += enlargeAmount</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在组件上使用-v-model"><a href="#在组件上使用-v-model" class="headerlink" title="在组件上使用 v-model"></a>在组件上使用 <code>v-model</code></h2><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。记住：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-on:input</span>=<span class="string">"searchText = $event.target.value"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>

<p>当用在组件上时，<code>v-model</code> 则会这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-on:input</span>=<span class="string">"searchText = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p>
<ul>
<li>将其 <code>value</code> attribute 绑定到一个名叫 <code>value</code> 的 prop 上</li>
<li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</li>
</ul>
<p>写成代码之后是这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'custom-input'</span>, &#123;</span><br><span class="line">  	props: [<span class="string">'value'</span>],</span><br><span class="line">  	template: <span class="string">`</span></span><br><span class="line"><span class="string">    	&lt;input</span></span><br><span class="line"><span class="string">      		v-bind:value="value"</span></span><br><span class="line"><span class="string">      		v-on:input="$emit('input', $event.target.value)"</span></span><br><span class="line"><span class="string">    	&gt;</span></span><br><span class="line"><span class="string">  	`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在 <code>v-model</code> 就应该可以在这个组件上完美地工作起来了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h1><p>和 HTML 元素一样，我们经常需要向一个组件传递内容，像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span></span><br><span class="line">  	Something bad happened.</span><br><span class="line"><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可能会渲染出这样的东西：</p>
<p><strong>Error!</strong> Something bad happened.</p>
<p>幸好，Vue 自定义的 <code>&lt;slot&gt;</code> 元素让这变得非常简单：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'alert-box'</span>, &#123;</span><br><span class="line">  	template: <span class="string">`</span></span><br><span class="line"><span class="string">    	&lt;div class="demo-alert-box"&gt;</span></span><br><span class="line"><span class="string">      		&lt;strong&gt;Error!&lt;/strong&gt;</span></span><br><span class="line"><span class="string">      		&lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    	&lt;/div&gt;</span></span><br><span class="line"><span class="string">  	`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如你所见，我们只要在需要的地方加入插槽就行了——就这么简单！</p>
]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记（二）——生命周期</title>
    <url>/2020-08-16/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p>
<p>生命周期钩子需要在创建Vue对象时以属性的形式进行声明</p>
<a id="more"></a>

<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        a: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this 指向Vue实例</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a'</span> + <span class="keyword">this</span>.a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<div role="alert" style="background-color: red; opacity:0.4; padding: .5rem; color: white; border-radius: 10px;">
不要在选项 property 或回调上使用箭头函数，因为箭头函数没有this
</div>

<h2 id="生命周期模型"><a href="#生命周期模型" class="headerlink" title="生命周期模型"></a>生命周期模型</h2><p><img src="/img/Vue/vue_lifecycle.png" alt="Vue生命周期模型"></p>
<h2 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h2><p><code>beforeCreate</code>在实例初始化之后，数据观测（data observe）和event/watcher事件配置之前被调用</p>
<h2 id="created"><a href="#created" class="headerlink" title="created"></a>created</h2><p><code>created</code>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测（data observe），属性和方法的运算，event/watcher事件回调，然而这是挂载（mount）阶段还未开始，<code>$el</code>属性目前不可见</p>
<h2 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h2><p><code>beforeMount</code>在挂载开始之前被调用，相关的渲染函数首次被调用</p>
<h2 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h2><p><code>mounted</code>在<code>el</code>被新创建的<code>vm.$el</code>替换，挂载成功后被调用</p>
<h2 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h2><p><code>beforeUpdate</code>在数据更新时调用</p>
<h2 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h2><p><code>updated</code>在组件DOM更新后调用</p>
<h2 id="beforeDestory"><a href="#beforeDestory" class="headerlink" title="beforeDestory"></a>beforeDestory</h2><p><code>beforeDestory</code>在Vue实例被销毁之前调用。在这一步时，实例仍然可用</p>
<h2 id="destoryed"><a href="#destoryed" class="headerlink" title="destoryed"></a>destoryed</h2><p><code>desotryed</code>在Vue实例被销毁后调用。调用后，Vue实例指示的所有东西都会解除绑定，所有事件监听器都会被移除，子实例也会被销毁</p>
<h2 id="errorCaptured"><a href="#errorCaptured" class="headerlink" title="errorCaptured"></a>errorCaptured</h2><p><code>errorCaptured</code>在捕获到子组件的错误时被调用</p>
]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记（八）——表单输入绑定</title>
    <url>/2020-08-22/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<p><strong><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</strong></p>
<p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li>
<li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li>
<li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li>
</ul>
<a id="more"></a>

<h1 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="&lt;input&gt;"></a><code>&lt;input&gt;</code></h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        msg: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="lt-textarea-gt"><a href="#lt-textarea-gt" class="headerlink" title="&lt;textarea&gt;"></a><code>&lt;textarea&gt;</code></h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        msg: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>在文本区域插值 (<code>&lt;textarea&gt;&lt;/textarea&gt;</code>) 并不会生效，应用 <code>v-model</code> 来代替。</strong></p>
<h1 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a><code>checkbox</code></h1><h2 id="单个复选框绑定布尔值"><a href="#单个复选框绑定布尔值" class="headerlink" title="单个复选框绑定布尔值"></a>单个复选框绑定布尔值</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        checked: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="多个复选框，绑定到同一个数组"><a href="#多个复选框，绑定到同一个数组" class="headerlink" title="多个复选框，绑定到同一个数组"></a>多个复选框，绑定到同一个数组</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"Jack"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"jack"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"john"</span> <span class="attr">value</span>=<span class="string">"John"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"john"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"mike"</span> <span class="attr">value</span>=<span class="string">"Mike"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mike"</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  	el: <span class="string">'#app'</span>,</span><br><span class="line">  	data: &#123;</span><br><span class="line">    	checkedNames: []</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="radio"><a href="#radio" class="headerlink" title="radio"></a><code>radio</code></h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"One"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"one"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">value</span>=<span class="string">"Two"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  	el: <span class="string">'#app'</span>,</span><br><span class="line">  	data: &#123;</span><br><span class="line">    	picked: <span class="string">''</span></span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="lt-select-gt"><a href="#lt-select-gt" class="headerlink" title="&lt;select&gt;"></a><code>&lt;select&gt;</code></h1><h2 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  	el: <span class="string">'#app'</span>,</span><br><span class="line">  	data: &#123;</span><br><span class="line">    	selected: <span class="string">''</span></span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>如果 <code>v-model</code> 表达式的初始值未能匹配任何选项，<code>&lt;select&gt;</code> 元素将被渲染为“未选中”状态。在 iOS 中，这会使用户无法选择第一个选项。因为这样的情况下，iOS 不会触发 change 事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</strong></p>
<h2 id="多选"><a href="#多选" class="headerlink" title="多选"></a>多选</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">multiple</span> <span class="attr">style</span>=<span class="string">"width: 50px;"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  	el: <span class="string">'#app'</span>,</span><br><span class="line">  	data: &#123;</span><br><span class="line">    	selected: []</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h1><p>对于单选按钮，复选框及选择框的选项，<code>v-model</code> 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当选中时，`picked` 为字符串 "a" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> <span class="attr">value</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `toggle` 为 true 或 false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"toggle"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当选中第一个选项时，`selected` 为字符串 "abc" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"abc"</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是有时我们可能想把值绑定到 Vue 实例的一个动态 property 上，这时可以用 <code>v-bind</code> 实现，并且这个 property 的值可以不是字符串。</p>
<h2 id="checkbox-1"><a href="#checkbox-1" class="headerlink" title="checkbox"></a><code>checkbox</code></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"checkbox"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"toggle"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">true-value</span>=<span class="string">"yes"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">false-value</span>=<span class="string">"no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.toggle === <span class="string">'yes'</span></span><br><span class="line"><span class="comment">// 当没有选中时</span></span><br><span class="line">vm.toggle === <span class="string">'no'</span></span><br></pre></td></tr></table></figure>

<p><strong>这里的 <code>true-value</code> 和 <code>false-value</code> attribute 并不会影响输入控件的 <code>value</code> attribute，因为浏览器在提交表单时并不会包含未被选中的复选框。如果要确保表单中这两个值中的一个能够被提交，(即“yes”或“no”)，请换用单选按钮。</strong></p>
<h2 id="radio-1"><a href="#radio-1" class="headerlink" title="radio"></a><code>radio</code></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"pick"</span> <span class="attr">v-bind:value</span>=<span class="string">"a"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.pick === vm.a</span><br></pre></td></tr></table></figure>

<h2 id="lt-select-gt-1"><a href="#lt-select-gt-1" class="headerlink" title="&lt;select&gt;"></a><code>&lt;select&gt;</code></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 内联对象字面量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">"&#123; number: 123 &#125;"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line"><span class="keyword">typeof</span> vm.selected <span class="comment">// =&gt; 'object'</span></span><br><span class="line">vm.selected.number <span class="comment">// =&gt; 123</span></span><br></pre></td></tr></table></figure>

<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><code>.lazy</code></h2><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 (除了<a href="https://cn.vuejs.org/v2/guide/forms.html#vmodel-ime-tip" target="_blank" rel="noopener">上述</a>输入法组合文字时)。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件_之后_进行同步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="number"><a href="#number" class="headerlink" title=".number"></a><code>.number</code></h2><p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这通常很有用，因为即使在 <code>type=&quot;number&quot;</code> 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 <code>parseFloat()</code> 解析，则会返回原始的值。</p>
<h2 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code></h2><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记（六）——列表渲染</title>
    <url>/2020-08-19/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h1 id="数组列表渲染"><a href="#数组列表渲染" class="headerlink" title="数组列表渲染"></a>数组列表渲染</h1><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#list'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        items: [</span><br><span class="line">            &#123; <span class="attr">message</span>: <span class="string">'Foo'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">message</span>: <span class="string">'Bar'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span>&gt;</span></span><br><span class="line">    	&#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  	el: <span class="string">'#list'</span>,</span><br><span class="line">  	data: &#123;</span><br><span class="line">    	parentMessage: <span class="string">'Parent'</span>,</span><br><span class="line">    	items: [</span><br><span class="line">      		&#123; <span class="attr">message</span>: <span class="string">'Foo'</span> &#125;,</span><br><span class="line">      		&#123; <span class="attr">message</span>: <span class="string">'Bar'</span> &#125;</span><br><span class="line">    	]</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item of items"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="对象列表渲染"><a href="#对象列表渲染" class="headerlink" title="对象列表渲染"></a>对象列表渲染</h1><p>与数组相同，可以使用对象来进行列表渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#list'</span>,</span><br><span class="line">  	data: &#123;</span><br><span class="line">    	object: &#123;</span><br><span class="line">      		title: <span class="string">'How to do lists in Vue'</span>,</span><br><span class="line">      		author: <span class="string">'Jane Doe'</span>,</span><br><span class="line">      		publishedAt: <span class="string">'2016-04-10'</span></span><br><span class="line">    	&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>也可以提供第二个的参数为 property 名称 (也就是键名)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, name) in object"</span>&gt;</span></span><br><span class="line">  	&#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还可以用第三个参数作为索引：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, name, index) in object"</span>&gt;</span></span><br><span class="line">  	&#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h1><h2 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h2><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p>
<ul>
<li><code>push()</code></li>
<li><code>pop()</code></li>
<li><code>shift()</code></li>
<li><code>unshift()</code></li>
<li><code>splice()</code></li>
<li><code>sort()</code></li>
<li><code>reverse()</code></li>
</ul>
<p>你可以打开控制台，然后对前面例子的 <code>items</code> 数组尝试调用变更方法。比如 <code>list.items.push({ message: &#39;Baz&#39; })</code>。</p>
<h2 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h2><p>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有非变更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>。它们不会变更原始数组，而<strong>总是返回一个新数组</strong>。当使用非变更方法时，可以用新数组替换旧数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">list.items = list.items.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> item.message.match(<span class="regexp">/Foo/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p>
<h1 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤/排序后的结果"></a>显示过滤/排序后的结果</h1><p>有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in evenNumbers"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  	numbers: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  	evenNumbers: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">this</span>.numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">      		<span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    	&#125;)</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在计算属性不适用的情况下 (例如，在嵌套 <code>v-for</code> 循环中) 你可以使用一个方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">"set in sets"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in even(set)"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  	sets: [[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  	even: <span class="function"><span class="keyword">function</span> (<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">      		<span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    	&#125;)</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="v-for-的使用值范围"><a href="#v-for-的使用值范围" class="headerlink" title="v-for 的使用值范围"></a><code>v-for</code> 的使用值范围</h1><p><code>v-for</code> 也可以接受整数。在这种情况下，它会把模板重复对应次数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h1 id="在-template-上使用-v-for"><a href="#在-template-上使用-v-for" class="headerlink" title="在 template 上使用 v-for"></a>在 template 上使用 <code>v-for</code></h1><p>类似于 <code>v-if</code>，你也可以利用带有 <code>v-for</code> 的 <code>&lt;template&gt;</code> 来循环渲染一段包含多个元素的内容。比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="v-for-与-v-if-一同使用"><a href="#v-for-与-v-if-一同使用" class="headerlink" title="v-for 与 v-if 一同使用"></a><code>v-for</code> 与 <code>v-if</code> 一同使用</h1><p>当它们处于同一节点，<code>v-for</code> 的优先级比 <code>v-if</code> 更高，这意味着 <code>v-if</code> 将分别重复运行于每个 <code>v-for</code> 循环中。当你只想为<em>部分</em>项渲染节点时，这种优先级的机制会十分有用，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span> <span class="attr">v-if</span>=<span class="string">"!todo.isComplete"</span>&gt;</span></span><br><span class="line">  	&#123;&#123; todo &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码将只渲染未完成的 todo。</p>
<p>而如果你的目的是有条件地跳过循环的执行，那么可以将 <code>v-if</code> 置于外层元素 (或 [`) 上。如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">"todos.length"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span>&gt;</span></span><br><span class="line">    	&#123;&#123; todo &#125;&#125;</span><br><span class="line">  	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No todos left!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>不推荐同时使用 <code>v-for</code> 和 <code>v-if</code></strong></p>
<h1 id="在组件上使用-v-for"><a href="#在组件上使用-v-for" class="headerlink" title="在组件上使用 v-for"></a>在组件上使用 <code>v-for</code></h1><p>在自定义组件上，你可以像在任何普通元素上一样使用 <code>v-for</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然而，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要使用 prop：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">	<span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:item</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:index</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不自动将 <code>item</code> 注入到组件里的原因是，这会使得组件与 <code>v-for</code> 的运作紧密耦合。明确组件数据的来源能够使组件在其他场合重复使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todo-list-example"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"addNewTodo"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"new-todo"</span>&gt;</span>Add a todo<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">v-model</span>=<span class="string">"newTodoText"</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">id</span>=<span class="string">"new-todo"</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">placeholder</span>=<span class="string">"E.g. Feed the cat"</span></span></span><br><span class="line"><span class="tag">    	&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">is</span>=<span class="string">"todo-item"</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">v-for</span>=<span class="string">"(todo, index) in todos"</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">v-bind:key</span>=<span class="string">"todo.id"</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">v-bind:title</span>=<span class="string">"todo.title"</span></span></span><br><span class="line"><span class="tag">      		<span class="attr">v-on:remove</span>=<span class="string">"todos.splice(index, 1)"</span></span></span><br><span class="line"><span class="tag">    	&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  	template: <span class="string">'\</span></span><br><span class="line"><span class="string">    	&lt;li&gt;\</span></span><br><span class="line"><span class="string">		    &#123;&#123; title &#125;&#125;\</span></span><br><span class="line"><span class="string">	    	&lt;button v-on:click="$emit(\'remove\')"&gt;Remove&lt;/button&gt;\</span></span><br><span class="line"><span class="string">	    &lt;/li&gt;\</span></span><br><span class="line"><span class="string">  	'</span>,</span><br><span class="line">  	props: [<span class="string">'title'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  	el: <span class="string">'#todo-list-example'</span>,</span><br><span class="line">  	data: &#123;</span><br><span class="line">    	newTodoText: <span class="string">''</span>,</span><br><span class="line">    	todos: [</span><br><span class="line">      		&#123;</span><br><span class="line">        		id: <span class="number">1</span>,</span><br><span class="line">		        title: <span class="string">'Do the dishes'</span>,</span><br><span class="line">		    &#125;,</span><br><span class="line">	        &#123;</span><br><span class="line">        		id: <span class="number">2</span>,</span><br><span class="line">        		title: <span class="string">'Take out the trash'</span>,</span><br><span class="line">      		&#125;,</span><br><span class="line">      		&#123;</span><br><span class="line">        		id: <span class="number">3</span>,</span><br><span class="line">        		title: <span class="string">'Mow the lawn'</span></span><br><span class="line">      		&#125;</span><br><span class="line">    	],</span><br><span class="line">    	nextTodoId: <span class="number">4</span></span><br><span class="line">  	&#125;,</span><br><span class="line">  	methods: &#123;</span><br><span class="line">    	addNewTodo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      		<span class="keyword">this</span>.todos.push(&#123;</span><br><span class="line">        		id: <span class="keyword">this</span>.nextTodoId++,</span><br><span class="line">       	 		title: <span class="keyword">this</span>.newTodoText</span><br><span class="line">      		&#125;)</span><br><span class="line">      		<span class="keyword">this</span>.newTodoText = <span class="string">''</span></span><br><span class="line">    	&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记（五）——条件渲染</title>
    <url>/2020-08-18/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h1 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h1><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"awesome"</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以用 <code>v-else</code> 添加一个“else 块”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"awesome"</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="在-lt-template-gt-元素上使用-v-if-条件渲染分组"><a href="#在-lt-template-gt-元素上使用-v-if-条件渲染分组" class="headerlink" title="在 &lt;template&gt; 元素上使用 v-if 条件渲染分组"></a>在 <code>&lt;template&gt;</code> 元素上使用 <code>v-if</code> 条件渲染分组</h2><p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a><code>v-else</code></h2><p>和结构化编程语言类似，有 <code>if</code> 就有 <code>else</code> ：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"Math.random() &gt; 0.5"</span>&gt;</span></span><br><span class="line">  Now you see me</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Now you don't</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p>
<h2 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a><code>v-else-if</code></h2><p><code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的“else-if 块”，可以连续使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类似于 <code>v-else</code>，<code>v-else-if</code> 也必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后。</p>
<h2 id="用-key-管理可复用元素"><a href="#用-key-管理可复用元素" class="headerlink" title="用 key 管理可复用元素"></a>用 <code>key</code> 管理可复用元素</h2><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"loginType === 'username'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your email address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么在上面的代码中切换 <code>loginType</code> 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，<code>&lt;input&gt;</code> 不会被替换掉——仅仅是替换了它的 <code>placeholder</code>。</p>
<p>这样也不总是符合实际需求，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 <code>key</code> attribute 即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"loginType === 'username'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your username"</span> <span class="attr">key</span>=<span class="string">"username-input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your email address"</span> <span class="attr">key</span>=<span class="string">"email-input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在，每次切换时，输入框都将被重新渲染。</p>
<p>注意，<code>&lt;label&gt;</code> 元素仍然会被高效地复用，因为它们没有添加 <code>key</code> attribute。</p>
<h1 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h1><p>另一个用于根据条件展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS property <code>display</code>。</p>
<div role="alert" style="background-color: red; opacity:0.4; padding: .5rem; color: white; border-radius: 10px;">注意，v-show 不支持 template 元素，也不支持 v-else。</div>

<h1 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a><code>v-if</code> vs <code>v-show</code></h1><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>
<p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
<p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>
<h1 id="v-if-与-v-for-一起使用"><a href="#v-if-与-v-for-一起使用" class="headerlink" title="v-if 与 v-for 一起使用"></a><code>v-if</code> 与 <code>v-for</code> 一起使用</h1><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</p>
<div role="alert" style="background-color: red; opacity:0.4; padding: .5rem; color: white; border-radius: 10px;">不推荐同时使用 v-if 和 v-for。</div>]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记（四）——class与style绑定</title>
    <url>/2020-08-18/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94class%E4%B8%8Estyle%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h1><h2 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h2><p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 class ：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的语法表示 <code>active</code> 这个 class 存在与否将取决于数据 property <code>isActive</code> 的真值</p>
<p>我们可以在对象中传入更多的字段来动态切换多个 class ，此外，<code>v-bind:class</code> 可以和普通HTML的 <code>class</code> 属性共存：</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">     <span class="attr">class</span>=<span class="string">"static"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, test: isTest &#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    isActive: <span class="literal">true</span>,</span><br><span class="line">    isTest: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>绑定的数据不必内联定义在模板里：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    classObject: &#123;</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        test: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们也可以绑定一个计算属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  error: <span class="literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      active: <span class="keyword">this</span>.isActive &amp;&amp; !<span class="keyword">this</span>.error,</span><br><span class="line">      test: <span class="keyword">this</span>.error &amp;&amp; <span class="keyword">this</span>.error.type === <span class="string">'fatal'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h2><p>我们可以把一个数组传给 <code>v-bind:class</code>，以应用一个 class 列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">'active'</span>,</span><br><span class="line">  errorClass: <span class="string">'text-danger'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染结果为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用三元表达式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="应用于组件时"><a href="#应用于组件时" class="headerlink" title="应用于组件时"></a>应用于组件时</h2><p>当在一个自定义组件上使用 <code>class</code> property 时，这些 class 将被添加到该组件的根元素上面。这个元素上已经存在的 class 不会被覆盖。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;p class="foo bar"&gt;Hi&lt;/p&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后在使用组件时添加一些 class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">"baz boo"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML 将被渲染为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"foo bar baz boo"</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于带数据绑定 class 也同样适用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当 <code>isActive</code> 为 truthy  时，HTML 将被渲染成为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"foo bar active"</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h1><h2 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h2><p><code>v-bind:style</code> 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接绑定到一个样式对象通常更好，这会让模板更清晰：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'13px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的，对象语法常常结合返回对象的计算属性使用。</p>
<h2 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h2><p><code>v-bind:style</code> 的数组语法可以将多个样式对象应用到同一个元素上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h2><p>当 <code>v-bind:style</code> 使用需要添加浏览器引擎前缀的 CSS property 时，如 <code>transform</code>，Vue.js 会自动侦测并添加相应的前缀。</p>
<h2 id="多重值"><a href="#多重值" class="headerlink" title="多重值"></a>多重值</h2><p>从 2.3.0 起你可以为 <code>style</code> 绑定中的 property 提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样写只会渲染数组中<strong>最后一个</strong>被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 <code>display: flex</code>。</p>
]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件（一）——组件注册</title>
    <url>/2020-08-24/Vue%E7%BB%84%E4%BB%B6%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<h1 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h1><p>注册一个组件的时候，我们始终需要给它定一个名字。例如在全局注册中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123;<span class="comment">/* ... */</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>其中 <code>my-component-name</code> 就是组件的名称。</p>
<a id="more"></a>

<h2 id="组件名大小写"><a href="#组件名大小写" class="headerlink" title="组件名大小写"></a>组件名大小写</h2><p>定义组件的方式有两种：</p>
<h3 id="使用-kebab-case"><a href="#使用-kebab-case" class="headerlink" title="使用 kebab-case"></a>使用 kebab-case</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123;<span class="comment">/* ... */</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>当使用 kebab-case (短横线分隔命名) 定义一个组件时，你也必须在引用这个自定义元素时使用 kebab-case，例如 <code>&lt;my-component-name&gt;</code>。</p>
<h3 id="使用PascalCase"><a href="#使用PascalCase" class="headerlink" title="使用PascalCase"></a>使用PascalCase</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'MyComponentName'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>当使用 PascalCase (首字母大写命名) 定义一个组件时，你在引用这个自定义元素时两种命名法都可以使用。也就是说 <code>&lt;my-component-name&gt;</code> 和 <code>&lt;MyComponentName&gt;</code> 都是可接受的。注意，尽管如此，直接在 DOM (即非字符串的模板) 中使用时只有 kebab-case 是有效的。</p>
<h1 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h1><p>最基础的全局注册方法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123;</span><br><span class="line">  	<span class="comment">// ... 选项 ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这些组件是<strong>全局注册的</strong>。也就是说它们在注册之后可以用在任何新创建的 Vue 根实例 (<code>new Vue</code>) 的模板中。比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'component-a'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">'component-b'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">'component-c'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#app'</span> &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-b</span>&gt;</span><span class="tag">&lt;/<span class="name">component-b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-c</span>&gt;</span><span class="tag">&lt;/<span class="name">component-c</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在所有子组件中也是如此，也就是说这三个组件在各自内部也都可以相互使用。</p>
<h1 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h1><p>全局注册往往是不够理想的。比如，如果你使用一个像 webpack 这样的构建系统，全局注册所有的组件意味着即便你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的 JavaScript 的无谓的增加。</p>
<p>在这些情况下，你可以通过一个普通的 JavaScript 对象来定义组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentC = &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>

<p>然后在 <code>components</code> 选项中定义你想要使用的组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  	el: <span class="string">'#app'</span>,</span><br><span class="line">  	components: &#123;</span><br><span class="line">    	<span class="string">'component-a'</span>: ComponentA,</span><br><span class="line">    	<span class="string">'component-b'</span>: ComponentB</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>对于 <code>components</code> 对象中的每个 property 来说，其 property 名就是自定义元素的名字，其 property 值就是这个组件的选项对象。</p>
<p>注意<strong>局部注册的组件在其子组件中不可用</strong>。例如，如果希望 <code>ComponentA</code> 在 <code>ComponentB</code> 中可用，则需要这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123;</span><br><span class="line">  	components: &#123;</span><br><span class="line">    	<span class="string">'component-a'</span>: ComponentA</span><br><span class="line">  	&#125;,</span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者如果你通过 Babel 和 webpack 使用 ES2015 模块，那么代码看起来更像：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">'./ComponentA.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  	components: &#123;</span><br><span class="line">    	ComponentA</span><br><span class="line">  	&#125;,</span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意在 ES2015+ 中，在对象中放一个类似 <code>ComponentA</code> 的变量名其实是 <code>ComponentA: ComponentA</code> 的缩写，即这个变量名同时是：</p>
<ul>
<li>用在模板中的自定义元素的名称</li>
<li>包含了这个组件选项的变量名</li>
</ul>
<h1 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h1><h2 id="在模块系统中局部注册"><a href="#在模块系统中局部注册" class="headerlink" title="在模块系统中局部注册"></a>在模块系统中局部注册</h2><h3 id="ComponentB-vue"><a href="#ComponentB-vue" class="headerlink" title="ComponentB.vue :"></a><code>ComponentB.vue</code> :</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">'./ComponentA'</span></span><br><span class="line"><span class="keyword">import</span> ComponentC <span class="keyword">from</span> <span class="string">'./ComponentC'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  	components: &#123;</span><br><span class="line">    	ComponentA,</span><br><span class="line">    	ComponentC</span><br><span class="line">  	&#125;,</span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在 <code>ComponentA</code> 和 <code>ComponentC</code> 都可以在 <code>ComponentB</code> 的模板中使用了。</p>
<h2 id="基础组件的自动化全局注册"><a href="#基础组件的自动化全局注册" class="headerlink" title="基础组件的自动化全局注册"></a>基础组件的自动化全局注册</h2><p>可能你的许多组件只是包裹了一个输入框或按钮之类的元素，是相对通用的。我们有时候会把它们称为基础组件，它们会在各个组件中被频繁的用到。</p>
<p>所以会导致很多组件里都会有一个包含基础组件的长列表：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> BaseButton <span class="keyword">from</span> <span class="string">'./BaseButton.vue'</span></span><br><span class="line"><span class="keyword">import</span> BaseIcon <span class="keyword">from</span> <span class="string">'./BaseIcon.vue'</span></span><br><span class="line"><span class="keyword">import</span> BaseInput <span class="keyword">from</span> <span class="string">'./BaseInput.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  	components: &#123;</span><br><span class="line">    	BaseButton,</span><br><span class="line">    	BaseIcon,</span><br><span class="line">    	BaseInput</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而只是用于模板中的一小部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BaseInput</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-model</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  	@<span class="attr">keydown.enter</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BaseButton</span> @<span class="attr">click</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">BaseIcon</span> <span class="attr">name</span>=<span class="string">"search"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BaseButton</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你恰好使用了 webpack (或在内部使用了 webpack 的 Vue CLI 3+)，那么就可以使用 <code>require.context</code> 只全局注册这些非常通用的基础组件。这里有一份可以让你在应用入口文件 (比如 <code>src/main.js</code>) 中全局导入基础组件的示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> upperFirst <span class="keyword">from</span> <span class="string">'lodash/upperFirst'</span></span><br><span class="line"><span class="keyword">import</span> camelCase <span class="keyword">from</span> <span class="string">'lodash/camelCase'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(</span><br><span class="line">  	<span class="comment">// 其组件目录的相对路径</span></span><br><span class="line">  	<span class="string">'./components'</span>,</span><br><span class="line">  	<span class="comment">// 是否查询其子目录</span></span><br><span class="line">  	<span class="literal">false</span>,</span><br><span class="line">  	<span class="comment">// 匹配基础组件文件名的正则表达式</span></span><br><span class="line">  	/Base[A-Z]\w+\.(vue|js)$/</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">  	<span class="comment">// 获取组件配置</span></span><br><span class="line">  	<span class="keyword">const</span> componentConfig = requireComponent(fileName)</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 获取组件的 PascalCase 命名</span></span><br><span class="line">  	<span class="keyword">const</span> componentName = upperFirst(</span><br><span class="line">    	camelCase(</span><br><span class="line">      		<span class="comment">// 获取和目录深度无关的文件名</span></span><br><span class="line">      		fileName</span><br><span class="line">        	.split(<span class="string">'/'</span>)</span><br><span class="line">        	.pop()</span><br><span class="line">        	.replace(<span class="regexp">/\.\w+$/</span>, <span class="string">''</span>)</span><br><span class="line">    	)</span><br><span class="line">  	)</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 全局注册组件</span></span><br><span class="line">  	Vue.component(</span><br><span class="line">    	componentName,</span><br><span class="line">    	<span class="comment">// 如果这个组件选项是通过 `export default` 导出的，</span></span><br><span class="line">    	<span class="comment">// 那么就会优先使用 `.default`，</span></span><br><span class="line">    	<span class="comment">// 否则回退到使用模块的根。</span></span><br><span class="line">    	componentConfig.default || componentConfig</span><br><span class="line">  	)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件（二）——Prop</title>
    <url>/2020-08-25/Vue%E7%BB%84%E4%BB%B6%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94Prop/</url>
    <content><![CDATA[<h3 id="Prop-大小写"><a href="#Prop-大小写" class="headerlink" title="Prop 大小写"></a>Prop 大小写</h3><p>HTML中的 attribute 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当你使用 DOM 中的模板时，camelCase (驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) 命名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">    <span class="comment">// 在 JS 中是 camelCase 的</span></span><br><span class="line">    props: [<span class="string">'postTitle'</span>],</span><br><span class="line">    template: <span class="string">'&lt;h3&gt;&#123;&#123; postTitle&#125;&#125;&lt;/h3&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 HTML 中是 kabab-case 的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">post-title</span>=<span class="string">'hello!'</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>如果使用字符串模板，那么这个限制就不存在了</strong></p>
<h1 id="Prop-类型"><a href="#Prop-类型" class="headerlink" title="Prop 类型"></a>Prop 类型</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    title: <span class="built_in">String</span>,</span><br><span class="line">    likes: <span class="built_in">Number</span>,</span><br><span class="line">    isPublished: <span class="built_in">Boolean</span>,</span><br><span class="line">    commentIds: <span class="built_in">Array</span>,</span><br><span class="line">    author: <span class="built_in">Object</span>,</span><br><span class="line">    callback: <span class="built_in">Function</span>,</span><br><span class="line">    contactsPromise: <span class="built_in">Promise</span> <span class="comment">// or any other constructor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="传递静态火动态-Prop"><a href="#传递静态火动态-Prop" class="headerlink" title="传递静态火动态 Prop"></a>传递静态火动态 Prop</h1><p><strong>传递一个静态的值：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"My journey with vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>传递一个动态的值：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:title</span>=<span class="string">"post.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:title</span>=<span class="string">"post.title + ' by ' + post.author.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="传入一个数字"><a href="#传入一个数字" class="headerlink" title="传入一个数字"></a>传入一个数字</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即便 `42` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:likes</span>=<span class="string">"42"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:likes</span>=<span class="string">"post.likes"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="传入一个布尔值"><a href="#传入一个布尔值" class="headerlink" title="传入一个布尔值"></a>传入一个布尔值</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 包含该 prop 没有值的情况在内，都意味着 'true' --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">is-published</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 即便 'false' 是静态的，我们人需要 'v-bind' 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:is-published</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:is-published</span>=<span class="string">"post.isPublished"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="传入一个数组"><a href="#传入一个数组" class="headerlink" title="传入一个数组"></a>传入一个数组</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即便数组是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:comment-ids</span>=<span class="string">"[234, 266, 273]"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:comment-ids</span>=<span class="string">"post.commentIds"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="传入一个对象"><a href="#传入一个对象" class="headerlink" title="传入一个对象"></a>传入一个对象</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即便对象是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:author</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    name: 'Veronica',</span></span></span><br><span class="line"><span class="tag"><span class="string">    company: 'Veridian Dynamics'</span></span></span><br><span class="line"><span class="tag"><span class="string">  &#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:author</span>=<span class="string">"post.author"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="传入一个对象的所有-property"><a href="#传入一个对象的所有-property" class="headerlink" title="传入一个对象的所有 property"></a>传入一个对象的所有 property</h2><p>如果你想要将一个对象的所有 property 都作为 prop 传入，你可以使用不带参数的 <code>v-bind</code> (取代 <code>v-bind:prop-name</code>)。例如，对于一个给定的对象 <code>post</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">post: &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  title: <span class="string">'My Journey with Vue'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面的模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:id</span>=<span class="string">"post.id"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:title</span>=<span class="string">"post.title"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="单向数据绑定"><a href="#单向数据绑定" class="headerlink" title="单向数据绑定"></a>单向数据绑定</h1><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。</p>
<p>额外的，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不</strong>应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p>
<p>这里有两种常见的试图变更一个 prop 的情形：</p>
<ol>
<li><p><strong>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。</strong>在这种情况下，最好定义一个本地的 data property 并将这个 prop 用作其初始值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> &#123;</span><br><span class="line">    	counter: <span class="keyword">this</span>.initialCounter</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>这个 prop 以一种原始的值传入且需要进行转换。</strong>在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: [<span class="string">'size'</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  	normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  	  	<span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="Prop-验证"><a href="#Prop-验证" class="headerlink" title="Prop 验证"></a>Prop 验证</h1><p>我们可以为组件的 prop 指定验证要求，例如你知道的这些类型。如果有一个需求没有被满足，则 Vue 会在浏览器控制台中警告你。这在开发一个会被别人用到的组件时尤其有帮助。</p>
<p>为了定制 prop 的验证方式，你可以为 <code>props</code> 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  	props: &#123;</span><br><span class="line">    	<span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">    	propA: <span class="built_in">Number</span>,</span><br><span class="line">    	<span class="comment">// 多个可能的类型</span></span><br><span class="line">    	propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    	<span class="comment">// 必填的字符串</span></span><br><span class="line">    	propC: &#123;</span><br><span class="line">      		type: <span class="built_in">String</span>,</span><br><span class="line">      		required: <span class="literal">true</span></span><br><span class="line">    	&#125;,</span><br><span class="line">    	<span class="comment">// 带有默认值的数字</span></span><br><span class="line">    	propD: &#123;</span><br><span class="line">      		type: <span class="built_in">Number</span>,</span><br><span class="line">      		<span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    	&#125;,</span><br><span class="line">    	<span class="comment">// 带有默认值的对象</span></span><br><span class="line">    	propE: &#123;</span><br><span class="line">      		type: <span class="built_in">Object</span>,</span><br><span class="line">      		<span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      		<span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        		<span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      		&#125;</span><br><span class="line">    	&#125;,</span><br><span class="line">    	<span class="comment">// 自定义验证函数</span></span><br><span class="line">    	propF: &#123;</span><br><span class="line">      		validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        		<span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        		<span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</p>
<p><strong>注意那些 prop 会在一个组件实例创建</strong>之前<strong>进行验证，所以实例的 property (如 <code>data</code>、<code>computed</code> 等) 在 <code>default</code> 或 <code>validator</code> 函数中是不可用的。</strong></p>
<h2 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h2><p><code>type</code> 可以是下列原生构造函数中的一个：</p>
<ul>
<li><code>String</code></li>
<li><code>Number</code></li>
<li><code>Boolean</code></li>
<li><code>Array</code></li>
<li><code>Object</code></li>
<li><code>Date</code></li>
<li><code>Function</code></li>
<li><code>Symbol</code></li>
</ul>
<p>额外的，<code>type</code> 还可以是一个自定义的构造函数，并且通过 <code>instanceof</code> 来进行检查确认。例如，给定下列现成的构造函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">this</span>.firstName = firstName</span><br><span class="line">  	<span class="keyword">this</span>.lastName = lastName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">  	props: &#123;</span><br><span class="line">    	author: Person</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>来验证 <code>author</code> prop 的值是否是通过 <code>new Person</code> 创建的。</p>
<h1 id="非-Prop-的-Attribute"><a href="#非-Prop-的-Attribute" class="headerlink" title="非 Prop 的 Attribute"></a>非 Prop 的 Attribute</h1><p>一个非 prop 的 attribute 是指传向一个组件，但是该组件并没有相应 prop 定义的 attribute。</p>
<p>因为显式定义的 prop 适用于向一个子组件传入信息，然而组件库的作者并不总能预见组件会被用于怎样的场景。这也是为什么组件可以接受任意的 attribute，而这些 attribute 会被添加到这个组件的根元素上。</p>
<p>例如，你通过一个 Bootstrap 插件使用了一个第三方的 <code>&lt;bootstrap-date-input&gt;</code> 组件，这个插件需要在其 <code>&lt;input&gt;</code> 上用到一个 <code>data-date-picker</code> attribute。我们可以将这个 attribute 添加到你的组件实例上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bootstrap-date-input</span> <span class="attr">data-date-picker</span>=<span class="string">"activated"</span>&gt;</span><span class="tag">&lt;/<span class="name">bootstrap-date-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后这个 <code>data-date-picker=&quot;activated&quot;</code> attribute 就会自动添加到 <code>&lt;bootstrap-date-input&gt;</code> 的根元素上。</p>
<h2 id="替换-合并已有的-Attribute"><a href="#替换-合并已有的-Attribute" class="headerlink" title="替换/合并已有的 Attribute"></a>替换/合并已有的 Attribute</h2><p>假如 <code>&lt;bootstrap-data-input&gt;</code> 模板是这样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了给我们的日期选择器插件定制一个主题，我们可能需要像这样添加一个特别的类名：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bootstrap-date-input</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">data-date-picker</span>=<span class="string">"activated"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">class</span>=<span class="string">"date-picker-theme-dark"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">bootstrap-date-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这种情况下，我们定义了两个不同的 <code>class</code> 的值：</p>
<ul>
<li><code>form-control</code>，这是在组件的模板内设置好的</li>
<li><code>date-picker-theme-dark</code>，这是从组件的父级传入的</li>
</ul>
<p>对于绝大多数 attribute 来说，从外部提供给组件的值会替换掉组件内部设置好的值。所以如果传入 <code>type=&quot;text&quot;</code> 就会替换掉 <code>type=&quot;date&quot;</code> 并把它破坏！庆幸的是，<code>class</code> 和 <code>style</code> attribute 会稍微智能一些，即两边的值会被合并起来，从而得到最终的值：<code>form-control date-picker-theme-dark</code>。</p>
<h2 id="禁用-Attribute-继承"><a href="#禁用-Attribute-继承" class="headerlink" title="禁用 Attribute 继承"></a>禁用 Attribute 继承</h2><p>如果你<strong>不</strong>希望组件的根元素继承 attribute，你可以在组件的选项中设置 <code>inheritAttrs: false</code>。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component('my-component', &#123;</span><br><span class="line">  	inheritAttrs: false,</span><br><span class="line">  	// ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这尤其适合配合实例的 <code>$attrs</code> property 使用，该 property 包含了传递给一个组件的 attribute 名和 attribute 值，例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  	required: true,</span><br><span class="line">  	placeholder: 'Enter your username'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了 <code>inheritAttrs: false</code> 和 <code>$attrs</code>，你就可以手动决定这些 attribute 会被赋予哪个元素。在撰写基础组件的时候是常会用到的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-input'</span>, &#123;</span><br><span class="line">  	inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  	props: [<span class="string">'label'</span>, <span class="string">'value'</span>],</span><br><span class="line">  	template: <span class="string">`</span></span><br><span class="line"><span class="string">    	&lt;label&gt;</span></span><br><span class="line"><span class="string">      		&#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">      		&lt;input</span></span><br><span class="line"><span class="string">        		v-bind="$attrs"</span></span><br><span class="line"><span class="string">        		v-bind:value="value"</span></span><br><span class="line"><span class="string">        		v-on:input="$emit('input', $event.target.value)"</span></span><br><span class="line"><span class="string">      		&gt;</span></span><br><span class="line"><span class="string">    	&lt;/label&gt;</span></span><br><span class="line"><span class="string">  	`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这个模式允许你在使用基础组件的时候更像是使用原始的 HTML 元素，而不会担心哪个元素是真正的根元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-model</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">required</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">placeholder</span>=<span class="string">"Enter your username"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建远程书架</title>
    <url>/2020-02-04/%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%B9%A6%E6%9E%B6/</url>
    <content><![CDATA[<p><strong style="font-size: 50px">Linux服务器搭建远程书架</strong></p>
<hr>
<blockquote>
<p>由于众所周知的原因最近在家里歇着实在无聊，游戏换了一个又一个，感觉生活枯燥乏味。于是又捡起以前弃掉的轻小说看了起来。</p>
<p>重新在网上搜索资源无疑是一件烦心事，今天早上突发奇想干脆搭建一个云端的书架用来储存小说资源之类的岂不美哉？于是研究了一天总算是大功告成，记录以下相关的内容。</p>
</blockquote>
<p><strong>感谢<a href="https://github.com/janeczku" target="_blank" rel="noopener">@janeczku</a>的<code>calibre-web</code>项目对此教程的技术支持</strong></p>
<a id="more"></a>

<h2 id="相关软件以及服务"><a href="#相关软件以及服务" class="headerlink" title="相关软件以及服务"></a>相关软件以及服务</h2><ul>
<li>Calibre for Linux</li>
<li>Calibre-web</li>
<li>python3</li>
</ul>
<h2 id="安装Calibre-for-Linux"><a href="#安装Calibre-for-Linux" class="headerlink" title="安装Calibre for Linux"></a>安装Calibre for Linux</h2><p>Calibre本身是一款Linux平台上的阅读管理器，支持PDF、EPUB等大多数文档的阅读</p>
<h3 id="安装-Python3"><a href="#安装-Python3" class="headerlink" title="安装 Python3"></a>安装 Python3</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y python3 python3-pip</span><br></pre></td></tr></table></figure>

<h3 id="安装-Calibre"><a href="#安装-Calibre" class="headerlink" title="安装 Calibre"></a>安装 Calibre</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -v &amp;&amp; wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin</span><br></pre></td></tr></table></figure>

<h2 id="安装Calibre-web"><a href="#安装Calibre-web" class="headerlink" title="安装Calibre-web"></a>安装Calibre-web</h2><p><a href="https://github.com/janeczku/calibre-web" target="_blank" rel="noopener">Calibre-web</a>是GitHub上一位大佬写的Calibre管理Web程序。支持用户直接通过浏览器访问Calibre的书库并进行操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 克隆远程仓库</span></span><br><span class="line">git clone https://github.com/janeczku/calibre-web.git</span><br><span class="line">cd calibre-web</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装python依赖</span></span><br><span class="line">sudo pip3 install --target vendor -r requirements.txt</span><br></pre></td></tr></table></figure>

<h2 id="配置Calibre"><a href="#配置Calibre" class="headerlink" title="配置Calibre"></a>配置Calibre</h2><p>一般来说，Calibre是运行在具有可视化界面的Linux系统上的（例如Ubuntu Desktop等），命令行下Calibre无法使用。但是，我们需要使用的只有Calibre的书库，即Calibre储存电子书的数据库。</p>
<p>Calibre为我们提供了<code>Calibredb</code>的数据库程序，用来对书库进行增删改查，这就为服务器也提供了使用Calibre的可能性</p>
<h3 id="初始化Calibre"><a href="#初始化Calibre" class="headerlink" title="初始化Calibre"></a>初始化Calibre</h3><p>Calibre使用前需要用户设置书库的存储位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新建文件夹用来储存书库</span></span><br><span class="line">mkdir ebook</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化Calibre</span></span><br><span class="line">calibre --with-library=/root/ebook</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 别管之后的报错，只要执行完这一步就建好书库了</span></span><br></pre></td></tr></table></figure>

<h3 id="添加图书"><a href="#添加图书" class="headerlink" title="添加图书"></a>添加图书</h3><p>通过scp或者ftp等服务将电子书文件上传到服务器上，比如我将小说都上传到了/root/book文件夹下</p>
<p>使用<code>calibredb</code>将电子书添加到calibre中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/book</span><br><span class="line">calibredb add *</span><br></pre></td></tr></table></figure>

<h2 id="启动Calibre-web"><a href="#启动Calibre-web" class="headerlink" title="启动Calibre-web"></a>启动Calibre-web</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/calibre-web</span><br><span class="line">python3 cps.py</span><br></pre></td></tr></table></figure>

<h2 id="配置Calibre-web"><a href="#配置Calibre-web" class="headerlink" title="配置Calibre-web"></a>配置Calibre-web</h2><p>浏览器打开<code>http://&lt;server address&gt;:8083</code> (<server address>是你的服务器地址)</p>
<p><img src="/img/%E4%BA%91%E7%AB%AF%E4%B9%A6%E6%9E%B6/%E9%85%8D%E7%BD%AEcalibre-web.png" alt="配置Calibre-web"></p>
<p>在<code>Calibre数据库位置</code>中填入<code>/root/ebook</code>（即你的书库地址）</p>
<p>点击提交</p>
<h2 id="登陆Calibre-web"><a href="#登陆Calibre-web" class="headerlink" title="登陆Calibre-web"></a>登陆Calibre-web</h2><p>提交数据库以后点击登陆按钮跳转到登陆界面</p>
<p><img src="/img/%E4%BA%91%E7%AB%AF%E4%B9%A6%E6%9E%B6/login.png" alt="login"></p>
<ul>
<li>用户名：admin</li>
<li>密码：admin123</li>
</ul>
<p>登陆，就可以使用了</p>
<p>剩下的配置都在网页端进行，傻瓜式配置就不讲了，自行探索吧</p>
<h2 id="使用systemd在Linux下启动Calibre-Web服务"><a href="#使用systemd在Linux下启动Calibre-Web服务" class="headerlink" title="使用systemd在Linux下启动Calibre-Web服务"></a>使用systemd在Linux下启动Calibre-Web服务</h2><p>每次运行都必须执行<code>cps.py</code>太麻烦了，我们可以将其设置一个服务来启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建服务文件</span></span><br><span class="line">sudo vim /etc/systemd/system/cps.service</span><br></pre></td></tr></table></figure>

<p>将以下代码复制进去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Calibre-Web</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/bin/python3 &lt;cps path&gt;</span><br><span class="line">WorkingDirectory=&lt;calibre-web path&gt;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;cps path&gt;</code>是<code>cps.py</code>文件的地址，以我的配置为例就是<code>/root/calibre-web/cps.py</code></li>
<li><code>&lt;calibre-web path&gt;</code>是<code>calibre-web</code>的文件地址，以我的配置为例就是<code>/root/calibre-web</code></li>
</ul>
<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable cps.service</span><br></pre></td></tr></table></figure>

<p>大功告成</p>
]]></content>
      <categories>
        <category>doc</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>远程书架</tag>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件（三）——自定义事件</title>
    <url>/2020-08-27/Vue%E7%BB%84%E4%BB%B6%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="事件名"><a href="#事件名" class="headerlink" title="事件名"></a>事件名</h1><p>不同于组件和 Prop，时间名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。例如要除法一个 camelCase 名称的事件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'myEvent'</span>)</span><br></pre></td></tr></table></figure>

<p>则监听这个名字的 kebab-case 版本是不会有任何效果的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有任何效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-on:my-event</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 <code>v-on</code> 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 <code>v-on:myEvent</code> 将会变成 <code>v-on:myevent</code>——导致 <code>myEvent</code> 不可能被监听到。</p>
<p>因此，推荐<strong>始终使用 kebab-case 的事件名</strong>。</p>
<a id="more"></a>

<h1 id="自定义组件的-v-model"><a href="#自定义组件的-v-model" class="headerlink" title="自定义组件的 v-model"></a>自定义组件的 <code>v-model</code></h1><p>一个组件上的 <code>v-model</code> 默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件，但是像单选框、复选框等类型的输入控件可能会将 <code>value</code> attribute 用于不同的目的。<code>model</code> 选项可以用来避免这样的冲突：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base_checkbox'</span>, &#123;</span><br><span class="line">    model: &#123;</span><br><span class="line">        prop: <span class="string">'checked'</span>,</span><br><span class="line">        event: <span class="string">'change'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        checked: <span class="built_in">Boolean</span></span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">		&lt;input </span></span><br><span class="line"><span class="string">			type="checkbox"</span></span><br><span class="line"><span class="string">			v-bind:checked="checked"</span></span><br><span class="line"><span class="string">			v-on:change="$emit('change', $event.target.checked)"</span></span><br><span class="line"><span class="string">		/&gt;</span></span><br><span class="line"><span class="string">	`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在在这个组件上使用 <code>v-model</code> 的时候：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-checkbox</span> <span class="attr">v-model</span>=<span class="string">"lovingVue"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的 <code>lovingVue</code> 的值将会传入这个名为 <code>checked</code> 的 prop。同时当 <code>&lt;base-checkbox&gt;</code> 触发一个 <code>change</code> 事件并附带一个新的值的时候，这个 <code>lovingVue</code> 的 property 将会被更新。</p>
<h1 id="将原生事件绑定到组件"><a href="#将原生事件绑定到组件" class="headerlink" title="将原生事件绑定到组件"></a>将原生事件绑定到组件</h1><p>你可能有很多次想要在一个组件的根元素上直接监听一个原生事件。这时，你可以使用 <code>v-on</code> 的 <code>.native</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">v-on:focus.native</span>=<span class="string">"onFocus"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在有的时候这是很有用的，不过在你尝试监听一个类似 <code>&lt;input&gt;</code> 的非常特定的元素时，这并不是个好主意。比如上述 <code>&lt;base-input&gt;</code> 组件可能做了如下重构，所以根元素实际上是一个 <code>&lt;label&gt;</code> 元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  	&#123;&#123; label &#125;&#125;</span><br><span class="line">  	<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    	<span class="attr">v-bind</span>=<span class="string">"$attrs"</span></span></span><br><span class="line"><span class="tag">    	<span class="attr">v-bind:value</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">    	<span class="attr">v-on:input</span>=<span class="string">"$emit('input', $event.target.value)"</span></span></span><br><span class="line"><span class="tag">  	/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时，父级的 <code>.native</code> 监听器将静默失败。它不会产生任何报错，但是 <code>onFocus</code> 处理函数不会如你预期地被调用。</p>
<p>为了解决这个问题，Vue 提供了一个 <code>$listeners</code> property，它是一个对象，里面包含了作用在这个组件上的所有监听器。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  	focus: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  	input: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这个 <code>$listeners</code> property，你就可以配合 <code>v-on=&quot;$listeners&quot;</code> 将所有的事件监听器指向这个组件的某个特定的子元素。对于类似 <code>&lt;input&gt;</code> 的你希望它也可以配合 <code>v-model</code> 工作的组件来说，为这些监听器创建一个类似下述 <code>inputListeners</code> 的计算属性通常是非常有用的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-input'</span>, &#123;</span><br><span class="line">    inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">    props: [<span class="string">'label'</span>, <span class="string">'value'</span>],</span><br><span class="line">    computed: &#123;</span><br><span class="line">        inputListeners: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> vm = <span class="keyword">this</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Object.assign 将所有的对象合并位一个新的对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, </span><br><span class="line">            	<span class="comment">// 我们从父级添加所有的监听器</span></span><br><span class="line">                <span class="keyword">this</span>.$listeners,</span><br><span class="line">                <span class="comment">// 然后我们添加自定义监听器</span></span><br><span class="line">                <span class="comment">// 或覆写一些监听器行为</span></span><br><span class="line">                &#123;</span><br><span class="line">                	<span class="comment">// 这里确保组件配合 `v-moel`</span></span><br><span class="line">                	input: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">                        vm.$emit(<span class="string">'input'</span>, event.target.value)</span><br><span class="line">                    &#125;</span><br><span class="line">            	&#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">		&lt;label&gt;</span></span><br><span class="line"><span class="string">			&#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">			&lt;input</span></span><br><span class="line"><span class="string">				v-bind="$attrs"</span></span><br><span class="line"><span class="string">				v-bind:value="value"</span></span><br><span class="line"><span class="string">				v-on="inputListeners"</span></span><br><span class="line"><span class="string">			/&gt;</span></span><br><span class="line"><span class="string">		&lt;/label&gt;</span></span><br><span class="line"><span class="string">	`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在 <code>&lt;base-input&gt;</code> 组件是一个<strong>完全透明的包裹器</strong>了，也就是说它可以完全像一个普通的 <code>&lt;input&gt;</code> 元素一样使用了：所有跟它相同的 attribute 和监听器都可以工作，不必再使用 <code>.native</code> 监听器。</p>
<h1 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a><code>.sync</code> 修饰符</h1><p>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以变更父组件，且在父组件和子组件都没有明显的变更来源。</p>
<p>这也是为什么我们推荐以 <code>update:myPropName</code> 的模式触发事件取而代之。举个例子，在一个包含 <code>title</code> prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'update:title'</span>, newTitle)</span><br></pre></td></tr></table></figure>

<p>然后父组件可以监听那个事件并根据需要更新一个本地的数据 property。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-bind:title</span>=<span class="string">"doc.title"</span></span></span><br><span class="line"><span class="tag">  	<span class="attr">v-on:update:title</span>=<span class="string">"doc.title = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了方便起见，我们为这种模式提供一个缩写，即 <code>.sync</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind:title.sync</span>=<span class="string">"doc.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当我们用一个对象同时设置多个 prop 的时候，也可以将这个 <code>.sync</code> 修饰符和 <code>v-bind</code> 配合使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind.sync</span>=<span class="string">"doc"</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样会把 <code>doc</code> 对象中的每一个 property (如 <code>title</code>) 都作为一个独立的 prop 传进去，然后各自添加用于更新的 <code>v-on</code> 监听器。</p>
]]></content>
      <categories>
        <category>doc</category>
        <category>note</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法——栈</title>
    <url>/2020-09-21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E6%A0%88/</url>
    <content><![CDATA[<h1 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h1><p><strong>栈</strong>是限定尽在表尾进行插入或删除操作的线性表。对栈来说，表尾端有其特殊含义，称为<strong>栈顶</strong>（top），相应的，表头成为<strong>栈顶</strong>。</p>
<h1 id="栈的特点"><a href="#栈的特点" class="headerlink" title="栈的特点"></a>栈的特点</h1><ol>
<li>栈是一种<strong>线性表</strong></li>
<li><strong>先进先出</strong>（Last In First Out，LIFO）</li>
</ol>
<h1 id="栈的表示和实现"><a href="#栈的表示和实现" class="headerlink" title="栈的表示和实现"></a>栈的表示和实现</h1><h2 id="栈的结构定义"><a href="#栈的结构定义" class="headerlink" title="栈的结构定义"></a>栈的结构定义</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    SElemType *base;	<span class="comment">// 栈底指针</span></span><br><span class="line">    SElemType *top;		<span class="comment">// 栈顶指针</span></span><br><span class="line">    <span class="keyword">int</span> length;			<span class="comment">// 栈的长度</span></span><br><span class="line">&#125; SqStack;</span><br></pre></td></tr></table></figure>

<h2 id="栈的操作实现"><a href="#栈的操作实现" class="headerlink" title="栈的操作实现"></a>栈的操作实现</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Stauts <span class="title">init</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">    S.base  = <span class="keyword">new</span> SElemType()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>doc</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统:存储管理动态分区分配及回收算法</title>
    <url>/2020-04-29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E5%8F%8A%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="存储管理动态分区分配及回收算法"><a href="#存储管理动态分区分配及回收算法" class="headerlink" title="存储管理动态分区分配及回收算法"></a>存储管理动态分区分配及回收算法</h1><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>分别用最先适应算法和最佳适应算法进行分区和回收</p>
<h2 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h2><h3 id="最先适应算法"><a href="#最先适应算法" class="headerlink" title="最先适应算法"></a>最先适应算法</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>最先适应算法是计算机中的一种算法，其将空闲区按其在存储空间中的起始地址递增的顺序排列。为作业分配存储空间时，从空闲区链的始端开始查找，选择第一个满足要求的空闲区，而不管它究竟有多大。</p>
<h4 id="排序方式"><a href="#排序方式" class="headerlink" title="排序方式"></a>排序方式</h4><p>按起始地址递增的方式排序</p>
<a id="more"></a>

<h3 id="最佳适应算法"><a href="#最佳适应算法" class="headerlink" title="最佳适应算法"></a>最佳适应算法</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>它从全部空闲区中找出能满足作业要求的、且大小最小的空闲分区，这种方法能使碎片尽量小。为适应此算法，空闲分区表（空闲区链）中的空闲分区要按从小到大进行排序，自表头开始查找到第一个满足要求的自由分区分配。该算法保留大的空闲区，但造成许多小的空闲区。</p>
<h4 id="排序方式-1"><a href="#排序方式-1" class="headerlink" title="排序方式"></a>排序方式</h4><p>按分区大小递增的方式排序</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="分区描述器"><a href="#分区描述器" class="headerlink" title="分区描述器"></a>分区描述器</h3><ul>
<li><code>Adr</code> 分区首地址</li>
<li><code>Size</code> 分区大小</li>
<li><code>Next</code> 下一个分区节点</li>
</ul>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="最先适应算法-1"><a href="#最先适应算法-1" class="headerlink" title="最先适应算法"></a>最先适应算法</h4><ul>
<li><code>head1</code>  空闲分区`</li>
<li><code>assign1</code> 已分配分区</li>
</ul>
<h4 id="最佳适应算法-1"><a href="#最佳适应算法-1" class="headerlink" title="最佳适应算法"></a>最佳适应算法</h4><ul>
<li><code>head2</code> 空闲分区</li>
<li><code>assign2</code> 已分配分区</li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="节点类"><a href="#节点类" class="headerlink" title="节点类"></a>节点类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    Next = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, Adr, Size, Next = None)</span>:</span></span><br><span class="line">        self.Adr = Adr</span><br><span class="line">        self.Size = Size</span><br><span class="line">        self.Next = Next</span><br></pre></td></tr></table></figure>

<h3 id="链表类"><a href="#链表类" class="headerlink" title="链表类"></a>链表类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span>:</span></span><br><span class="line">    Head = <span class="literal">None</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        item = node</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.Head:</span><br><span class="line">            self.Head = item</span><br><span class="line">            self.length += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp = self.Head</span><br><span class="line">            <span class="keyword">while</span> temp.Next:</span><br><span class="line">                temp = temp.Next</span><br><span class="line">            temp.Next = item</span><br><span class="line">            self.length += <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, Adr = None)</span>:</span></span><br><span class="line">        temp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Adr:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.Head:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = self.Head</span><br><span class="line">                self.Head = self.Head.Next</span><br><span class="line">                <span class="keyword">return</span> temp</span><br><span class="line">            self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t = self.Head</span><br><span class="line">            <span class="keyword">if</span> Adr == t.Adr:</span><br><span class="line">                temp = t</span><br><span class="line">                self.Head = t.Next</span><br><span class="line">                <span class="keyword">return</span> temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> t.Next:</span><br><span class="line">                    <span class="keyword">if</span> t.Next.Adr == Adr:</span><br><span class="line">                        temp = t.Next</span><br><span class="line">                        t.Next = t.Next.Next</span><br><span class="line">                        <span class="keyword">return</span> temp</span><br><span class="line">                    t = t.Next</span><br><span class="line">        <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure>

<h3 id="回收检查"><a href="#回收检查" class="headerlink" title="回收检查"></a>回收检查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(assign, Adr, Size)</span> -&gt; "检查":</span></span><br><span class="line">    a = assign.Head</span><br><span class="line">    t = assign.Head</span><br><span class="line">    <span class="keyword">if</span> Adr &lt; <span class="number">0</span> <span class="keyword">or</span> Size &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        <span class="keyword">if</span> Adr &gt;= a.Adr <span class="keyword">and</span> Adr &lt; (a.Adr + a.Size):</span><br><span class="line">            <span class="keyword">if</span> (Adr + Size) &lt;= (a.Adr + a.Size):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> t:</span><br><span class="line">                    <span class="keyword">if</span> t.Adr == a.Adr + a.Size:</span><br><span class="line">                        <span class="keyword">if</span> check(assign, t.Adr, Size + Adr - a.Size):</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    t = t.Next</span><br><span class="line">        a = a.Next</span><br><span class="line">    print(<span class="string">"[Error]指定的内存空间过大"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="最先适应算法-2"><a href="#最先适应算法-2" class="headerlink" title="最先适应算法"></a>最先适应算法</h3><h4 id="分区分配"><a href="#分区分配" class="headerlink" title="分区分配"></a>分区分配</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assignment1</span><span class="params">(Size)</span> -&gt; '首次试应算法':</span></span><br><span class="line">    p = head1.Head</span><br><span class="line">    res = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> Size == p.Size:</span><br><span class="line">        res = head1.push()</span><br><span class="line">        res.Next = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">elif</span> Size &lt; p.Size:</span><br><span class="line">        res = Node(p.Adr, Size)</span><br><span class="line">        p.Adr += Size</span><br><span class="line">        p.Size -= Size</span><br><span class="line">    <span class="keyword">elif</span> head1.length &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">while</span> p.Next:</span><br><span class="line">            <span class="keyword">if</span> Size == p.Next.Size:</span><br><span class="line">                res = p.Next</span><br><span class="line">                p.Next = p.Next.Next</span><br><span class="line">                res.Next = <span class="literal">None</span></span><br><span class="line">                head1.length -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> Size &lt; p.Next.Size:</span><br><span class="line">                res = Node(p.Next.Adr, Size)</span><br><span class="line">                p.Next.Adr += Size</span><br><span class="line">                p.Next.Size -= Size</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            p = p.Next</span><br><span class="line">    assign1.append(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h4 id="分区回收"><a href="#分区回收" class="headerlink" title="分区回收"></a>分区回收</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">occupation1</span><span class="params">(Adr, Size)</span>:</span></span><br><span class="line">    a = assign1.Head</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        <span class="keyword">if</span> Adr == a.Adr:</span><br><span class="line">            <span class="keyword">if</span> Size &lt; a.Size:</span><br><span class="line">                a.Adr = Adr + Size</span><br><span class="line">                a.Size -= Size</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> Size &gt; a.Size:</span><br><span class="line">                    occupation1(a.Adr + a.Size, Size - a.Size)</span><br><span class="line">                assign1.push(a.Adr)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> Adr &gt; a.Adr <span class="keyword">and</span> Adr &lt; a.Adr + a.Size:</span><br><span class="line">            <span class="keyword">if</span> Adr + Size &lt; a.Size + a.Adr:</span><br><span class="line">                temp = Node(Adr + Size, a.Adr + a.Size - Adr - Size, a.Next)</span><br><span class="line">                a.Next = temp</span><br><span class="line">                a.Size = Adr - a.Adr</span><br><span class="line">                assign1.length += <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> Size + Adr &gt;  a.Size + a.Adr:</span><br><span class="line">                    occupation1(a.Adr + a.Size, Size - a.Size + Adr)</span><br><span class="line">                a.Size = Adr</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        a = a.Next</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Recovery1</span><span class="params">(Adr, Size)</span>:</span></span><br><span class="line">    h = head1.Head</span><br><span class="line">    <span class="keyword">if</span> Adr &lt; head1.Head.Adr:</span><br><span class="line">        <span class="keyword">if</span> Adr + Size == head1.Head.Adr:</span><br><span class="line">            head1.Head.Adr = Adr</span><br><span class="line">            head1.Head.Size += Size</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head1.Head = Node(Adr, Size, head1.Head)</span><br><span class="line">            head1.length += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Adr == head1.Head.Adr + head1.Head.Size:</span><br><span class="line">        head1.Head.Size += Size</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> h.Next:</span><br><span class="line">            <span class="keyword">if</span> Adr &lt; h.Next.Adr:</span><br><span class="line">                <span class="keyword">if</span> Adr + Size == h.Next.Adr:</span><br><span class="line">                    h.Next.Adr = Adr</span><br><span class="line">                    h.Next.Size += Size</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    h.Next = Node(Adr, Size, h.Next)</span><br><span class="line">                    head1.length += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            h = h.Next</span><br><span class="line">        head1.append(Node(Adr, Size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">acceptment1</span><span class="params">(Adr, Size)</span>:</span></span><br><span class="line">    occupation1(Adr, Size)</span><br><span class="line">    Recovery1(Adr,Size)</span><br></pre></td></tr></table></figure>

<h3 id="最佳适应算法-2"><a href="#最佳适应算法-2" class="headerlink" title="最佳适应算法"></a>最佳适应算法</h3><h4 id="分区分配-1"><a href="#分区分配-1" class="headerlink" title="分区分配"></a>分区分配</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assignment2</span><span class="params">(Size)</span>:</span></span><br><span class="line">    adr_temp = head2.Head.Adr</span><br><span class="line">    size_temp = head2.Head.Size</span><br><span class="line"></span><br><span class="line">    p = head2.Head.Next</span><br><span class="line">    <span class="keyword">while</span> p:</span><br><span class="line">        <span class="keyword">if</span> Size &lt; p.Size <span class="keyword">and</span> p.Size &lt; size_temp:</span><br><span class="line">            size_temp = p.Size</span><br><span class="line">        p = p.Next</span><br><span class="line">    </span><br><span class="line">    p = head2.Head</span><br><span class="line">    <span class="keyword">while</span> p:</span><br><span class="line">        <span class="keyword">if</span> p.Adr == adr_temp:</span><br><span class="line">            assign2.append(Node(p.Adr, Size))</span><br><span class="line">            p.Adr += Size</span><br><span class="line">            p.Size -= Size</span><br><span class="line">        p = p.Next</span><br></pre></td></tr></table></figure>

<h4 id="分区回收-1"><a href="#分区回收-1" class="headerlink" title="分区回收"></a>分区回收</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Recovery2</span><span class="params">(Adr, Size)</span>:</span></span><br><span class="line">    h = head2.Head</span><br><span class="line">    <span class="keyword">while</span> h:</span><br><span class="line">        <span class="keyword">if</span> Adr &lt; h.Adr <span class="keyword">and</span> Adr + Size == h.Adr:</span><br><span class="line">            h.Adr = Adr</span><br><span class="line">            h.Size += Size</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> Adr == h.Adr + h.Size:</span><br><span class="line">            h.Size += Size</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        h = h.Next</span><br><span class="line"></span><br><span class="line">    h = head2.Head</span><br><span class="line">    <span class="keyword">if</span> Size &lt;= h.Adr:</span><br><span class="line">        head2.Head = Node(Adr, Size, h)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> h.Next:</span><br><span class="line">            <span class="keyword">while</span> h.Next:</span><br><span class="line">                <span class="keyword">if</span> Size &lt; h.Next.Adr:</span><br><span class="line">                    h.Next = Node(Adr, Size, h.Next)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                h = h.Next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head2.append(Node(Adr, Size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">occupation2</span><span class="params">(Adr, Size)</span>:</span></span><br><span class="line">    a = assign2.Head</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        <span class="keyword">if</span> a.Adr == Adr:</span><br><span class="line">            <span class="keyword">if</span> Size &lt; a.Size:</span><br><span class="line">                a.Adr = Adr + Size</span><br><span class="line">                a.Size -= Size</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> Size &gt; a.Size:</span><br><span class="line">                    occupation2(a.Adr + a.Size, Size - a.Size)</span><br><span class="line">                assign2.push(a.Adr)</span><br><span class="line">        <span class="keyword">elif</span> Adr &gt; a.Adr <span class="keyword">and</span> Adr &lt; a.Adr + a.Size:</span><br><span class="line">            <span class="keyword">if</span> Adr + Size &lt; a.Size + a.Adr:</span><br><span class="line">                temp = Node(Adr + Size, a.Adr + a.Size - Adr - Size, a.Next)</span><br><span class="line">                a.Next = temp</span><br><span class="line">                a.Size = Adr - a.Adr</span><br><span class="line">                assign2.length += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s = a.Size</span><br><span class="line">                a.Size = Adr - a.Adr</span><br><span class="line">                <span class="keyword">if</span> Size + Adr &gt; s + a.Adr:</span><br><span class="line">                    occupation2(s + a.Adr, Adr + Size - s - a.Adr)</span><br><span class="line">        a = a.Next</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">acceptment2</span><span class="params">(Adr, Size)</span>:</span></span><br><span class="line">    occupation2(Adr, Size)</span><br><span class="line">    Recovery2(Adr, Size)</span><br></pre></td></tr></table></figure>

<h2 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h2><button style="width: auto; background-color: Black; border-color: transparent; margin-top: 10px; color: white;" onclick="window.open('https://1145141919810.wang/Blog-Content/操作系统：存储管理动态分区分配及回收算法.7z');">
    <span class="fa fa-fw fa-download"></span>
    Download
</button>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法——直接选择排序算法</title>
    <url>/2020-08-28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E7%9B%B4%E6%8E%A5%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><p>对无序数组a[0…n-1]，进行直接选择排序：</p>
<ol>
<li><p>从 a[0 ~ n-1] 中选择最小值，与 a[0] 交换</p>
</li>
<li><p>从 a[1 ~ n-1] 中选择最小值，与 a[1] 交换</p>
</li>
<li><p>从 a[2 ~ n-1] 中选择最小值，与 a[2] 交换</p>
</li>
</ol>
<a id="more"></a>
<p>   ······</p>
<ol start="4">
<li><p>从 a[i ~ n-1] 中选择最小值，与 a[i] 交换</p>
<p>······</p>
</li>
<li><p>从 a[n-2, n-1] 中选择最小值，与 a[n-2] 交换</p>
</li>
</ol>
<p><strong>一共交换 n - 1 次</strong>，得到一个按关键字从小到大排列的有序序列</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="无序数组"><a href="#无序数组" class="headerlink" title="无序数组"></a>无序数组</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">20</span> <span class="number">63</span> <span class="number">59</span> <span class="number">4</span> <span class="number">16</span> <span class="number">77</span> <span class="number">26</span> <span class="number">12</span> <span class="number">33</span></span><br></pre></td></tr></table></figure>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">初始数组：</span><br><span class="line"> <span class="number">5</span> <span class="number">20</span> <span class="number">63</span> <span class="number">59</span>  <span class="number">4</span> <span class="number">16</span> <span class="number">77</span> <span class="number">26</span> <span class="number">12</span> <span class="number">33</span></span><br><span class="line"></span><br><span class="line">排序：</span><br><span class="line"> <span class="number">4</span> <span class="number">20</span> <span class="number">63</span> <span class="number">59</span>  <span class="number">5</span> <span class="number">16</span> <span class="number">77</span> <span class="number">26</span> <span class="number">12</span> <span class="number">33</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span> <span class="number">63</span> <span class="number">59</span> <span class="number">20</span> <span class="number">16</span> <span class="number">77</span> <span class="number">26</span> <span class="number">12</span> <span class="number">33</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span> <span class="number">12</span> <span class="number">59</span> <span class="number">20</span> <span class="number">16</span> <span class="number">77</span> <span class="number">26</span> <span class="number">63</span> <span class="number">33</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span> <span class="number">12</span> <span class="number">16</span> <span class="number">20</span> <span class="number">59</span> <span class="number">77</span> <span class="number">26</span> <span class="number">63</span> <span class="number">33</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span> <span class="number">12</span> <span class="number">16</span> <span class="number">20</span> <span class="number">26</span> <span class="number">77</span> <span class="number">59</span> <span class="number">63</span> <span class="number">33</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span> <span class="number">12</span> <span class="number">16</span> <span class="number">20</span> <span class="number">26</span> <span class="number">33</span> <span class="number">59</span> <span class="number">63</span> <span class="number">77</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span> <span class="number">12</span> <span class="number">16</span> <span class="number">20</span> <span class="number">26</span> <span class="number">33</span> <span class="number">59</span> <span class="number">63</span> <span class="number">77</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span> <span class="number">12</span> <span class="number">16</span> <span class="number">20</span> <span class="number">26</span> <span class="number">33</span> <span class="number">59</span> <span class="number">63</span> <span class="number">77</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">5</span> <span class="number">12</span> <span class="number">16</span> <span class="number">20</span> <span class="number">26</span> <span class="number">33</span> <span class="number">59</span> <span class="number">63</span> <span class="number">77</span></span><br></pre></td></tr></table></figure>

<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        a.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 直接选择排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">min</span> = a[i];</span><br><span class="line">        <span class="keyword">int</span> min_index = i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找 i 到 n-1 中最小的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; i &lt; n - <span class="number">1</span> &amp;&amp; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">                <span class="built_in">min</span> = a[j];</span><br><span class="line">                min_index = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 交换值</span></span><br><span class="line">        <span class="keyword">int</span> t = a[i];</span><br><span class="line">        a[i] = a[min_index];</span><br><span class="line">        a[min_index] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">	    <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    temp = input()</span><br><span class="line">    a = temp.split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(a)):</span><br><span class="line">        a[i] = int(a[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(a)):</span><br><span class="line">        min_val = a[i]</span><br><span class="line">        min_index = i</span><br><span class="line"></span><br><span class="line">        j = i</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(a) - <span class="number">1</span> <span class="keyword">and</span> j &lt; len(a):</span><br><span class="line">            <span class="keyword">if</span> a[j] &lt; min_val:</span><br><span class="line">                min_val = a[j]</span><br><span class="line">                min_index = j</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        t = a[i]</span><br><span class="line">        a[i] = a[min_index]</span><br><span class="line">        a[min_index] = t</span><br><span class="line">    </span><br><span class="line">    out = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(a)):</span><br><span class="line">        out += str(a[i]) + <span class="string">" "</span></span><br><span class="line">    print(out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>doc</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统:进程调度模拟算法</title>
    <url>/2020-04-29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E6%A8%A1%E6%8B%9F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="进程模拟调度算法"><a href="#进程模拟调度算法" class="headerlink" title="进程模拟调度算法"></a>进程模拟调度算法</h1><blockquote>
<p>进程调度是处理机管理的核心内容。</p>
</blockquote>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p><strong>设计进程控制块PCB的结构，通常包括如下信息</strong></p>
<ul>
<li>进程名</li>
<li>进程优先数（或轮转时间片数）</li>
<li>进程已占用的CPU实践</li>
<li>进程到完成还需要的实践</li>
<li>进程状态</li>
<li>当前队列指针</li>
</ul>
<a id="more"></a>

<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ol>
<li><strong>进程控制块结构</strong><ul>
<li><code>NAME</code> 进程标识符</li>
<li><code>PRIO/ROUND</code>  进程优先数/进程每次轮转的时间片数</li>
<li><code>CPUTIME</code> 进程累计占用CPU的实践片数</li>
<li><code>NEEDTIME</code> 进程到完成还需要的时间片数</li>
<li><code>STATE</code> 进程状态</li>
<li><code>NEXT</code> 下一个链节点</li>
</ul>
</li>
<li><strong>进程链表</strong><ul>
<li><code>RUN</code> 运行队列</li>
<li><code>READY</code> 就绪队列</li>
<li><code>FINISH</code> 结束队列</li>
</ul>
</li>
</ol>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="节点类"><a href="#节点类" class="headerlink" title="节点类"></a>节点类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, NEEDTIME, STATE, NAME, PRIO = <span class="number">0</span>, ROUND = <span class="number">0</span>, CPUTIME = <span class="number">0</span>, count = <span class="number">0</span>, _pNEXT = None)</span>:</span></span><br><span class="line">        self.NAME       = NAME</span><br><span class="line">        self.PRIO       = PRIO</span><br><span class="line">        self.ROUND      = ROUND</span><br><span class="line">        self.CPUTIME    = CPUTIME</span><br><span class="line">        self.NEEDTIME   = NEEDTIME</span><br><span class="line">        self.STATE      = STATE</span><br><span class="line">        self.count      = count</span><br><span class="line">        self._NEXT      = _pNEXT</span><br></pre></td></tr></table></figure>

<h3 id="链表类"><a href="#链表类" class="headerlink" title="链表类"></a>链表类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span>:</span></span><br><span class="line">    Head = <span class="literal">None</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将节点添加到尾部</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        item = node</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.Head:</span><br><span class="line">            self.Head = item</span><br><span class="line">            self.length += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp = self.Head</span><br><span class="line">            <span class="keyword">while</span> temp._NEXT:</span><br><span class="line">                temp = temp._NEXT</span><br><span class="line">            temp._NEXT = item</span><br><span class="line">            self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># push节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.Head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp = self.Head</span><br><span class="line">            self.Head = self.Head._NEXT</span><br><span class="line">            <span class="keyword">return</span> temp</span><br><span class="line">        self.length -= <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="优先数算法"><a href="#优先数算法" class="headerlink" title="优先数算法"></a>优先数算法</h3><h4 id="构造链表"><a href="#构造链表" class="headerlink" title="构造链表"></a>构造链表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PrioCreate</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(<span class="string">"请输入进程名称和所需时间"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, num):</span><br><span class="line">        name,needtime = map(str, input().split())</span><br><span class="line">        needtime = int(needtime)</span><br><span class="line">        node = Node(</span><br><span class="line">            NEEDTIME = needtime, </span><br><span class="line">            NAME = name,</span><br><span class="line">            STATE = <span class="string">'W'</span>,</span><br><span class="line">            PRIO = <span class="number">50</span> - needtime</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        temp = READY.Head</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> temp:</span><br><span class="line">            READY.append(node)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> node.PRIO &gt;= temp.PRIO:</span><br><span class="line">                node._NEXT = temp</span><br><span class="line">                READY.Head = node</span><br><span class="line">                READY.length += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> temp:</span><br><span class="line">                    <span class="keyword">if</span> temp._NEXT:</span><br><span class="line">                        <span class="keyword">if</span> node.PRIO &gt;= temp._NEXT.PRIO:</span><br><span class="line">                            node._NEXT = temp._NEXT</span><br><span class="line">                            temp._NEXT = node</span><br><span class="line">                            READY.length += <span class="number">1</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        READY.append(node)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    temp = temp._NEXT</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li><code>num</code> 进程数量</li>
</ul>
<h4 id="优先数算法调度"><a href="#优先数算法调度" class="headerlink" title="优先数算法调度"></a>优先数算法调度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Priority</span><span class="params">()</span>:</span></span><br><span class="line">    RUN.append(READY.push())</span><br><span class="line">    <span class="keyword">if</span> RUN.Head:</span><br><span class="line">        RUN.Head.STATE = <span class="string">'R'</span></span><br><span class="line">        RUN.Head._NEXT = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    RUN.Head.PRIO -= <span class="number">1</span></span><br><span class="line">    RUN.Head.CPUTIME += <span class="number">1</span></span><br><span class="line">    RUN.Head.NEEDTIME -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> RUN.Head.NEEDTIME == <span class="number">0</span>:</span><br><span class="line">        RUN.Head.STATE = <span class="string">'F'</span></span><br><span class="line">        RUN.Head.count += <span class="number">1</span></span><br><span class="line">        FINISH.append(RUN.push())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        RUN.Head.STATE = <span class="string">'W'</span></span><br><span class="line">        RUN.Head.count += <span class="number">1</span></span><br><span class="line">        node = RUN.push()</span><br><span class="line">        temp = READY.Head</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> temp:</span><br><span class="line">            READY.append(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> node.PRIO &gt;= temp.PRIO:</span><br><span class="line">                node._NEXT = temp</span><br><span class="line">                READY.Head = node</span><br><span class="line">                READY.length += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> temp:</span><br><span class="line">                    <span class="keyword">if</span> temp._NEXT:</span><br><span class="line">                        <span class="keyword">if</span> node.PRIO &gt;= temp._NEXT.PRIO:</span><br><span class="line">                            node._NEXT = temp._NEXT</span><br><span class="line">                            temp._NEXT = node</span><br><span class="line">                            READY.length += <span class="number">1</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        READY.append(node)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    temp = temp._NEXT</span><br><span class="line">    Output()</span><br><span class="line">    Priority()</span><br></pre></td></tr></table></figure>

<h3 id="轮转法"><a href="#轮转法" class="headerlink" title="轮转法"></a>轮转法</h3><h4 id="构造链表-1"><a href="#构造链表-1" class="headerlink" title="构造链表"></a>构造链表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RoundCreate</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(<span class="string">"请输入进程名称和所需时间"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, num):</span><br><span class="line">        name,needtime = map(str, input().split())</span><br><span class="line">        needtime = int(needtime)</span><br><span class="line">        node = Node(</span><br><span class="line">            NEEDTIME = needtime,</span><br><span class="line">            NAME = name,</span><br><span class="line">            STATE = <span class="string">'W'</span>,</span><br><span class="line">            ROUND = <span class="number">2</span></span><br><span class="line">        )</span><br><span class="line">        READY.append(node)</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li><code>num</code> 进程数量</li>
</ul>
<h4 id="轮转法调度"><a href="#轮转法调度" class="headerlink" title="轮转法调度"></a>轮转法调度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Round</span><span class="params">()</span>:</span></span><br><span class="line">    RUN.append(READY.push())</span><br><span class="line">    <span class="keyword">if</span> RUN.Head:</span><br><span class="line">        RUN.Head.STATE = <span class="string">'R'</span></span><br><span class="line">        RUN.Head._NEXT = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    RUN.Head.count += <span class="number">1</span></span><br><span class="line">    RUN.Head.CPUTIME += <span class="number">1</span></span><br><span class="line">    RUN.Head.NEEDTIME -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> RUN.Head.NEEDTIME == <span class="number">0</span>:</span><br><span class="line">        RUN.Head.STATE = <span class="string">'F'</span></span><br><span class="line">        FINISH.append(RUN.push())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        RUN.Head.STATE = <span class="string">'W'</span></span><br><span class="line">        READY.append(RUN.push())</span><br><span class="line">    Output()</span><br><span class="line">    Round()</span><br></pre></td></tr></table></figure>

<h2 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h2><button style="width: auto; background-color: Black; border-color: transparent; margin-top: 10px; color: white;" onclick="window.open('https://1145141919810.wang/Blog-Content/操作系统：进程调度模拟算法.7z');">
    <span class="fa fa-fw fa-download"></span>
    Download
</button>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法——线性表</title>
    <url>/2020-09-04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h1><p>由 n ( n &gt;= 0 ) 个数据特性相同的元素构成的有限序列称为<strong>线性表</strong></p>
<p>线性表中元素的个数 n ( n &gt;= 0 ) 定义为线性表的长度，n = 0 时称为空表</p>
<h1 id="线性表的特点"><a href="#线性表的特点" class="headerlink" title="线性表的特点"></a>线性表的特点</h1><ol>
<li>存在唯一的一个被称为”第一个“的数据元素</li>
<li>存在唯一的一个被称为”最后一个“的数据元素</li>
<li>除第一个之外，结构中的每个数据元素均只有一个前驱</li>
<li>除最后一个之外，结构中的每个数据元素均只有一个后继</li>
</ol>
<a id="more"></a>

<h1 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h1><h2 id="顺序表的结构定义"><a href="#顺序表的结构定义" class="headerlink" title="顺序表的结构定义"></a>顺序表的结构定义</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElementType * element;		<span class="comment">// 存储空间的基地址（头节点）</span></span><br><span class="line">    <span class="keyword">int</span> length;					<span class="comment">// 表的长度</span></span><br><span class="line">&#125;SqList;						<span class="comment">// 结构类型</span></span><br></pre></td></tr></table></figure>

<h2 id="顺序表的操作实现"><a href="#顺序表的操作实现" class="headerlink" title="顺序表的操作实现"></a>顺序表的操作实现</h2><h3 id="初始化-Init"><a href="#初始化-Init" class="headerlink" title="初始化 Init"></a>初始化 Init</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">initList</span><span class="params">(SqList &amp;L)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化一个顺序表</span></span><br><span class="line">    L.element = <span class="keyword">new</span> ElementType[MAXSIZE];	</span><br><span class="line">    <span class="keyword">if</span> (!L.element) <span class="built_in">exit</span>(OVERFLOW);			</span><br><span class="line">    L.length = <span class="number">0</span>;							</span><br><span class="line">    <span class="keyword">return</span> OK;								</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">getElement</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, ElementType &amp;e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length) <span class="keyword">return</span> ERROR;</span><br><span class="line">    e = L.element[i - <span class="number">1</span>];					</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">locateElement</span><span class="params">(SqList L, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.element[i] == e) <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">listInsert</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, ElementType e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在顺序表L中第i个位置插入新的元素e，i值的合法范围是1 &lt;= i &lt;= L.length + 1</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; length + <span class="number">1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span> (L.length == MAXSIZE) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = L.length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; j--) &#123;</span><br><span class="line">        L.element[j + <span class="number">1</span>] = L.element[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L.element[i - <span class="number">1</span>] = e;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">listDelete</span><span class="params">(Sqlite &amp;L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在顺序表L中删除第i个元素，i值的合法范围是1 &lt;= i &lt;= L.length</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class="line">        L.element[j - <span class="number">1</span>] = L.element[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="线性表的链式表示和实现"><a href="#线性表的链式表示和实现" class="headerlink" title="线性表的链式表示和实现"></a>线性表的链式表示和实现</h1><p>除了存储其本身的信息之外，还存储一个指示其直接后继的信息（即直接后继的存储位置），这两部分信息组成的数据元素的存储映像，成为<strong>结点</strong>（node）。</p>
<p>结点包含两个域：</p>
<ul>
<li>存储数据元素信息的<strong>数据域</strong></li>
<li>存储直接后继存储位置的<strong>指针域</strong></li>
</ul>
<p>若干结点链结成一个<strong>链表</strong>，即为线性表的链式存储结构</p>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>链表中每个结点都只含有一个指针域变量的链表被称为<strong>单链表</strong></p>
<p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8D%95%E9%93%BE%E8%A1%A8%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.png" alt="单链表-逻辑结构"></p>
<h3 id="单链表结构定义"><a href="#单链表结构定义" class="headerlink" title="单链表结构定义"></a>单链表结构定义</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElementType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125; LNode, *LinkList;</span><br></pre></td></tr></table></figure>

<ul>
<li>在 <code>C/C++</code> 中，使用 <code>typedef</code> 定义变量类型时需要将变量提前声明才能在结构体中使用该变量类型</li>
<li><code>LinkList</code> 指向是链表的头节点</li>
</ul>
<p>一般情况下，为了处理方便，在单链表的第一个结点之前附设一个结点，称之为<strong>头结点</strong>。</p>
<p><strong>注意</strong></p>
<ul>
<li><strong>首元结点</strong>是指链表中存储第一个数据元素的结点。</li>
<li><strong>头结点</strong>是在首元结点之前附设的一个节点，其指针域指向首元结点。头结点的数据域可以不存储任何信息，也可以存储与数据元素类型象通的其他附加信息。例如存放该链表的长度等</li>
<li><strong>头指针</strong>是指向链表中第一个结点的指针。若链表设有头结点，则头指针指向头结点；若没有设头结点，则头指针指向首元结点</li>
</ul>
<h3 id="单链表的操作实现"><a href="#单链表的操作实现" class="headerlink" title="单链表的操作实现"></a>单链表的操作实现</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">initList</span><span class="params">(LinkLisk &amp;L)</span> </span>&#123;</span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="取值-1"><a href="#取值-1" class="headerlink" title="取值"></a>取值</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">getElement</span><span class="params">(LinkList L, <span class="keyword">int</span> i, Element &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在带头结点的单链表L中根据序号i获取元素的值，用e返回L中第i个数据元素的值</span></span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i) &#123;</span><br><span class="line">        p = p-next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p || j &gt; i) <span class="keyword">return</span> ERROR;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LNode *<span class="title">locateElement</span><span class="params">(LinkList L, ElementType e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在带头结点的单链表L中查找值为e的元素</span></span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;date != e) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">listDelete</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在带头结点的单链表L中，删除第i个元素</span></span><br><span class="line">    p = L;</span><br><span class="line">    j = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p-&gt;next || j &gt; i - <span class="number">1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> q;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><p>根据结点插入的位置不同，链表的插值方法可以分为<strong>前插法</strong>和<strong>后插法</strong></p>
<h5 id="前插法"><a href="#前插法" class="headerlink" title="前插法"></a>前插法</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList_H</span><span class="params">(LinkList &amp;L. <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 逆位序输入n个元素的值，建立带表头结点的单链表</span></span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p = <span class="keyword">new</span> LNode;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;data;</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="后插法"><a href="#后插法" class="headerlink" title="后插法"></a>后插法</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList_R</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 正位序输入n个元素的值。建立带表头结点的单链表</span></span><br><span class="line">    L = <span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    LNode r = L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p = <span class="keyword">new</span> LNode;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;data;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        r-&gt;next = p;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>以单链表为基础，将尾节点和头结点连起来，形成一个闭环</p>
<p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.png" alt="单链表-逻辑结构"></p>
<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>链表中每个节点都有两个指针域，一个指向<strong>直接前驱</strong>，一个指向<strong>直接后继</strong>的链表成为<strong>双向链表</strong></p>
<p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.png" alt="单链表-逻辑结构"></p>
<h3 id="双向链表结构定义"><a href="#双向链表结构定义" class="headerlink" title="双向链表结构定义"></a>双向链表结构定义</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> &#123;</span></span><br><span class="line">    ElementType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> * <span class="title">prior</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125; DuLNode, *DuLinkList;</span><br></pre></td></tr></table></figure>

<h3 id="双向链表的操作实现"><a href="#双向链表的操作实现" class="headerlink" title="双向链表的操作实现"></a>双向链表的操作实现</h3><h4 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">listInsert_DuL</span><span class="params">(DuLinkList &amp;L, <span class="keyword">int</span> i. ElementType e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在带头结点的双向链表L中第i个位置之前插入元素e</span></span><br><span class="line">    fi (!p = getElement_DuL(L, i)) <span class="keyword">return</span> ERROR;</span><br><span class="line">    s = <span class="keyword">new</span> DuLNode;</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;prior = p-&gt;prior;</span><br><span class="line">    p-&gt;prior-&gt;next = s;</span><br><span class="line">  	s-&gt;next = p;</span><br><span class="line">    p-&gt;prior = s;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListDelete_DuL</span><span class="params">(DuLinkList &amp;L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 删除带头结点的双向链表L中的第i个元素</span></span><br><span class="line">    <span class="keyword">if</span> (!p = getElement_DuL(L, i)) <span class="keyword">return</span> ERROR;</span><br><span class="line">    p-&gt;prior-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next-&gt;prior = p-&gt;prior;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>doc</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法——KMP算法</title>
    <url>/2020-08-28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94KMP%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>KMP算法是一种改进的<strong>字符串匹配</strong>算法，其核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。</p>
<p><strong>KMP算法的时间复杂度是 O(m+n)</strong></p>
<a id="more"></a>



<p><strong>例</strong>：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
</tr>
</thead>
<tbody><tr>
<td>主串</td>
<td>a</td>
<td>b</td>
<td>a</td>
<td>b</td>
<td>c</td>
<td>a</td>
<td>b</td>
<td>c</td>
<td>a</td>
<td>c</td>
<td>b</td>
<td>a</td>
<td>b</td>
</tr>
<tr>
<td>模式串</td>
<td>a</td>
<td>b</td>
<td>c</td>
<td>a</td>
<td>c</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="next-数组"><a href="#next-数组" class="headerlink" title="next 数组"></a><code>next</code> 数组</h1><p><code>next</code> 数组是KMP算法中很重要的一个概念。这是一个一维整型数组。</p>
<p>简单来说，<code>next</code> 数组可以通过模式串直接生成，它的下标 <strong>n</strong> 对应模式串的字符的位置（从1开始），而它的值则表示模式串中从1开始到 <strong>n</strong> 长度的字符串中首尾重复子串的最大长度。</p>
<p>当然这么讲有些拗口，不如来看一个实例：</p>
<p>我们的模式串为 <code>a b c a c</code></p>
<table>
<thead>
<tr>
<th>n</th>
<th>字符串</th>
<th>重复子串</th>
<th>next值</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>NULL</td>
<td>NULL</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>a</td>
<td>NULL</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>a b</td>
<td>NULL</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>a b c</td>
<td>NULL</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>a b c a</td>
<td>a</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>a b c a c</td>
<td>NULL</td>
<td>0</td>
</tr>
</tbody></table>
<ul>
<li>n = 0时，字符串为空，子串也为空，next值为0</li>
<li>n = 1时，字符串为<code>a</code>，但字符串只有一个字符，子串即它自己，因此没有重复子串，next为0</li>
<li>n = 2时，字符串为<code>a b</code>，没有重复的子串，next为0</li>
<li>n = 3时，字符串为<code>a b c</code>，没有重复的子串，next为0</li>
<li>n = 4时，字符串为<code>a b c a</code>，有重复的子串<code>a</code>，重复子串的长度为1，next为1</li>
<li>n = 5时，字符串为<code>a b c a c</code>，没有重复的子串，next为0</li>
</ul>
<p>得到next数组为：</p>
<table>
<thead>
<tr>
<th>n</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody><tr>
<td>next(n)</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>模式串</td>
<td></td>
<td>a</td>
<td>b</td>
<td>c</td>
<td>a</td>
<td>c</td>
</tr>
</tbody></table>
<h1 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h1><p>和BF算法类似，KMP算法第一步同样是将模式串与主串首端对齐，然后从左到右进行比较。</p>
<ul>
<li>第一次</li>
</ul>
<table>
    <thead>
        <tr>
            <th>序号</th>
            <th>0</th>
            <th>1</th>
            <th>2</th>
            <th>3</th>
            <th>4</th>
            <th>5</th>
            <th>6</th>
            <th>7</th>
            <th>8</th>
            <th>9</th>
            <th>10</th>
            <th>11</th>
            <th>12</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>主串</th>
            <td style="background-color: #87CEFA;">a</td>
            <td style="background-color: #87CEFA;">b</td>
            <td style="background-color: #FFC1C1;">a</td>
            <td>b</td>
            <td>c</td>
            <td>a</td>
            <td>b</td>
            <td>c</td>
            <td>a</td>
            <td>c</td>
            <td>b</td>
            <td>a</td>
            <td>b</td>
        </tr>
        <tr>
            <th>模式串</th>
            <td style="background-color: #87CEFA;">a</td>
            <td style="background-color: #87CEFA;">b</td>
            <td style="background-color: #FFC1C1;">c</td>
            <td>a</td>
            <td>c</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    </tbody>
</table>
第一次匹配时只匹配到了前两个字符 `ab`，第3个字符 `a` 不匹配，是一个“**坏字符**”

<p><strong>匹配个数</strong>为2，<strong>匹配到的最后一个字符</strong>为<code>b</code></p>
<p>那么我们需要将模式串向后移动  <strong>匹配个数</strong> - <strong>字符b的next值</strong> 个位置，即 2 - 0 个位置，得到下面的结果：</p>
<table>
    <thead>
        <tr>
            <th>序号</th>
            <th>0</th>
            <th>1</th>
            <th>2</th>
            <th>3</th>
            <th>4</th>
            <th>5</th>
            <th>6</th>
            <th>7</th>
            <th>8</th>
            <th>9</th>
            <th>10</th>
            <th>11</th>
            <th>12</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>主串</th>
            <td>a</td>
            <td>b</td>
            <td>a</td>
            <td>b</td>
            <td>c</td>
            <td>a</td>
            <td>b</td>
            <td>c</td>
            <td>a</td>
            <td>c</td>
            <td>b</td>
            <td>a</td>
            <td>b</td>
        </tr>
        <tr>
            <th>模式串</th>
            <td></td>
            <td></td>
            <td>a</td>
            <td>b</td>
            <td>c</td>
            <td>a</td>
            <td>c</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    </tbody>
</table>

<ul>
<li>第二次</li>
</ul>
<table>
    <thead>
        <tr>
            <th>序号</th>
            <th>0</th>
            <th>1</th>
            <th>2</th>
            <th>3</th>
            <th>4</th>
            <th>5</th>
            <th>6</th>
            <th>7</th>
            <th>8</th>
            <th>9</th>
            <th>10</th>
            <th>11</th>
            <th>12</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>主串</th>
            <td>a</td>
            <td>b</td>
            <td style="background-color: #87CEFA;">a</td>
            <td style="background-color: #87CEFA;">b</td>
            <td style="background-color: #87CEFA;">c</td>
            <td style="background-color: #87CEFA;">a</td>
            <td style="background-color: #FFC1C1;">b</td>
            <td>c</td>
            <td>a</td>
            <td>c</td>
            <td>b</td>
            <td>a</td>
            <td>b</td>
        </tr>
        <tr>
            <th>模式串</th>
            <td></td>
            <td></td>
            <td style="background-color: #87CEFA;">a</td>
            <td style="background-color: #87CEFA;">b</td>
            <td style="background-color: #87CEFA;">c</td>
            <td style="background-color: #87CEFA;">a</td>
            <td style="background-color: #FFC1C1;">c</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    </tbody>
</table>
**匹配个数**为4，**匹配到的最后一个字符**为`a`

<p>那么我们需要将模式串向后移动 4 - 1 个位置，得到以下结果：</p>
<table>
    <thead>
        <tr>
            <th>序号</th>
            <th>0</th>
            <th>1</th>
            <th>2</th>
            <th>3</th>
            <th>4</th>
            <th>5</th>
            <th>6</th>
            <th>7</th>
            <th>8</th>
            <th>9</th>
            <th>10</th>
            <th>11</th>
            <th>12</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>主串</th>
            <td>a</td>
            <td>b</td>
            <td>a</td>
            <td>b</td>
            <td>c</td>
            <td>a</td>
            <td>b</td>
            <td>c</td>
            <td>a</td>
            <td>c</td>
            <td>b</td>
            <td>a</td>
            <td>b</td>
        </tr>
        <tr>
            <th>模式串</th>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td>a</td>
            <td>b</td>
            <td>c</td>
            <td>a</td>
            <td>c</td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    </tbody>
</table>

<ul>
<li>第三次</li>
</ul>
<table>
    <thead>
        <tr>
            <th>序号</th>
            <th>0</th>
            <th>1</th>
            <th>2</th>
            <th>3</th>
            <th>4</th>
            <th>5</th>
            <th>6</th>
            <th>7</th>
            <th>8</th>
            <th>9</th>
            <th>10</th>
            <th>11</th>
            <th>12</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>主串</th>
            <td>a</td>
            <td>b</td>
            <td>a</td>
            <td>b</td>
            <td>c</td>
            <td style="background-color: #87CEFA;">a</td>
            <td style="background-color: #87CEFA;">b</td>
            <td style="background-color: #87CEFA;">c</td>
            <td style="background-color: #87CEFA;">a</td>
            <td style="background-color: #87CEFA;">c</td>
            <td>b</td>
            <td>a</td>
            <td>b</td>
        </tr>
        <tr>
            <th>模式串</th>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td style="background-color: #87CEFA;">a</td>
            <td style="background-color: #87CEFA;">b</td>
            <td style="background-color: #87CEFA;">c</td>
            <td style="background-color: #87CEFA;">a</td>
            <td style="background-color: #87CEFA;">c</td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    </tbody>
</table>

<p>匹配成功</p>
<p>一共匹配了3次</p>
<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getNext</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; ps)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化next数组</span></span><br><span class="line">    <span class="comment">// next数组0和1的位置都是0</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    res.push_back(<span class="number">0</span>);</span><br><span class="line">    res.push_back(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ps.<span class="built_in">size</span>() &lt;= <span class="number">2</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ps.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; t;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            t.push_back(ps[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.<span class="built_in">size</span>() - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; head;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; <span class="built_in">end</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= j; k++) &#123;</span><br><span class="line">                head.push_back(t[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = t.<span class="built_in">size</span>() - <span class="number">1</span> - j; k &lt; t.<span class="built_in">size</span>(); k++) &#123;</span><br><span class="line">                <span class="built_in">end</span>.push_back(t[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="built_in">end</span>)</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &gt; m)</span><br><span class="line">                    m = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.push_back(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 输入主串长度</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入主串</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; mainString;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> t;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        mainString.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入模式串长度</span></span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入模式串</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; patternString;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> t;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        patternString.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建next数组</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next = getNext(patternString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">begin</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">end</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">begin</span> + patternString.<span class="built_in">size</span>() &lt;= mainString.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span>(patternString[<span class="built_in">begin</span> - <span class="built_in">end</span>] == mainString[<span class="built_in">begin</span>]) &#123;</span><br><span class="line">            <span class="built_in">begin</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">begin</span> - <span class="built_in">end</span> == patternString.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="built_in">begin</span> - <span class="built_in">end</span>;</span><br><span class="line">        <span class="built_in">end</span> += temp - next[temp];</span><br><span class="line">        <span class="built_in">begin</span> = <span class="built_in">end</span>;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建Next数组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNext</span><span class="params">(ps: str)</span>:</span></span><br><span class="line">    res = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> len(ps) &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ps)):</span><br><span class="line">        t = ps[<span class="number">0</span>:i + <span class="number">1</span>]</span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(t) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (t[<span class="number">0</span>: j + <span class="number">1</span>] == t[len(t) - j - <span class="number">1</span>:len(t)]):</span><br><span class="line">                m = j + <span class="number">1</span></span><br><span class="line">        res.append(m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    mainString = input()</span><br><span class="line">    patternString = input()</span><br><span class="line"></span><br><span class="line">    next = getNext(patternString)</span><br><span class="line"></span><br><span class="line">    begin = <span class="number">0</span></span><br><span class="line">    end = <span class="number">0</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> begin + len(patternString) &lt;= len(mainString):</span><br><span class="line">        <span class="keyword">while</span> len(patternString) &gt; begin - end <span class="keyword">and</span> patternString[begin - end] == mainString[begin]:</span><br><span class="line">            begin += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> begin - end == len(patternString):</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        temp = begin - end</span><br><span class="line">        end += temp - next[temp]</span><br><span class="line">        begin = end</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><blockquote>
<p>3年没写Java了写的丑点将就将就吧😂</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">import</span> java.lang.Character;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KMP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector&lt;Integer&gt; <span class="title">getNext</span><span class="params">(<span class="keyword">char</span>[] ps)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Integer&gt; res = <span class="keyword">new</span> Vector&lt;Integer&gt;();</span><br><span class="line">        res.add(<span class="number">0</span>);</span><br><span class="line">        res.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ps.length &lt;= <span class="number">2</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ps.length; i++) &#123;</span><br><span class="line">            Vector&lt;Character&gt; t = <span class="keyword">new</span> Vector&lt;Character&gt;();</span><br><span class="line">            <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                t.add(ps[j]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.size() - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                Vector&lt;Character&gt; head = <span class="keyword">new</span> Vector&lt;Character&gt;();</span><br><span class="line">                Vector&lt;Character&gt; end = <span class="keyword">new</span> Vector&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= j; k++) &#123;</span><br><span class="line">                    head.add(t.get(k));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = t.size() - j - <span class="number">1</span>; k &lt; t.size(); k++) &#123;</span><br><span class="line">                    end.add(t.get(k));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (head.equals(end)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j + <span class="number">1</span> &gt; m) &#123;</span><br><span class="line">                        m = j + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">char</span> [] mainString, patternString;</span><br><span class="line">        mainString = input.nextLine().toCharArray();</span><br><span class="line">        patternString = input.nextLine().toCharArray();</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">        Vector&lt;Integer&gt; next = KMP.getNext(patternString);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (begin + patternString.length &lt;= mainString.length) &#123;</span><br><span class="line">            <span class="keyword">while</span> (patternString.length &gt; begin - end &amp;&amp; patternString[begin - end] == mainString[begin]) &#123;</span><br><span class="line">                begin++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (begin - end == patternString.length) &#123;</span><br><span class="line">                num++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> temp = begin - end;</span><br><span class="line">            end += temp - next.get(temp);</span><br><span class="line">            begin = end;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(num);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>doc</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>清明追思 家国永念</title>
    <url>/2020-04-04/%E6%B8%85%E6%98%8E%E8%BF%BD%E6%80%9D-%E5%AE%B6%E5%9B%BD%E6%B0%B8%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="清明追思-家国永念"><a href="#清明追思-家国永念" class="headerlink" title="清明追思 家国永念"></a>清明追思 家国永念</h1><p>己亥末，庚子初，荆楚大疫。染疾数万，死有三千。</p>
<p>疫初，众惶恐，举国防，皆闭户。丑月末，封江城，路无车舟，万巷空寂。然国士南山，临危受命，唤三十万白衣，被甲赴鄂，挽狂澜于既倒，扶大厦之将倾。</p>
<p>江城疲弊，九州戮力。十余日，拔火雷二神，镇守江城。九州一心，昼夜不怠，红衣竭虑，医者殚精。军授印，赴江城，安民心，抗疫情。</p>
<p>卯月尽，疫病除。然生者有幸，逝者长眠。为缅怀先烈，告慰同胞，留丹心以后记，照汗青以世铭，遂举国祭奠。巳时，国旗半，车船鸣，行人立，颔首默，祭逝者在天之灵。</p>
<p>冬将尽，春可期，江城开，市井集，华灯初上，国泰民安。待明年再看，樱花盛开。</p>
<ul>
<li>江城：指武汉</li>
<li>红衣：志愿者。因为志愿者的衣服是红色的，故称红衣</li>
</ul>
]]></content>
      <categories>
        <category>清明祭祀</category>
      </categories>
      <tags>
        <tag>清明</tag>
        <tag>战疫</tag>
        <tag>祭祀先烈</tag>
      </tags>
  </entry>
  <entry>
    <title>至四年后的自己 From 2017.10.14</title>
    <url>/2021-06-23/%E8%87%B3%E5%9B%9B%E5%B9%B4%E5%90%8E%E7%9A%84%E8%87%AA%E5%B7%B1-From-2017-10-14/</url>
    <content><![CDATA[<p>四年后的自己：</p>
<p>你好。未来是一个严肃的话题，却又是最随和的言语。白驹过隙，韶华呓语，不短不长的四年结束了。你是否还记得开学的第一天，是否记得当初的梦想。无情的时间带走了你四年的时光，现在回收，是否发现你已成长？</p>
<p>时间会改变一个人，不知你是否改掉了拖沓的毛病，不知你是否依旧慵懒无语，不知你是否对未来充满希望，不知你是否学会追求理想。四年前的你，是个不折不扣的死宅：不喜欢户外活动、不喜欢学习、没有生活情趣，连女人缘都没有。我希望四年后的你更加活跃、更加积极、喜欢就去追，不要害怕尴尬，不要辜负青春年华。</p>
<p>我不知道你在读这封信的时候是在哭还是在笑，我不知道这四年你会经历什么，我不知道你仍然倔强还是早已妥协。也许你会经历很多困难，也许现实的残酷会让你遍体鳞伤，但还是希望你能保持着那颗热情的心。</p>
<p>大学四年，不仅是用来学习的，四年的时光要把一个学生变成独立人，不要放过任何机会，时刻做好准备，机会只留给有准备的人。</p>
<p>好好学习，即使进入社会，学习仍然是很重要的事。</p>
<p>我估计你大学昔年也找不到女朋友，以后请你更加积极主动一点，女生喜欢主动的男生。</p>
<p>毕业前找到工作了吗？找到了更好，找不到也没关系，金子在哪儿都会发光。</p>
<p>人生道理我也不谈了，你懂的肯定比我多。你可能会笑话我这拙劣的文笔，但这就是四年前的你。暮然回首，你会发现自己改变了许多，但不管怎么变，你还是你，你还是我，请你保持那天真的梦想继续前行，为生命中美好的事物而奋斗！</p>
<p>再见，祝你幸福。</p>
<p>この素晴らしい未来に祝福を！</p>
<p>四年前的你</p>
<p>2017.10.14</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>毕业季</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 LTS 主题美化 —— 仿 Big Sur 风格</title>
    <url>/2021-02-28/Ubuntu-20-04-LTS-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96-%E2%80%94%E2%80%94-%E4%BB%BF-Big-Sur-%E9%A3%8E%E6%A0%BC/</url>
    <content><![CDATA[<p>依然是老生常谈的Gnome主题美化问题。</p>
<p>最近发现了一款非常好看的仿 Big Sur 主题，以及几款有意思的拓展，特意分享出来以供参考。</p>
<p>在此声明：<strong>适合自己的才是最好的</strong></p>
<a id="more"></a>

<h1 id="先来一张效果图"><a href="#先来一张效果图" class="headerlink" title="先来一张效果图"></a>先来一张效果图</h1><p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="result"></p>
<h1 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h1><p>这里使用阿里云的软件源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开sources.list文件</span></span><br><span class="line">sudo nano /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件中所有的域名更换成 http://mirrors.aliyun.com/ 并保存</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新软件源</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<p><strong>Or</strong></p>
<p>也可以使用ubuntu自带的软件更新器进行修改，在此不赘述。</p>
<h1 id="安装需要用到的工具"><a href="#安装需要用到的工具" class="headerlink" title="安装需要用到的工具"></a>安装需要用到的工具</h1><p>打开命令行，执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install git gnome-tweak-tool gnome-shell-extensions chrome-gnome-shell python3 python3-pip</span><br></pre></td></tr></table></figure>

<h1 id="安装拓展"><a href="#安装拓展" class="headerlink" title="安装拓展"></a>安装拓展</h1><ul>
<li><h3 id="Applications-Menu"><a href="#Applications-Menu" class="headerlink" title="Applications Menu"></a><a href="https://extensions.gnome.org/extension/6/applications-menu/" target="_blank" rel="noopener">Applications Menu</a></h3><p>固定在顶栏上的应用程序菜单</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/applications-menu.png" alt="Applications Menu"></p>
</li>
<li><h3 id="Blyr"><a href="#Blyr" class="headerlink" title="Blyr"></a><a href="https://extensions.gnome.org/extension/1251/blyr/" target="_blank" rel="noopener">Blyr</a></h3><p>当打开活动界面时虚化背景</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/blyr.png" alt="blyr"></p>
</li>
<li><h3 id="Compiz-alike-magic-lamp-effect"><a href="#Compiz-alike-magic-lamp-effect" class="headerlink" title="Compiz alike magic lamp effect"></a><a href="https://extensions.gnome.org/extension/3740/compiz-alike-magic-lamp-effect/" target="_blank" rel="noopener">Compiz alike magic lamp effect</a></h3><p>窗口最小化特效，模仿 Mac OS</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/compiz-alike-magic-lamp-effect.png" alt="compiz-alike-magic-lamp-effect"></p>
</li>
<li><h3 id="Dash-to-Dock"><a href="#Dash-to-Dock" class="headerlink" title="Dash to Dock"></a><a href="https://extensions.gnome.org/extension/307/dash-to-dock/" target="_blank" rel="noopener">Dash to Dock</a></h3><p>优秀的 dock 优化</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/dash-to-dock.png" alt="dash-to-dock"></p>
</li>
<li><h3 id="Dynamic-Panel-Transparency"><a href="#Dynamic-Panel-Transparency" class="headerlink" title="Dynamic Panel Transparency"></a><a href="https://extensions.gnome.org/extension/1011/dynamic-panel-transparency/" target="_blank" rel="noopener">Dynamic Panel Transparency</a></h3><p>当程序最大化时将顶栏变为不透明状态</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/dynamic-panel-transparency.png" alt="dynamic-panel-transparency"></p>
</li>
<li><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a><a href="https://extensions.gnome.org/extension/1036/extensions/" target="_blank" rel="noopener">Extensions</a></h3><p>便捷管理 gnome 拓展</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/extensions.png" alt="extensions"></p>
</li>
<li><h3 id="Frippery-Move-Clock"><a href="#Frippery-Move-Clock" class="headerlink" title="Frippery Move Clock"></a><a href="https://extensions.gnome.org/extension/2/move-clock/" target="_blank" rel="noopener">Frippery Move Clock</a></h3><p>将时间移动到顶栏的右侧而不是固定在中间</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/frippery-move-clock.png" alt="frippery-move-clock"></p>
</li>
<li><h3 id="OpenWeather"><a href="#OpenWeather" class="headerlink" title="OpenWeather"></a><a href="https://extensions.gnome.org/extension/750/openweather/" target="_blank" rel="noopener">OpenWeather</a></h3><p>一个天气小工具</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/openweather.png" alt="openweather"></p>
</li>
<li><h3 id="Panel-OSD"><a href="#Panel-OSD" class="headerlink" title="Panel OSD"></a><a href="https://extensions.gnome.org/extension/708/panel-osd/" target="_blank" rel="noopener">Panel OSD</a></h3><p>配置通知在（主）屏幕上的显示位置，而不是仅显示在消息托盘上方</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/panel-osd.png" alt="panel-osd"></p>
</li>
<li><h3 id="Removable-Drive-Menu"><a href="#Removable-Drive-Menu" class="headerlink" title="Removable Drive Menu"></a><a href="https://extensions.gnome.org/extension/7/removable-drive-menu/" target="_blank" rel="noopener">Removable Drive Menu</a></h3><p>当外部设备连接时会在顶栏显示</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/removable-drive-menu.png" alt="removable-drive-menu"></p>
</li>
<li><h3 id="Screenshot-Tool"><a href="#Screenshot-Tool" class="headerlink" title="Screenshot Tool"></a><a href="https://extensions.gnome.org/extension/1112/screenshot-tool/" target="_blank" rel="noopener">Screenshot Tool</a></h3><p>实时截图小工具</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/screenshot-tool.png" alt="screenshot-tool"></p>
</li>
<li><h3 id="Top-Panel-Workspace-Scroll"><a href="#Top-Panel-Workspace-Scroll" class="headerlink" title="Top Panel Workspace Scroll"></a><a href="https://extensions.gnome.org/extension/701/top-panel-workspace-scroll/" target="_blank" rel="noopener">Top Panel Workspace Scroll</a></h3><p>将鼠标放在顶栏上滚动鼠标时可以切换虚拟桌面</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/top-panel-workspace-scroll.png" alt="top-panel-workspace-scroll"></p>
</li>
<li><h3 id="TopIconsFix"><a href="#TopIconsFix" class="headerlink" title="TopIconsFix"></a><a href="https://extensions.gnome.org/extension/1674/topiconsfix/" target="_blank" rel="noopener">TopIconsFix</a></h3><p>解决 wine 程序运行时 wine 任务栏悬浮的问题</p>
<blockquote>
<p><em>其实可以用TopIconsPlus解决，但是TopIconsPlus会将本身系统程序的任务栏图标也加进去导致菜单栏样式默认为 wine 的样式，我个人不是很喜欢</em></p>
</blockquote>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/topiconsfix.png" alt="topiconsfix"></p>
</li>
<li><h3 id="User-Themes"><a href="#User-Themes" class="headerlink" title="User Themes"></a><a href="https://extensions.gnome.org/extension/19/user-themes/" target="_blank" rel="noopener">User Themes</a></h3><p>从用户目录加载 shell 主题。</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/user-themes.png" alt="user-themes"></p>
</li>
</ul>
<h1 id="安装-Big-Sur-风格主题"><a href="#安装-Big-Sur-风格主题" class="headerlink" title="安装 Big Sur 风格主题"></a>安装 Big Sur 风格主题</h1><blockquote>
<p>在这里特别感谢 <a href="https://github.com/vinceliuice" target="_blank" rel="noopener">@vinceliuice</a> 开发和维护了 <a href="https://github.com/vinceliuice/WhiteSur-gtk-theme" target="_blank" rel="noopener">WhiteSur</a> 主题</p>
</blockquote>
<h2 id="将界面主题和图标主题克隆到本地"><a href="#将界面主题和图标主题克隆到本地" class="headerlink" title="将界面主题和图标主题克隆到本地"></a>将界面主题和图标主题克隆到本地</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vinceliuice/WhiteSur-gtk-theme.git</span><br><span class="line">git clone https://github.com/vinceliuice/WhiteSur-icon-theme.git</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd WhiteSur-gtk-theme</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装界面主题</span></span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装GDM主题</span></span><br><span class="line">sudo ./install.sh -g</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 gnome-shell 活动图标</span></span><br><span class="line">./install.sh -i ubuntu</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 Dash to Dock 主题</span></span><br><span class="line">./src/other/dash-to-dock/install.sh</span><br><span class="line"></span><br><span class="line">cd ../WhiteSur-icon-theme</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装图标主题</span></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>从程序列表中打开 优化 &gt; 外观，应用程序选择 WhiteSur- 开头的任意选项，图标选择 WhiteSur，Shell 选择和应用程序相同的选项。</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/tweak.png" alt="tweak"></p>
<p>设置好后退出即可。</p>
<h2 id="修改-Dash-to-Dock"><a href="#修改-Dash-to-Dock" class="headerlink" title="修改 Dash to Dock"></a>修改 Dash to Dock</h2><p>浏览器打开 <a href="https://extensions.gnome.org/extension/307/dash-to-dock/" target="_blank" rel="noopener">Dash to Dock</a>，点击后面的扳手按钮。</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/dash1.png" alt=""></p>
<p>点击外观选项卡，将 [使用内置主题] 后面的开关打开。</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/dash2.png" alt=""></p>
<p>剩下的自己调一调，调到顺眼即可。</p>
<h2 id="删除-Ubuntu-Dock"><a href="#删除-Ubuntu-Dock" class="headerlink" title="删除 Ubuntu Dock"></a>删除 Ubuntu Dock</h2><p>由于 Dash to Dock 有时候可能和Ubuntu Dock冲突导致两个Dock重叠在一起，所以保险起见删掉Ubuntu Dock。</p>
<p>打开命令行运行一下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /usr/share/gnome-shell/extensions/ubuntu-dock@*</span><br></pre></td></tr></table></figure>

<h1 id="全局菜单"><a href="#全局菜单" class="headerlink" title="全局菜单"></a>全局菜单</h1><p>全局菜单可以说是Mac OS的灵魂，本来 Gnome2 还可以用拓展添加全局菜单的，但是 Gnome3 禁止了这些拓展。</p>
<p>但是 <a href="https://github.com/gonzaarcr" target="_blank" rel="noopener">@gonzaarcr</a> 基于 gnome hud 开发了 Gnome3 的全局菜单 <a href="https://github.com/gonzaarcr/Fildem" target="_blank" rel="noopener">Fildem</a>。</p>
<h2 id="下载到本地"><a href="#下载到本地" class="headerlink" title="下载到本地"></a>下载到本地</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/gonzaarcr/Fildem.git</span><br><span class="line"></span><br><span class="line">mv Fildem/fildemGmenu@gnoza.com ~/.local/share/gnome-shell/extensions/</span><br><span class="line">sudo mv Fildem /usr</span><br></pre></td></tr></table></figure>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install libbamf3-dev bamfdaemon libkeybinder-3.0-dev appmenu-gtk2-module appmenu-gtk3-module unity-gtk-module-common</span><br><span class="line"></span><br><span class="line">sudo pip3 install fuzzysearch</span><br></pre></td></tr></table></figure>

<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo gtk-modules=\"appmenu-gtk-module\" &gt;&gt; ~/.gtkrc-2.0</span><br><span class="line"></span><br><span class="line">echo gtk-modules=\"appmenu-gtk-module\" &gt; ~/.config/gtk-3.0/settings.ini</span><br></pre></td></tr></table></figure>

<h2 id="修改参数"><a href="#修改参数" class="headerlink" title="修改参数"></a>修改参数</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.local/share/gnome-shell/extensions/fildemGmenu@gonza.com/extension.js</span><br></pre></td></tr></table></figure>

<p>将 <code>const FORCE_SHOW_MENU = false</code> 改为 <code>const FORCE_SHOW_MENU = true</code></p>
<p>将 <code>const SHOW_APPMENU_BUTTON = false</code> 改为 <code>const SHOW_APPMENU_BUTTON = true</code></p>
<h2 id="将启动脚本设置为开机启动"><a href="#将启动脚本设置为开机启动" class="headerlink" title="将启动脚本设置为开机启动"></a>将启动脚本设置为开机启动</h2><p>打开启动应用程序。</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/openstart.png" alt=""></p>
<p>点击添加，名称随便写一个，命令写 <code>/usr/Fildem/run.sh</code> 。</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/fildem.png" alt=""></p>
<p>保存，退出。</p>
<p>在 拓展 中将 Fildem 打开。</p>
<p><img src="/img/ubuntu20.04%E7%BE%8E%E5%8C%96/open-fildem.png" alt=""></p>
<h1 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y zsh</span><br><span class="line"></span><br><span class="line">sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure>

<p>重启。</p>
<p>完成。</p>
]]></content>
      <categories>
        <category>doc</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>theme</tag>
        <tag>主题美化</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘</title>
    <url>/2019-12-12/Hadoop-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/</url>
    <content><![CDATA[<h1 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h1><h3 id="mapper-py"><a href="#mapper-py" class="headerlink" title="mapper.py"></a>mapper.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3 </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin :</span><br><span class="line">    title = <span class="number">1</span></span><br><span class="line">    l = line.strip()</span><br><span class="line">    t = l.split()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t :</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">"child"</span> :</span><br><span class="line">            title = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> title <span class="keyword">is</span> <span class="number">1</span> :</span><br><span class="line">            print(l)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>str.split()</code> 和 <code>str.strip()</code> 对数据进行格式化</li>
</ul>
<a id="more"></a>

<h3 id="reduce-py"><a href="#reduce-py" class="headerlink" title="reduce.py"></a>reduce.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3 </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">f = []</span><br><span class="line">l1 = []</span><br><span class="line">l2 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin :</span><br><span class="line">    line = line.strip().split()</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> line :</span><br><span class="line">        f.append(word)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(f), <span class="number">2</span>) :</span><br><span class="line">    s1 = [<span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">    s2 = [<span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line">    s1[<span class="number">0</span>], s1[<span class="number">1</span>] = f[i], <span class="string">'1+'</span> + f[i + <span class="number">1</span>]</span><br><span class="line">    s2[<span class="number">0</span>], s2[<span class="number">1</span>] = f[i + <span class="number">1</span>], <span class="string">'2+'</span> + f[i]</span><br><span class="line">    l1.append(s1)</span><br><span class="line">    l2.append(s2)</span><br><span class="line">print(<span class="string">'grandchild\tgrandparent'</span>)</span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span> :</span><br><span class="line">    <span class="keyword">while</span> l1[m][<span class="number">0</span>] :</span><br><span class="line">        x1 = <span class="string">'1+'</span> + l1[m][<span class="number">0</span>]</span><br><span class="line">        x2 = <span class="string">'2+'</span> + l1[m][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(l1)) :</span><br><span class="line">            <span class="keyword">if</span> x1 <span class="keyword">in</span> l1[j][<span class="number">1</span>] :</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(len(l2)) :</span><br><span class="line">                    <span class="keyword">if</span> x2 <span class="keyword">in</span> l2[k][<span class="number">1</span>] :</span><br><span class="line">                        print(l1[j][<span class="number">0</span>] + <span class="string">'\t\t'</span> + l2[k][<span class="number">0</span>])</span><br><span class="line">        m = m + <span class="number">2</span></span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>List.append()</code> 向列表末尾添加元素  </li>
</ul>
<h3 id="C-txt"><a href="#C-txt" class="headerlink" title="C.txt"></a>C.txt</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">child</span>   <span class="string">parent</span></span><br><span class="line"><span class="attr">Steven</span>  <span class="string">Lucy</span></span><br><span class="line"><span class="attr">Steven</span>  <span class="string">Jack</span></span><br><span class="line"><span class="attr">Jone</span>    <span class="string">Lucy</span></span><br><span class="line"><span class="attr">Jone</span>    <span class="string">Jack</span></span><br><span class="line"><span class="attr">Lucy</span>    <span class="string">Mary</span></span><br><span class="line"><span class="attr">Lucy</span>    <span class="string">Frank</span></span><br><span class="line"><span class="attr">Jack</span>    <span class="string">Alice</span></span><br><span class="line"><span class="attr">Jack</span>    <span class="string">Jesse</span></span><br><span class="line"><span class="attr">David</span>   <span class="string">Alice</span></span><br><span class="line"><span class="attr">David</span>   <span class="string">Jesse</span></span><br><span class="line"><span class="attr">Philip</span>  <span class="string">David</span></span><br><span class="line"><span class="attr">Philip</span>  <span class="string">Alma</span></span><br><span class="line"><span class="attr">Mark</span>    <span class="string">David</span></span><br><span class="line"><span class="attr">Mark</span>    <span class="string">Alma</span></span><br></pre></td></tr></table></figure>

<h3 id="result"><a href="#result" class="headerlink" title="result"></a>result</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">grandchild</span>      <span class="string">grandparent</span></span><br><span class="line"><span class="attr">Mark</span>            <span class="string">Alice</span></span><br><span class="line"><span class="attr">Mark</span>            <span class="string">Jesse</span></span><br><span class="line"><span class="attr">Philip</span>          <span class="string">Alice</span></span><br><span class="line"><span class="attr">Philip</span>          <span class="string">Jesse</span></span><br><span class="line"><span class="attr">Jone</span>            <span class="string">Alice</span></span><br><span class="line"><span class="attr">Jone</span>            <span class="string">Jesse</span></span><br><span class="line"><span class="attr">Steven</span>          <span class="string">Alice</span></span><br><span class="line"><span class="attr">Steven</span>          <span class="string">Jesse</span></span><br><span class="line"><span class="attr">Jone</span>            <span class="string">Frank</span></span><br><span class="line"><span class="attr">Jone</span>            <span class="string">Mary</span></span><br><span class="line"><span class="attr">Steven</span>          <span class="string">Frank</span></span><br><span class="line"><span class="attr">Steven</span>          <span class="string">Mary</span></span><br></pre></td></tr></table></figure>

<p>```</p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>毛概期末复习总结</title>
    <url>/2019-12-28/%E6%AF%9B%E6%A6%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="毛概期末复习总结"><a href="#毛概期末复习总结" class="headerlink" title="毛概期末复习总结"></a>毛概期末复习总结</h1><button style="width: auto; background-color: Black; border-color: transparent; margin-top: 10px; color: white;" onclick="window.open('https://1145141919810.wang/Blog-Content/毛概期末复习总结.pdf');">
    <span class="fa fa-fw fa-download"></span>
    Download
</button>

<style> table th:first-of-type {     width: 100px; } </style>
<h2 id="第八章-习近平新时代中国特色社会主义思想"><a href="#第八章-习近平新时代中国特色社会主义思想" class="headerlink" title="第八章 习近平新时代中国特色社会主义思想"></a>第八章 习近平新时代中国特色社会主义思想</h2><h4 id="历史性成就"><a href="#历史性成就" class="headerlink" title="历史性成就"></a>历史性成就</h4><ol>
<li>经济建设取得重大成就</li>
<li>全面深化改革取得重大突破</li>
<li>民主法治建设迈出重大步伐</li>
<li>思想文化建设取得重大发展</li>
<li>人民生活不断改善</li>
<li>生态文明建设成效显著</li>
<li>强军兴军开创新局面</li>
<li>港澳台工作取得新进展</li>
<li>全方位外交布局深入展开</li>
<li>全面从严治党成效显著</li>
</ol>
<a id="more"></a>

<h4 id="历史性变革"><a href="#历史性变革" class="headerlink" title="历史性变革"></a>历史性变革</h4><ol>
<li>党的领导得到全面加强，党的领导被忽视、淡化、削弱的状况得到明显改变</li>
<li>坚定不移贯彻新发展理念，发展观念不正确、发展方式粗放的状况得到明显改变</li>
<li>坚定不移全面深化改革、各方面体制机制弊端阻碍发展活力和社会活力的状况得到明显改变</li>
<li>坚定不移全面推进依法治国，有法不依、执法不严、司法不公问题严重的状况得到明显改变</li>
<li>加强党对意识形态工作的领导，社会思想舆论环境的混乱状况得到明显改变</li>
<li>坚定不移推进生态文明建设，忽视生态环境保护、生态环境恶化的状况得到明显改变</li>
<li>坚定不移推进国防和军队现代化，人民军队中一度存在的不良政治状况得到明显改变</li>
<li>坚定不移推进中国特色大国外交，我国在国际力量对比中面临的不利状况得到明显改变</li>
<li>坚定不移推进全面从严治党，管党治党宽松软状况得到明显改变</li>
</ol>
<h4 id="社会主要矛盾的变化"><a href="#社会主要矛盾的变化" class="headerlink" title="社会主要矛盾的变化"></a>社会主要矛盾的变化</h4><table>
<thead>
<tr>
<th>时间</th>
<th>会议</th>
<th>主要矛盾</th>
</tr>
</thead>
<tbody><tr>
<td>1956年</td>
<td>八大</td>
<td>人民对于建立先进的工业国的要求同落后的农业国的现实之间的矛盾</td>
</tr>
<tr>
<td>1981年</td>
<td>十一届六中全会</td>
<td>人民日益增长的物质文化需要同落后的社会生产之间的矛盾</td>
</tr>
<tr>
<td>2017年</td>
<td>十九大</td>
<td>人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾</td>
</tr>
</tbody></table>
<h5 id="社会主要矛盾发生变化的主要依据（如何理解我国社会主要矛盾发生的变化）"><a href="#社会主要矛盾发生变化的主要依据（如何理解我国社会主要矛盾发生的变化）" class="headerlink" title="社会主要矛盾发生变化的主要依据（如何理解我国社会主要矛盾发生的变化）"></a>社会主要矛盾发生变化的主要依据（如何理解我国社会主要矛盾发生的变化）</h5><ol>
<li><p>经过改革开放40年的发展，我国社会生产力水平总体上显著提高，很多方面进入世界前列</p>
</li>
<li><p>人民生活水平显著提高，对美好生活的向往更加强烈，不仅对物质文化生活提出了更高要求，而且民主、法治、公平、正义、安全、环境等方面的要求日益增长</p>
</li>
<li><p>影响满足人们美好生活需求的因素很多，但主要是发展不平衡胡充分的问题。</p>
<p>发展不平衡，主要指各区域各领域各方面发展不平衡，制约了全国发展水平提升</p>
<p>发展不充分，主要指一些地区、一些领域、一些方面还存在发展不足的问题，发展的任务仍然很重</p>
<p>表现：</p>
<ul>
<li><em>从社会生产力来看</em>，我国既有世界先进甚至世界领先的生产力，也有大量传统的、相对落后甚至原始的生产力，不同地区、不同领域的生产力水平和布局还不均衡，发展水平任然差距较大，收入分配差距仍然较大，还有几千万人口尚未脱贫</li>
<li><em>从“五位一体”总体布局来看</em>，我国经济发展水平总体较好，但社会法治化水平不高，文化建设相对滞后，社会建设还有不少短板，生态文明建设问题较多</li>
</ul>
</li>
</ol>
<p><strong>我国社会主要矛盾的变化，没有改变我们对我国社会主义所处历史阶段的判断，我国仍处于并将长期处于社会主义初级阶段的基本国情没有变，我国是世界最大发展中国家的国际地位没有变</strong></p>
<h4 id="新时代的内涵（如何认识中国特色社会主义进入新时代）"><a href="#新时代的内涵（如何认识中国特色社会主义进入新时代）" class="headerlink" title="新时代的内涵（如何认识中国特色社会主义进入新时代）"></a>新时代的内涵（如何认识中国特色社会主义进入新时代）</h4><ol>
<li><p><strong>这个新时代是承前启后、继往开来，在新的历史条件下继续夺取中国特色·社会主义伟大胜利的时代</strong></p>
<p>从历史脉络来看，中国特色社会主义是党和人民长期奋斗所创造积累的根本成就和前赴后继的事业，特别是改革开放以来，党领导人民走中国特色社会主义道路，极大地激发了中国人民的创造力，使社会主义在中国展现出强大生命力</p>
</li>
<li><p><strong>这个新时代是决胜全面建成小康社会、进而全面建设社会主义现代化强国的时代</strong></p>
<p>从实践主题来看，到2020年全面建成小康社会，是党向人民、向历史作出的庄严承诺。到新中国诞生100年建成社会主义现代化强国，则标志着中国在100年内走完发达国家几百年走过的现代化路程，这是中国特色社会主义新时代的必然要求和历史任务</p>
</li>
<li><p><strong>这个新时代是全国各族人民团结奋斗、不断创造美好生活、逐步实现全体人民共同富裕的时代</strong></p>
<p>从人民性来看，以人民为中心的发展思想，是党的全心全意为人民服务的根本宗旨在新时代的具体体现。</p>
</li>
<li><p><strong>这个新时代是全体中华儿女勠力同心、奋力实现中华民族伟大复兴中国梦的时代</strong></p>
<p>从民族性来看，经过党的十八大以来的历史性变革，今天我们比历史上任何时期都更加接近、更有信心和能力实现中华民族伟大复兴的目标。</p>
</li>
<li><p><strong>这个时代是我国日益走进世界舞台中央、不断为人类做出更大贡献的时代</strong></p>
<p>从世界性来看，中国梦与世界各国人民祈和平、求发展的梦是相通的，实现中国梦离不开世界和平发展的国际环境，世界的发展也需要中国</p>
</li>
</ol>
<h4 id="新时代的意义"><a href="#新时代的意义" class="headerlink" title="新时代的意义"></a>新时代的意义</h4><ol>
<li>从中华民族复兴的历史进程看，中国特色社会主义进入新时代，意味着近代以来久经磨难的中华民族迎来了从站起来、富起来到强起来的伟大飞跃，迎来了实现中华民族伟大复兴的光明前景</li>
<li>从科学社会主义发展进程看，中国特色社会主义进入新时代，意味着科学社会主义在21世纪的中国焕发出强大生机活力，在世界上高高举起了中国特色社会主义伟大旗帜</li>
<li>从人类文明进程看，中国特色社会主义进入新时代，意味着中国特色社会主义道路、理论、制度、文化不断发展，拓展了发展中国家走向现代化的途径，给世界上那些既希望加快发展又希望保持自身独立性的国家和民族提供了全新选择，为解决人类问题贡献了中国智慧和中国方案</li>
</ol>
<h4 id="习近平新时代中国特色社会主义思想的核心要义"><a href="#习近平新时代中国特色社会主义思想的核心要义" class="headerlink" title="习近平新时代中国特色社会主义思想的核心要义"></a>习近平新时代中国特色社会主义思想的核心要义</h4><p>​    坚持和发展中国特色社会主义</p>
<h4 id="习近平新时代中国特色社会主义思想的内涵（八个明确）"><a href="#习近平新时代中国特色社会主义思想的内涵（八个明确）" class="headerlink" title="习近平新时代中国特色社会主义思想的内涵（八个明确）"></a>习近平新时代中国特色社会主义思想的内涵（八个明确）</h4><ol>
<li>明确坚持和发展中国特色社会主义，总任务是实现社会主义现代化和中华民族伟大复兴，在全面建成小康社会的基础上，分两步走在本世纪中叶建成富强民主文明和谐美丽的社会主义现代化强国</li>
<li>明确新时代我国社会主要矛盾是人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾，必须坚持以人民为中心的发展思想，不断促进人的全面发展、全体人民共同富裕</li>
<li>明确中国特色社会主义事业总体布局是“五位一体”、战略布局是“四个全面”，强调坚定道路自信、理论自信、制度自信、文化自信</li>
<li>明确全面深化改革总目标是完善和发展中国特色社会主义制度，推进国家治理体系和治理能力现代化</li>
<li>明确全面推进依法治国总目标是建设中国特色社会主义法治体系、建设社会主义法治国家</li>
<li>明确党在新时代的强军目标是建设一支听党指挥、能打胜仗、作风优良的人民军队，把人民军队建设成为世界一流军队</li>
<li>明确中国特色大国外交要推动构建新型国际关系，推动构建人类命运共同体</li>
<li>明确中国特色社会主义最本质的特征是中国共产党领导，中国特色社会主义制度的最大优势是中国共产党领导，党是最高政治领导力量，提出新时代党的建设总要求，突出政治建设在党的建设中的重要地位</li>
</ol>
<h4 id="新时代中国特色社会主义基本方略"><a href="#新时代中国特色社会主义基本方略" class="headerlink" title="新时代中国特色社会主义基本方略"></a>新时代中国特色社会主义基本方略</h4><ol>
<li><strong>坚持党对一切工作的领导。</strong>党政军民学，东南西北中，党是领导一切的</li>
<li><strong>坚持以人民为中心。</strong>人民是历史的创造者，是决定党和国家前途命运的根本力量</li>
<li><strong>坚持全面深化改革。</strong>只有社会主义才能救中国，只有改革开放才能发展中国、发展社会主义、发展马克思主义</li>
<li><strong>坚持新发展理念。</strong>发展史解决我国一切问题的基础和关键，发展必须是科学发展，必须坚定不移贯彻创新、协调、绿色、开放、共享的发展理念</li>
<li><strong>坚持人民当家做主。</strong>坚持党的领导、人民当家做主、依法治国有机统一是社会主义政治发展的必然要求</li>
<li><strong>坚持全面依法治国。</strong>全面依法治国是中国特色社会主义的本质要求和重要保障</li>
<li><strong>坚持社会主义核心价值体系。</strong>文化自信是一个国家、一个民族发展中更基本、更深沉、更持久的力量</li>
<li><strong>坚持在发展中保障和改善民生。</strong>增进民生福祉是发展的根本目的</li>
<li><strong>坚持人与自然和谐共生。</strong>建设生态文明是中华民族永续发展的千年大计</li>
<li><strong>坚持总体国家安全观。</strong>统筹发展和安全，增强忧患意识，做到居安思危，是我们党治国理政的一个重大原则</li>
<li><strong>坚持党对人民军队的绝对领导。</strong>建设一直听党指挥、能打胜仗、作风优良的人民军队，是实现“两个一百年”奋斗目标、实现中华民族伟大复兴的战略支撑</li>
<li><strong>坚持“一国两制”和推进祖国统一。</strong>保持香港、澳门长期繁荣稳定，实现祖国完全统一，是实现中华民族伟大复兴的必然要求</li>
<li><strong>坚持推动构建人类命运共同体。</strong>中国人民的梦想同各国人民的梦想息息相通，实现中国梦离不开和平的国际环境和稳定的国际秩序</li>
<li><strong>坚持全面从严治党。</strong>勇于自我革命，从严管党治党，是我们党最鲜明的品格</li>
</ol>
<h4 id="习近平新时代中国特色社会主义思想的历史地位"><a href="#习近平新时代中国特色社会主义思想的历史地位" class="headerlink" title="习近平新时代中国特色社会主义思想的历史地位"></a>习近平新时代中国特色社会主义思想的历史地位</h4><ol>
<li><strong>是马克思主义中国化的最新成果。</strong>习近平新时代中国特色社会主义思想与马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想，科学发展观既一脉相承，又与时俱进，是马克思主义中国化的新飞跃，是当代中国马克思主义、21世纪马克思主义。<ol>
<li><strong>习近平新时代中国特色社会主义思想开辟了马克思主义新境界。</strong>习近平新时代中国特色社会主义思想一系列具有原创性的新思想新观点新论断，在理论上实现了重大突破、重大创新、重大发展，写出了马克思主义新版本，对马克思主义在21世纪的发展作出了重大原创性贡献，以全新视野深化了对共产党执政规律、社会主义建设规律和人类社会发展规律的认识，充分彰显了科学理论的强大生命力和中国共产党人的理论创造力，是当代最现实最鲜活的马克思主义。</li>
<li><strong>习近平新时代中国特色社会主义思想开辟了中国特色社会主义新境界。</strong>中国特色社会主义是改革开放以来党的全部理论和实践的主题。以习近平同志为核心的党中央坚持和发展中国特色社会主义一以贯之。形成了系统完备、逻辑严密、内在统一的科学体系，把中国特色社会主义和实现社会主义现代化、实现中华民族伟大复兴有机贯通起来，系统阐述了民族复兴的深刻内涵、历史方位、实现路径和战略步骤，为实现中华民族伟大复兴的中国梦提供了强大精神力量，标注了正确前进方向，充分体现了中国特色社会主义理论自信，也向世界展示了社会主义的光明图景。</li>
<li><strong>习近平新时代中国特色社会主义思想对人类文明进步具有重要意义。</strong>习近平新时代中国特色社会主义思想洞察时代风云，把握世界发展大势，回答了关系人类前途命运的重大问题。中国的做法和经验为发展中国家提供了路径启示，拓展了发展中国家走向现代化的途径，给世界上那些既希望加快发展又希望保持自身独立性的国家和民族提供了全新选择。为应对全球性问题贡献了中国智慧和中国方案，为人类文明思想宝库增加了绚丽夺目的瑰宝。</li>
</ol>
</li>
<li><strong>是新时代的精神旗帜。</strong>习近平新时代中国特色社会主义思想扎根于960多万平方公里的广袤土地，立足于新中国成立以来特别是改革开放40年的伟大实践，聚合了13多亿中国人民的智慧和创造，具有无比深厚的现实基础、十分鲜明的实践特色，是新时代党和人民共同奋斗的精神旗帜。</li>
<li><strong>是实现中华民族伟大复兴的行动指南。</strong>习近平新时代中国特色社会主义思想是党和国家必须长期坚持的指导思想，是全党全国各族人民团结奋斗的共同思想基础，是决胜全面建成小康社会、建设社会主义现代化强国、实现中华民族伟大复兴中国梦的行动纲领。<ol>
<li>习近平新时代中国特色社会主义思想，是党的意志、国家意志和人民意志的集中体现，为新时代坚持和发展中国特色社会主义提供了根本指引。</li>
<li>习近平新时代中国特色社会主义思想为新时代治国理政提供了基本遵循。</li>
<li>习近平新时代中国特色社会主义思想为全面从严治党、把党建设成为中国特色社会主义事业的坚强领导核心提供了强大思想武器。</li>
</ol>
</li>
</ol>
<h2 id="第九章-坚持和发展中国特色社会主义的总任务"><a href="#第九章-坚持和发展中国特色社会主义的总任务" class="headerlink" title="第九章 坚持和发展中国特色社会主义的总任务"></a>第九章 坚持和发展中国特色社会主义的总任务</h2><h4 id="坚持和发展中国特色社会主义的总任务"><a href="#坚持和发展中国特色社会主义的总任务" class="headerlink" title="坚持和发展中国特色社会主义的总任务"></a>坚持和发展中国特色社会主义的总任务</h4><p>​    实现社会主义现代化和中华民族伟大复兴，在全面建成小康社会的基础上，分两步走在本世纪中叶建成富强民主文明和谐美丽的社会主义现代化强国。中国梦是中华民族伟大复兴的形象表达。</p>
<h4 id="中国梦的本质"><a href="#中国梦的本质" class="headerlink" title="中国梦的本质"></a>中国梦的本质</h4><p>​    中国梦的本质是国家富强、民族振兴、人民幸福</p>
<p>国家富强，是指我国综合国力进一步增强，中国特色社会主义事业进一步发展和完善。<br />民族振兴，就是通过自身的不断发展与强大，继承并创造中华民族的优秀文化以及先进的文明成果，进而使中华民族再次处于世界领先的地位，再次以高昂的姿态屹立于世界民族之林。<br /><br>​人民幸福，就是人民权力保障更加充分，人人得享共同发展。<br /></p>
<h4 id="中国梦的科学内涵"><a href="#中国梦的科学内涵" class="headerlink" title="中国梦的科学内涵"></a>中国梦的科学内涵</h4><ol>
<li><strong>中国梦是国家情怀、民族情怀、人民情怀相统一的梦。</strong>国泰而民安，民富则国强。中国梦最大的特点，就是把国家、民族和个人最为一个命运共同体，把国家利益、民族利益和每个人的具体利益紧紧联系在一起，体现了中华民族的“家国天下”情怀。</li>
<li><strong>中国梦归根到底是人民的梦。</strong>人民是中国梦的主体，是中国梦的创造者和享有者。中国梦不是镜花水月，不是空洞的口号，其最深沉的根基在中国人民心中，必须紧紧依靠人民来实现，必须不断为人民造福。中国梦的深厚源泉在于人民，中国梦的根本归宿也在于人民。</li>
<li><strong>中国梦是国家的梦、民族的梦，也是每一个中国人的梦。</strong>中国梦的广阔舞台，为个人梦想提供了蓬勃生长的空间；每个人向着梦想的不断努力，又是实现伟大中国梦的一份力量。只要每个人都把人生理想融入国家和民族的伟大梦想之中，敢于有梦、勇于追梦、勤于圆梦，就会聚集成实现中国梦的强大力量。</li>
<li><strong>中国梦与世界各国人民的美好梦想相通。</strong>中国梦对世界具有吸引力，中国的梦想，不仅关乎中国的命运，也关系世界的命运。中国梦是和平、发展、合作、共赢的梦，与世界各国人民的美好梦想息息相通，中国人民愿意同各国人民在实现各自梦想的过程中互相支持，互相帮助。</li>
</ol>
<h4 id="如何实现中国梦"><a href="#如何实现中国梦" class="headerlink" title="如何实现中国梦"></a>如何实现中国梦</h4><ol>
<li><strong>实现中国梦必须走中国道路，这就是中国特色社会主义道路。</strong>要增强对中国特色社会主义的道路自信、理论自信、制度自信、文化自信，坚定不移沿着正确的中国道路奋勇前进。</li>
<li><strong>实现中国梦必须弘扬中国精神，这就是以爱国主义为核心的民族精神和以改革创新为核心的时代精神。</strong>以爱国主义为核心的民族精神和以改革创新为核心的时代精神，是凝心聚力的兴国之魂。要弘扬伟大的民族精神和时代精神，不断振奋全民族的精气神，不断增强团结一心的精神纽带，自强不息的精神动力，永远朝气蓬勃迈向未来。</li>
<li><strong>实现中国梦必须凝聚中国力量，这就是全国各族人民大团结的力量。</strong>全国各族人民一定要牢记使命，心往一处想，劲往一处使，用13多亿人民的智慧和力量会激起不可战胜的磅礴力量。</li>
<li><strong>实现中华民族伟大复兴是海内外儿女的共同梦想。</strong>只要海内外儿女紧密团结起来，有力出力，有智出智，团结一心奋斗，就一定能够共同书写中华民族发展的时代华章。</li>
<li><strong>实干才能梦想成真。</strong>实现中华民族伟大复兴，是一项光荣而艰巨的事业，需要每一个人付出艰苦努力，用实干托起中国梦。</li>
<li><strong>实现中国梦任重而道远，</strong>需要锲而不舍、驰而不息的艰苦努力。实现伟大梦想，必须进行伟大斗争，必须建设伟大工程，必须推动伟大事业。只要一代又一代中国人戮力同心、不懈追求、接力奋斗，我们就一定能够到达中华民族伟大复兴的光辉彼岸。</li>
<li><strong>实现中国梦需要和平，只有和平才能实现梦想。</strong>我们将坚定不移走和平发展道路，既努力争取和平的国际环境发展自己，又以自身的发展促进世界和平。</li>
</ol>
<h4 id="建成社会主义现代化强国的战略安排（开启全面建设社会主义现代化强国的新征程）"><a href="#建成社会主义现代化强国的战略安排（开启全面建设社会主义现代化强国的新征程）" class="headerlink" title="建成社会主义现代化强国的战略安排（开启全面建设社会主义现代化强国的新征程）"></a>建成社会主义现代化强国的战略安排（<em>开启全面建设社会主义现代化强国的新征程</em>）</h4><ul>
<li>第一阶段：从2020年到2035年，在全面建成小康社会的基础上，再奋斗15年，基本实现社会主义现代化。</li>
<li>第二阶段：从2035年到本世纪中叶，在基本实现现代化的基础上，再奋斗15年，把我国建成富强民主文明和谐美丽的社会主义现代化强国。</li>
</ul>
<p>实现社会主义现代化强国“两步走”战略的基本安排</p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>主要目标</th>
</tr>
</thead>
<tbody><tr>
<td>第一阶段</td>
<td><strong>经济建设方面</strong>：我国经济实力、科技实力将大幅跃升，跻身创新型国家前列<br /><strong>政治建设方面</strong>：人民平等参与、平等发展权力得到充分保障，法治国家、法治政府、法治社会基本建成，各方面制度更加完善，国家治理体系和治理能力现代化基本实现。<br /><strong>文化建设方面</strong>：社会文明程度达到新的高度，国家文化软实力显著增强，中华文化影响更加广泛深入。<br /><strong>民生和社会建设方面</strong>：人民生活更为宽裕，中等收入群体比例明显提高，城乡区域发展差距和居民生活水平差距显著缩小，基本公共服务均等化基本实现，全体人民共同富裕迈出坚实步伐。<br /><strong>生态文明建设方面</strong>：生态环境根本好转，美丽中国目标基本实现，清洁低碳、安全高效的能源体系和绿色低碳循环发展的经济体系基本建立，生态文明制度更加健全。</td>
</tr>
<tr>
<td>第二阶段</td>
<td>1.  我国将拥有高度的物质文明，社会生产力水平大幅提高，核心竞争力名列世界前茅，经济总量和市场规模超越其他国家，建成富强的社会主义现代化强国。<br />2.  我国将拥有高度的政治文明，形成又有集中又有民主、又有纪律又有自由、又有统一意志又有个人心情舒畅生动活泼的政治局面，依法治国和以德治国有机结合，建成民主的社会主义现代化强国。<br />3.  我国将拥有高度的精神文明，践行社会主义核心价值观成为全社会自觉行动，国民素质显著提高，中国精神、中国价值、中国力量成为中国发展的重要影响力和推动力，建成文明的社会主义现代化强国。<br />4.  我国将拥有高度的社会文明，城乡居民将普遍拥有较高的收入、富裕的生活、健全的基本公共服务，享有更加幸福安康的生活，全体人民共同富裕基本实现，公平正义普遍彰显，社会充满活力而又规范有序，建成和谐的社会主义现代化强国。<br />5.  我国将拥有高度的生态文明，天蓝、地绿、水清的优美生态环境成为普遍常态，开创人与自然和谐共生新境界，建成美丽的社会主义现代化强国。</td>
</tr>
</tbody></table>
<h2 id="第十章-“五位一体”总体布局"><a href="#第十章-“五位一体”总体布局" class="headerlink" title="第十章 “五位一体”总体布局"></a>第十章 “五位一体”总体布局</h2><ol>
<li>建设现代化经济体系</li>
<li>发展社会主义民主政治</li>
<li>推动社会主义文化繁荣兴盛</li>
<li>坚持在发展中保障和改善民生</li>
<li>建设美丽中国</li>
</ol>
<h4 id="建设现代化经济体系"><a href="#建设现代化经济体系" class="headerlink" title="建设现代化经济体系"></a>建设现代化经济体系</h4><ol>
<li><p><strong>贯彻新发展理念</strong></p>
<p>实现社会主义现代化和中华民族伟大复兴的中国梦，科学的发展理念和发展战略必不可缺。新发展理念立足于当前我国的新发展环境、新发展条件，是符合我国国情、顺应时代潮流、厚植发展优势的重大抉择，具有战略性、纲领性、引领性。</p>
<h5 id="新发展理念的内容"><a href="#新发展理念的内容" class="headerlink" title="新发展理念的内容"></a>新发展理念的内容</h5><ol>
<li><p><strong>创新是引领发展的第一动力。</strong>发展动力决定发展速度、效能、可持续性。坚持创新发展，是应对发展环境变化、增强发展动力、把握发展主动权，更好引领新常态的根本之策。</p>
</li>
<li><p><strong>协调是持续健康发展的内在需求。</strong>坚持协调发展，要着力推动区域协调发展、城乡协调发展、物质文明和精神文明协调发展，推动经济建设和国防建设融合发展。</p>
</li>
<li><p><strong>绿色是永续发展的必要条件。</strong>人类发展活动必须尊重自然、顺应自然、保护自然。绿色发展，就是要解决好人与自然和谐共生问题，坚定走生产发展、生活富裕、生态良好的文明发展道路，加快建设资源节约型、环境友好型社会，形成人与自然和谐发展现代化建设新格局，推进美丽中国建设。</p>
</li>
<li><p><strong>开放是国家繁荣发展的必由之路。</strong>开放就是要顺应经济全球化潮流，充分运用人类社会创造的先进科学技术成果和有益管理经验。</p>
</li>
<li><p><strong>共享是中国特色社会主义的本质要求。</strong>其内涵主要有四个方面：</p>
<ul>
<li>全民共享，即共享发展是人人享有、各得其所，不是少数人共享、一部分人共享。</li>
<li>全面共享，即共享发展就是共享国家经济、政治、文化、社会、生态文明各方面建设成果，全面保障人民再各方面的合法权益。</li>
<li>共建共享，即只有共建才能共享，共建的过程也是共享的过程。</li>
<li>渐进共享，即共享发展必须有一个从低级到高级、从不均衡到均衡的过程，计是达到很高的水平也会有差别。</li>
</ul>
</li>
</ol>
<h5 id="新发展理念的科学内涵"><a href="#新发展理念的科学内涵" class="headerlink" title="新发展理念的科学内涵"></a>新发展理念的科学内涵</h5><p> 创新、协调、绿色、开放、共享的新发展理念，相互贯通、相互促进，是具有内在联系的集合体。</p>
<ul>
<li>创新注重的是解决发展动力问题</li>
<li>协调注重的是解决发展不平衡问题</li>
<li>绿色注重的是解决人与自然和谐问题</li>
<li>开放注重的是解决发展内外联动问题</li>
<li>共享注重的是解决社会公平正义问题</li>
</ul>
<p>我们应从整体上把握新发展理念，努力提高统筹贯彻新发展理念的能力和水平，推动建设现代化经济体系。</p>
</li>
<li><p><strong>深化供给侧结构性改革</strong></p>
<p>贯彻新发展理念、建设现代化经济体系必须坚持供给侧结构性改革。坚持质量第一、效益优先，以供给侧结构性改革为主线，推动经济发展质量变革、效率变革、动力变革，提高全要素生产率。只有推进供给侧结构性改革，提高供给体系质量，适应新需求变化，才能在更高水平上实现供求关系新的动态均衡，推动高质量发展。</p>
<h5 id="深化供给侧结构性改革的方法（措施）P219-P210"><a href="#深化供给侧结构性改革的方法（措施）P219-P210" class="headerlink" title="深化供给侧结构性改革的方法（措施）P219~P210"></a>深化供给侧结构性改革的方法（措施）P219~P210</h5><ol>
<li><strong>推进增长动能转换，以加快发展先进制造业为重点全面提升实体经济。</strong></li>
<li><strong>深化要素市场化配置改革，将实现由以价取胜向以质取胜的转变。</strong></li>
<li><strong>加大人力资本培育力度，更加注重调动和保护人的积极性。</strong></li>
<li><strong>持续推进“三去一降一补”，优化市场供求结构。</strong></li>
</ol>
</li>
<li><p><strong>建设现代化经济体系的主要任务</strong></p>
<p>建设现代化经济体系是我国发展的战略目标，也是转变经济发展方式、优化经济结构、转换经济增长动力的迫切要求。只有形成现代化经济体系，才能更好顺应现代化发展潮流和赢得国际竞争主动，也才能为其他领域现代化提供有力支撑。</p>
<h5 id="现代化经济体系内容-P212"><a href="#现代化经济体系内容-P212" class="headerlink" title="现代化经济体系内容 P212"></a>现代化经济体系内容 P212</h5><ol>
<li>创新引领、协同发展的产业体系</li>
<li>统一开放、竞争有序的市场体系</li>
<li>体现效率、促进公平的收入分配体系</li>
<li>彰显优势、协调联动的城乡区域发展体系</li>
<li>资源节约、环境友好的绿色发展体系</li>
<li>多元平衡、安全高效的全面开放体系</li>
<li>充分发挥市场作用、更好发挥政府作用的经济体制</li>
</ol>
<h5 id="建设现代化经济体系的主要任务-P213"><a href="#建设现代化经济体系的主要任务-P213" class="headerlink" title="建设现代化经济体系的主要任务 P213"></a>建设现代化经济体系的主要任务 P213</h5><ol>
<li>大力发展实体经济。</li>
<li>加快实施创新驱动发展战略。</li>
<li>激发各类市场主体活力。</li>
<li>积极推动城乡区域协调发展。</li>
<li>着力发展开放型经济。</li>
<li>加快完善社会主义市场经济体制。</li>
</ol>
</li>
</ol>
<h4 id="发展社会主义民主政治"><a href="#发展社会主义民主政治" class="headerlink" title="发展社会主义民主政治"></a>发展社会主义民主政治</h4><h5 id="如何发展社会主义民主政治"><a href="#如何发展社会主义民主政治" class="headerlink" title="如何发展社会主义民主政治"></a>如何发展社会主义民主政治</h5><ol>
<li>坚持中国特色社会主义政治发展道路。</li>
<li>健全人民当家作主制度体系</li>
<li>巩固和发展爱国统一战线</li>
<li>坚持“一国两制”，推进祖国统一 </li>
</ol>
<h5 id="走中国特色社会主义政治发展道路的两个坚持"><a href="#走中国特色社会主义政治发展道路的两个坚持" class="headerlink" title="走中国特色社会主义政治发展道路的两个坚持"></a>走中国特色社会主义政治发展道路的两个坚持</h5><ol>
<li>坚持党的领导、人民当家作主、依法治国有机统一。</li>
<li>坚持正确政治方向。</li>
</ol>
<h5 id="我国民主制度体系"><a href="#我国民主制度体系" class="headerlink" title="我国民主制度体系"></a>我国民主制度体系</h5><ul>
<li>根本政治制度：人民代表大会制度</li>
<li>基本政治制度：<ul>
<li>中国共产党领导的多党合作和政治协商制度</li>
<li>民族区域自治制度</li>
<li>基层群众自治制度</li>
</ul>
</li>
</ul>
<h5 id="爱国统一战线"><a href="#爱国统一战线" class="headerlink" title="爱国统一战线"></a>爱国统一战线</h5><p>在长期的革命、建设和改革过程中，已经结成了由中国共产党领导的，有各民主党派和各人民团体参加的，包括全体社会主义劳动者、社会主义事业的建设者、拥护社会主义的爱国者、拥护祖国统一的致力于中华民族伟大复兴的爱国者的广泛的爱国统一战线。</p>
<h5 id="如何巩固和发展爱国统一战线"><a href="#如何巩固和发展爱国统一战线" class="headerlink" title="如何巩固和发展爱国统一战线"></a>如何巩固和发展爱国统一战线</h5><ol>
<li>坚持长期共存、互相监督、肝胆相照、荣辱与共，支持民主党派按照中国特色社会主义参政党要求更好履行职能。</li>
<li>深化民族团结进步教育，筑牢中华民族共同体意识。</li>
<li>全面贯彻党的宗教工作基本方针，坚持我国宗教的中国化方向，积极引导宗教与社会主义社会相适应。</li>
<li>牢牢把握大团结大联合的主题，做好统战工作。</li>
</ol>
<h5 id="全面准确贯彻“一国两制”方针的任务要求"><a href="#全面准确贯彻“一国两制”方针的任务要求" class="headerlink" title="全面准确贯彻“一国两制”方针的任务要求"></a>全面准确贯彻“一国两制”方针的任务要求</h5><ol>
<li>必须始终准确把握“一国”和“两制”的关系。“一国两制”是一个完整的概念。“一国”是实行“两制”的前提和基础，“两制”从属和派生于“一国”，并统一于“一国”之内。</li>
<li>必须始终依照宪法和基本法办事。全面贯彻“一国两制”方针，必须把维护中央对香港、澳门特别行政区全面管治权和保障特别行政区高度自治权有机结合起来，落实好中央依法行使权力和特别行政区履行主体责任。</li>
<li>必须始终聚焦发展这个第一要务。发展是永恒的主题，是香港、澳门的立身之本，也是保持香港、澳门国际地位和解决香港、澳门各种问题的金钥匙。</li>
<li>必须始终维护和谐稳定的社会环境。要坚持爱国者为主体的“港人治港”，发展壮大爱国爱港爱澳力量。</li>
</ol>
<h5 id="扎实推进祖国和平统一的任务要求"><a href="#扎实推进祖国和平统一的任务要求" class="headerlink" title="扎实推进祖国和平统一的任务要求"></a>扎实推进祖国和平统一的任务要求</h5><ol>
<li>坚持“和平统一、一国两制”方针。“和平统一、一国两制”是我们解决台湾问题的基本方针，也是实现国家统一的最佳方式。</li>
<li>推动两岸关系和平发展。两岸关系和平发展是一条维护两岸和平、促进共同发展、造福两岸同胞的正确道路，也是通向和平统一的光明大道。</li>
<li>坚持一个中国原则和“九二共识”。一个中国原则是两岸关系的政治基础，体现一个中国原则的“九二共识”，明确界定了两岸关系的根本性质，是确保两岸关系和平发展的关键。</li>
<li>坚决反对和遏制任何形式的“台独”。“台独”分裂势力及其活动损害国家主权和领土完整，是两岸关系和平发展的最大障碍，是台海和平稳定的最大威胁。</li>
<li>秉持和践行“两岸一家亲”理念。两岸同胞是命运与共的骨肉兄弟，是血浓于水的一家人。</li>
<li>携手同心共圆民族复兴中国梦。中国梦是两岸共同的梦，需要大家一起来圆梦。实现中华民族伟大复兴需要两岸同胞携起手来同心干。</li>
</ol>
<h4 id="推动社会主义文化繁荣兴盛"><a href="#推动社会主义文化繁荣兴盛" class="headerlink" title="推动社会主义文化繁荣兴盛"></a>推动社会主义文化繁荣兴盛</h4><h5 id="如何推动社会主义文化繁荣兴盛"><a href="#如何推动社会主义文化繁荣兴盛" class="headerlink" title="如何推动社会主义文化繁荣兴盛"></a>如何推动社会主义文化繁荣兴盛</h5><ol>
<li>牢牢掌握意识形态工作领导权。</li>
<li>培育和践行社会主义核心价值观。</li>
<li>鉴定文化自信，建设社会主义文化强国。</li>
</ol>
<h5 id="如何牢牢掌握意识形态工作领导权-P224-P225"><a href="#如何牢牢掌握意识形态工作领导权-P224-P225" class="headerlink" title="如何牢牢掌握意识形态工作领导权 P224~P225"></a>如何牢牢掌握意识形态工作领导权 P224~P225</h5><ol>
<li>要旗帜鲜明坚持马克思主义指导地位。马克思主义是我们立党立国的根本指导思想，是中国共产党人的“真经”。</li>
<li>要加快构建中国特色哲学社会科学。构建中国特色哲学社会科学，是掌握意识形态工作领导权的内在要求。</li>
<li>要坚持正确的舆论导向。掌握意识形态工作领导权，必须坚持正确舆论导向，以正确舆论引导人，提高新闻舆论传播力、引导力、影响力、公信力，让主旋律更加响亮、正能量更加强劲。文化自信得到充分彰显。</li>
<li>要建设好网络空间。网络不是法外之地，网络空间是亿万民众共同的精神家园，同现实社会一样，既要提倡自由，也要保持秩序。</li>
<li>要落实好意识形态工作责任制。落实意识形态责任制，根本在于加强组织领导，强化责任担当。</li>
</ol>
<h5 id="培育和践行社会主义核心价值观"><a href="#培育和践行社会主义核心价值观" class="headerlink" title="培育和践行社会主义核心价值观"></a>培育和践行社会主义核心价值观</h5><h6 id="社会主义核心价值观内容"><a href="#社会主义核心价值观内容" class="headerlink" title="社会主义核心价值观内容"></a>社会主义核心价值观内容</h6><p>富强、民主、文明、和谐，自由、平等、公正、法治，爱国、敬业、诚信、友善</p>
<h6 id="社会主义核心价值观和社会主义核心价值体系的辩证关系"><a href="#社会主义核心价值观和社会主义核心价值体系的辩证关系" class="headerlink" title="社会主义核心价值观和社会主义核心价值体系的辩证关系"></a>社会主义核心价值观和社会主义核心价值体系的辩证关系</h6><ol>
<li>二者方向一致，都体现了社会主义意识形态的本质要求，体现了社会主义先进文化的精髓，是中国特色社会主义道路、理论、制度和文化的价值表达，是实现中华民族伟大复兴的中国梦的价值引领。</li>
<li>二者各有侧重，相比于社会主义核心价值体系，社会主义核心价值观更加突出核心要素、更加注重凝练表达、更加强化实践导向。</li>
</ol>
<h6 id="培育和实践社会主义核心价值观的要求"><a href="#培育和实践社会主义核心价值观的要求" class="headerlink" title="培育和实践社会主义核心价值观的要求"></a>培育和实践社会主义核心价值观的要求</h6><ol>
<li>把社会主义核心价值观融入社会生活各个方面。</li>
<li>坚持全民行动、干部带头，从家庭做起、从娃娃抓起。</li>
<li>立足中华优秀传统文化和革命文化。</li>
<li>发扬中国人民在长期奋斗中培育、继承、发展起来的伟大民族精神。</li>
</ol>
<h5 id="坚定文化自信，建设社会主义文化强国"><a href="#坚定文化自信，建设社会主义文化强国" class="headerlink" title="坚定文化自信，建设社会主义文化强国"></a>坚定文化自信，建设社会主义文化强国</h5><h6 id="文化强国是指一个国家具有强大的文化力量。这种力量既表现为具有高度文化素养的国民，也表现为发达的文化产业，还表现为强大的文化软实力"><a href="#文化强国是指一个国家具有强大的文化力量。这种力量既表现为具有高度文化素养的国民，也表现为发达的文化产业，还表现为强大的文化软实力" class="headerlink" title="文化强国是指一个国家具有强大的文化力量。这种力量既表现为具有高度文化素养的国民，也表现为发达的文化产业，还表现为强大的文化软实力"></a>文化强国是指一个国家具有强大的文化力量。这种力量既表现为具有高度文化素养的国民，也表现为发达的文化产业，还表现为强大的文化软实力</h6><h6 id="如何建设社会主义文化强国-P229"><a href="#如何建设社会主义文化强国-P229" class="headerlink" title="如何建设社会主义文化强国 P229"></a>如何建设社会主义文化强国 P229</h6><ol>
<li>必须培养高度的文化自信。坚定文化自信，事关国运兴衰，事关文化安全，事关民族精神的独立性。</li>
<li>必须大力发展文化事业和文化产业。</li>
<li>必须提高国家文化软实力。文化软实力集中体现了一个国家基于文化而具有的凝聚力和生命力，以及由此产生的吸引力和影响力。</li>
</ol>
<h6 id="建设社会主义文化强国的意义"><a href="#建设社会主义文化强国的意义" class="headerlink" title="建设社会主义文化强国的意义"></a>建设社会主义文化强国的意义</h6><p>文化兴国运兴，文化强国运强。没有高度的文化自信，没有文化的繁荣兴盛，就没有中华民族伟大复兴。坚定文化自信，推动社会主义文化繁荣兴盛，实现中华民族伟大复兴，要以马克思主义为指导，坚守中华文化立场，立足当代中国现实，结合当今时代条件，发展面向现代化，面向世界、面向未来的，民族的科学的大众的社会主义文化，走中国特色社会主义文化发展道路，建设中国特色社会主义文化。</p>
<h4 id="坚持在发展中保障和改善民生"><a href="#坚持在发展中保障和改善民生" class="headerlink" title="坚持在发展中保障和改善民生"></a>坚持在发展中保障和改善民生</h4><h5 id="如何在发展中保障和改善民生"><a href="#如何在发展中保障和改善民生" class="headerlink" title="如何在发展中保障和改善民生"></a>如何在发展中保障和改善民生</h5><ol>
<li>提高保障和改善民生水平</li>
<li>加强和创新社会治理</li>
<li>坚持总体国家安全观</li>
</ol>
<h5 id="如何提高保障和改善民生水平-P231-P232"><a href="#如何提高保障和改善民生水平-P231-P232" class="headerlink" title="如何提高保障和改善民生水平 P231~P232"></a>如何提高保障和改善民生水平 P231~P232</h5><ol>
<li>优先发展教育事业。建设教育强国是中华民族伟大复兴的基础工程，必须优先发展。</li>
<li>提高就业质量和人民收入水平。就业是最大的民生。</li>
<li>加强社会保障体系建设。社会保障体系发挥兜底作用，保障全社会成员基本生存与生活需要，要全面建成覆盖全民、城乡统筹、权责清晰、保障适度、可持续的多层次社会保障体系。</li>
<li>坚决打赢脱贫攻坚战。消除贫困、改善民生、逐步实现共同富裕，是社会主义的本质要求，是我们党的重要使命。</li>
<li>实施健康中国战略。人民健康是民族昌盛和国家富强的重要标志。</li>
</ol>
<h5 id="如何加强和创新社会治理"><a href="#如何加强和创新社会治理" class="headerlink" title="如何加强和创新社会治理"></a>如何加强和创新社会治理</h5><ol>
<li>创新社会治理体制。坚持完善党委领导、政府负责、社会协同、公众参与、法治保障的社会治理体制，提高社会治理社会化、法治化、智能化、专业化水平，推进社会治理精细化，打造共建共治共享的社会治理格局。</li>
<li>改进社会治理方式。坚持①系统治理、②依法治理、③源头治理、④综合施策。</li>
<li>加强预防和化解社会矛盾机制建设。正确处理人民内部矛盾特别是涉及广大人民群众切身利益的矛盾，是保持社会安定团结良好局面的关键。</li>
<li>加强社会心理服务体系建设。要加强社会心理服务体系建设，培育自尊自信、理性平和、积极向上的社会心态。</li>
<li>加强社区治理体系建设。社区是党和政府联系、服务居民群众的“最后一公里”，社会治理的重心要向基层下移落到城乡社区。社区服务和管理能力越强，社会治理的基础就越实。</li>
</ol>
<h5 id="国家总体安全观的定义"><a href="#国家总体安全观的定义" class="headerlink" title="国家总体安全观的定义"></a>国家总体安全观的定义</h5><p>总体国家安全观，是指坚持国家利益至上，以人民安全为宗旨，以政治安全为根本，统筹外部安全和内部安全、国土安全和国民安全、传统安全和非传统安全、自身安全和共同安全，完善国家安全制度体系，加强国家安全能力建设，坚决维护国家主权、安全、发展利益。</p>
<h5 id="为什么要坚持国家总体安全观"><a href="#为什么要坚持国家总体安全观" class="headerlink" title="为什么要坚持国家总体安全观"></a>为什么要坚持国家总体安全观</h5><ol>
<li><p>坚持总体国家安全观，统筹发展和安全，增强忧患意识，做到居安思危，是我们党治国理政的一个重大原则。</p>
</li>
<li><p>安全和发展是一体之两翼、驱动之双轮。发展是安全的基础。安全是发展的保障。实施发展和安全并重的国家安全战略，既要善于运用发展成果夯实国家安全的实力基础，又要善于塑造有利于经济社会发展的安全环境，做到坚持发展不停步、维护安全不懈怠。</p>
</li>
<li><p>坚持人民安全、政治安全、国家利益至上有机统一。人民安全是国家安全的宗旨，政治安全是国家安全的根本，国家利益至上是国家安全的准则。</p>
</li>
</ol>
<h5 id="构建总体国家安全观的主要任务"><a href="#构建总体国家安全观的主要任务" class="headerlink" title="构建总体国家安全观的主要任务"></a>构建总体国家安全观的主要任务</h5><ol>
<li>完善国家安全体系。贯彻落实总体国家安全观，要求统筹外部安全和内部安全；国土安全和国民安全；传统安全和非传统安全；发展问题和安全问题；自身安全和共同安全。</li>
<li>健全公共安全体系。公共安全是国家安全的重要体现，是最基本的民生。</li>
<li>推进平安中国建设。平安是老百姓解决温饱后的第一需求，是极重要的民生，也是最基本的发展环境。</li>
<li>加强国家安全能力建设。要主动适应新时代国家安全需要，增强风险意识，坚持科技引领、法治保障、文化支撑，推进安全工作精细化、信息化、法治化。</li>
<li>加强国家安全教育。维护国家安全是全党全国人民的共同责任。</li>
</ol>
<h4 id="建设美丽中国"><a href="#建设美丽中国" class="headerlink" title="建设美丽中国"></a>建设美丽中国</h4><h5 id="如何建设美丽中国"><a href="#如何建设美丽中国" class="headerlink" title="如何建设美丽中国"></a>如何建设美丽中国</h5><ol>
<li>坚持人与自然和谐共生</li>
<li>形成人与自然和谐发展新格局</li>
<li>加快生态文明体制改革</li>
</ol>
<h5 id="生态文明的含义"><a href="#生态文明的含义" class="headerlink" title="生态文明的含义"></a>生态文明的含义</h5><p>生态文明是指人类在利用和改造自然的过程中，主动保护自然，积极改善和优化人与自然的关系，建设健康有序的生态运行机制和良好的生态环境。</p>
<p>生态文明的核心是坚持人与自然和谐共生。</p>
<p>我国的生态文明建设必须立足于当前特殊的自然生态环境现状、经济发展水平、文化建设状况、社会政治条件以及人口素质等，走符合国情的社会主义生态文明建设道路。</p>
<h5 id="人如何与自然和谐共生"><a href="#人如何与自然和谐共生" class="headerlink" title="人如何与自然和谐共生"></a>人如何与自然和谐共生</h5><ol>
<li>尊重自然，是人与自然相处时应秉持的<strong>首要态度</strong>，要求人对自然怀有敬畏之心、感恩之情、报恩之意，尊重自然界的创造和存在，绝不能凌驾于自然之上，只有尊重自然才是人与自然相处的科学态度。</li>
<li>顺应自然，是人与自然相处时应遵循的基本原则，要求人顺应自然的客观规律，按自然规律办事。</li>
<li>保护自然，是人与自然相处时应承担的重要责任，要求人发挥主观能动性，在向自然界索取生存发展之需的同时，合乎自然，回报自然，保护自然界的生态系统，对自然界不能只讲索取不讲投入、只讲利用不讲建设。</li>
</ol>
<h5 id="建设社会主义生态文明的目的"><a href="#建设社会主义生态文明的目的" class="headerlink" title="建设社会主义生态文明的目的"></a>建设社会主义生态文明的目的</h5><p>建设社会主义生态文明就是要实现人与自然和谐发展，就是要建设以资源环境承载力为基础、以自然规律为准则、以可持续发展为目标的节约型、环境友好型社会，努力走向社会主义生态文明新时代。</p>
<h5 id="为了形成人与自然和谐发展的新格局，我们应该怎么做"><a href="#为了形成人与自然和谐发展的新格局，我们应该怎么做" class="headerlink" title="为了形成人与自然和谐发展的新格局，我们应该怎么做"></a>为了形成人与自然和谐发展的新格局，我们应该怎么做</h5><ol>
<li>把节约资源放在首位。</li>
<li>坚持保护优先、自然恢复为主。</li>
<li>着力推进绿色发展、循环发展、低碳发展。</li>
<li>形成节约资源和保护环境的空间格局、产业结构、生产方式、生活方式。</li>
</ol>
<h5 id="如何加快生态文明体制改革"><a href="#如何加快生态文明体制改革" class="headerlink" title="如何加快生态文明体制改革"></a>如何加快生态文明体制改革</h5><ol>
<li>推进绿色发展。</li>
<li>着力解决突出环境问题。</li>
<li>加大生态系统保护力度。</li>
<li>改革生态环境监管体制。</li>
</ol>
<h2 id="第十一章-“四个全面”战略布局"><a href="#第十一章-“四个全面”战略布局" class="headerlink" title="第十一章 “四个全面”战略布局"></a>第十一章 “四个全面”战略布局</h2><h3 id="四个全面"><a href="#四个全面" class="headerlink" title="四个全面"></a>四个全面</h3><ol>
<li>全面建成小康社会</li>
<li>全面深化改革</li>
<li>全面依法治国</li>
<li>全面从严治党</li>
</ol>
<h3 id="全面建成小康社会的内涵"><a href="#全面建成小康社会的内涵" class="headerlink" title="全面建成小康社会的内涵"></a>全面建成小康社会的内涵</h3><ol>
<li>全面建成小康社会，更重要、更难做的是做到“全面”。“小康”讲的是发展水平，“全面”讲的是发展的平衡性。</li>
<li>全面小康，覆盖的领域要全面，是“五位一体”全面进步的小康，“五位一体”是一个整体性目标要求，他们之间相互联系、相互促进、不可分割。</li>
<li>全面建成小康社会，要实事求是、因地制宜。</li>
</ol>
<h3 id="全面建成小康社会的目标要求"><a href="#全面建成小康社会的目标要求" class="headerlink" title="全面建成小康社会的目标要求"></a>全面建成小康社会的目标要求</h3><ol>
<li>经济保持中高速增长。</li>
<li>创新驱动成效显著。</li>
<li>发展协调性明显增强。</li>
<li>人民生活水平和质量普遍提高。</li>
<li>国民素质和社会文明程度显著提高。</li>
<li>生态环境质量总体改善。</li>
<li>各方面制度更加成熟更加定型。</li>
</ol>
<h3 id="如何全面建成小康社会"><a href="#如何全面建成小康社会" class="headerlink" title="如何全面建成小康社会"></a>如何全面建成小康社会</h3><ol>
<li>坚决打好防范化解重大风险攻坚战。<ol>
<li>高度重视金融、地方债务、信息安全、社会稳定等领域存在的风险隐患，增强忧患意识和底线思维，积极采取有力措施，坚持标本兼治，注重以完善体制机制来防范化解风险。</li>
<li>加强风险监测、预警、应急处置能力，防止外部风险演化为内部风险，防止经济金融风险演化为政治风险，防止个人风险演化为系统性风险。</li>
</ol>
</li>
<li>坚决打好精准脱贫攻坚战。<ol>
<li>坚持精准扶贫、精准脱贫基本方略，坚持专项扶贫、行业扶贫、社会扶贫等“三位一体”大扶贫格局。</li>
<li>健全公共服务、建设基础设谁、发展特色优势产业。</li>
<li>重点解决好深度贫困问题，加强东西部扶贫写作和对口支援，做好中央单位顶点帮扶。坚持中央统筹、省负总责、市县抓落实的工作机制，强化党政一把手负总责的责任制。</li>
</ol>
</li>
<li>坚决打好污染防治攻坚战。<ol>
<li>推进绿色发展，坚持节约优先、保护优先、自然恢复为主，加快形成节约资源和保护环境的空间格局、产业结构、生产和生活方式。</li>
<li>推动绿色低碳循环发展，提高资源利用小，从源头上降低污染排放。</li>
<li>实施好主题功能区战略，优化国土空间开发格局。</li>
<li>深化生态文明体制改革，完善生态环境保护制度。</li>
<li>加强环保督察。改革生态环境监管机制，推动形成人与自然和谐发展现代化建设新格局。</li>
</ol>
</li>
<li>确保经济社会持续健康发展。<ol>
<li>坚持深化供给侧结构性改革，促进“三去一降一补”重点任务取得更大成效，强化创新驱动，加快经济发展方式转变，提高发展质量和效益/</li>
<li>保持宏观政策连续性稳定性，退队经济保持中高速增长、产业迈向中高端水平，在发展平衡性、协调性、可持续性明显增强的基础上，实现国内生产总值和城乡居民人均收入比2010年翻一番等目标要求。</li>
</ol>
</li>
</ol>
<h3 id="为什么要全面深化改革"><a href="#为什么要全面深化改革" class="headerlink" title="为什么要全面深化改革"></a>为什么要全面深化改革</h3><ol>
<li>全面深化改革，是顺应当今世界发展大势的必然选择。</li>
<li>全面深化改革，是解决中国现实问题的根本途径。</li>
<li>全面深化改革，关系党和人民事业前途命运，关系党的执政基础和执政地位</li>
</ol>
<h3 id="如何全面深化改革"><a href="#如何全面深化改革" class="headerlink" title="如何全面深化改革"></a>如何全面深化改革</h3><ol>
<li>全面深化改革必须坚持党对改革的集中统一领导。</li>
<li>全面深化改革必须坚持改革沿着中国特色社会主义方向前进。</li>
<li>全面深化改革必须坚持改革往有利于维护社会公平正义、增强人民福祉方向前进。</li>
<li>全面深化改革必须坚持社会主义市场经济改革方向。</li>
</ol>
<h3 id="全面深化改革的总目标"><a href="#全面深化改革的总目标" class="headerlink" title="全面深化改革的总目标"></a>全面深化改革的总目标</h3><p>完善和发展中国特色社会主义制度，推进国家治理体系和治理能力现代化。</p>
<h3 id="全面深化改革的主要内容"><a href="#全面深化改革的主要内容" class="headerlink" title="全面深化改革的主要内容"></a>全面深化改革的主要内容</h3><table>
<thead>
<tr>
<th>方面</th>
<th>具体内容</th>
</tr>
</thead>
<tbody><tr>
<td>经济体制</td>
<td>紧紧围绕市场在资源配置中起决定性作用和更好发挥政府作用深化经济体制改革</td>
</tr>
<tr>
<td>政治体制</td>
<td>紧紧围绕坚持党的领导、人民当家作主、依法治国有机统一深化政治体制改革</td>
</tr>
<tr>
<td>文化体制</td>
<td>紧紧围绕建设社会主义核心价值观体系、社会主义文化强国深化文化体制改革</td>
</tr>
<tr>
<td>社会体制</td>
<td>紧紧围绕更好保障和改善民生、促进社会公平正义深化社会体制改革</td>
</tr>
<tr>
<td>生态文明体制</td>
<td>紧紧围绕建设美丽中国深化生态文明体制改革</td>
</tr>
<tr>
<td>党的建设制度</td>
<td>紧紧围绕提高科学执政、民主执政、依法执政水平深化党的建设制度改革</td>
</tr>
</tbody></table>
<h3 id="如何正确处理全面深化改革中的重大关系"><a href="#如何正确处理全面深化改革中的重大关系" class="headerlink" title="如何正确处理全面深化改革中的重大关系"></a>如何正确处理全面深化改革中的重大关系</h3><ol>
<li>处理好解放思想和实事求是的关系。要用辩证唯物主义和历史唯物主义立场观点方法来观察世界、指导实践。</li>
<li>处理好顶层设计和摸着石头过河的关系。摸着石头过河是坚持边实践边总结，从实践中获得真知。</li>
<li>处理好整体推进和重点突破的关系。全面深化改革是关系党和国家事业的重大战略部署，是一个涉及经济社会发展各领域的复杂系统工程，每一项改革都会对其他改革产生重要影响，每一项改革又都需要其他改革协同配合。</li>
<li>处理好胆子要大、步子要稳的关系。积跬步以致千里，积小赢以为大胜。</li>
<li>处理好改革、发展、稳定的关系。改革、发展、稳定是我国社会主义现代化建设的三个重要支点，改革是经济社会发展的强大动力，发展是解决一切社会问题的关键，稳定是改革发展的前提。</li>
</ol>
<h3 id="全面依法治国的形成发展"><a href="#全面依法治国的形成发展" class="headerlink" title="全面依法治国的形成发展"></a>全面依法治国的形成发展</h3><table>
<thead>
<tr>
<th>时间</th>
<th>会议</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>1978年</td>
<td>十一届三中全会</td>
<td>提出“发展社会主义民主、健全社会主义法制”的重大方针</td>
</tr>
<tr>
<td>1997年</td>
<td>十五大</td>
<td>明确吧依法治国确立为治理国家的基本方略<br />把建设社会主义法治国家确定为社会主义现代化建设的重要目标</td>
</tr>
<tr>
<td>1999年</td>
<td>九届全国人大二次会议</td>
<td>通过《中华人民共和国宪法修正案》正式将“依法治国”写入宪法</td>
</tr>
<tr>
<td>2002年</td>
<td>十六大</td>
<td>提出发展社会主义民主政治，最根本的是要把坚持党的领导、人民当家作主和依法治国有机统一起来</td>
</tr>
<tr>
<td>2007年</td>
<td>十七大</td>
<td>提出依法治国是社会主义民主政治的基本要求，强调要全面落实依法治国基本方略</td>
</tr>
<tr>
<td>2012年</td>
<td>十八大</td>
<td>提出“加快建设社会主义法治国家”，把“全面推进依法治国”作为政治改革和政治发展的重要目标和重要任务</td>
</tr>
</tbody></table>
<h3 id="中国特色社会主义法治道路的内涵"><a href="#中国特色社会主义法治道路的内涵" class="headerlink" title="中国特色社会主义法治道路的内涵"></a>中国特色社会主义法治道路的内涵</h3><ol>
<li>坚持中国共产党的领导。党的领导和依法治国是高度统一的。党的领导是社会主义法制最根本的保证。必须坚持党领导立法、保证执法、支持司法、带头守法、把依法治国同依法行政统一起来。</li>
<li>坚持人民在全面依法治国中的主体地位。坚持法治为了人民、依靠人民、造福人民、保护人民。</li>
<li>坚持法律面前人人平等。在立法、执法、司法、守法各个方面体现人人平等，尊重宪法法律权威。</li>
<li>坚持依法治国和以德治国相结合。法律是成文的道德，道德是内心的法律。</li>
<li>坚持从中国实际出发。全面依法治国，必须从我国实际出发，同推进国家治理体系和治理能力现代化相适应。</li>
</ol>
<h3 id="深化依法治国实践的重点任务"><a href="#深化依法治国实践的重点任务" class="headerlink" title="深化依法治国实践的重点任务"></a>深化依法治国实践的重点任务</h3><ol>
<li>推进中国特色社会主义法治体系建设。<ol>
<li>完善以宪法为核心的中国特色社会主义法律体系。</li>
<li>建立严密的法制监督体系。</li>
</ol>
</li>
<li>深化依法治国实践。<ol>
<li>加强宪法实施和监督。加强宪法实施和监督，推进合宪性审查工作，维护宪法权威。</li>
<li>全面落实司法责任制。</li>
<li>加大全民普法力度，建设社会主义法治文化。</li>
</ol>
</li>
</ol>
<h3 id="新时代党的建设总要求"><a href="#新时代党的建设总要求" class="headerlink" title="新时代党的建设总要求"></a>新时代党的建设总要求</h3><ol>
<li>坚持和加强党的全面领导</li>
<li>坚持党要管党、全面从严治党</li>
<li>以加强党的长期执政能力建设</li>
<li>先进性和纯洁性建设为主线，以党的政治建设为统领，以坚定理想信念宗旨为根基，以调动全党积极性、主动性、创造性为着力点，全面推进党的政治建设、思想建设、组织建设、作风建设、纪律建设，把制度建设贯穿其中，深入推进反腐败斗争，不断提高党的建设质量</li>
<li>把党建设成为始终走在时代前列、人民衷心拥护、勇于自我革命、禁得起各种风浪考验、朝气蓬勃的马克思主义执政党。</li>
</ol>
<h3 id="把党的政治建设摆在首位的原因"><a href="#把党的政治建设摆在首位的原因" class="headerlink" title="把党的政治建设摆在首位的原因"></a>把党的政治建设摆在首位的原因</h3><ol>
<li>旗帜鲜明讲政治是我们党作为马克思主义政党的根本要求。</li>
<li>党的政治建设是党的根本性建设，决定党的建设方向和效果。</li>
<li>注重抓党的政治建设是党的十八大以来全面从严治党的成功经验。</li>
</ol>
<h3 id="党的政治建设的基本内容"><a href="#党的政治建设的基本内容" class="headerlink" title="党的政治建设的基本内容"></a>党的政治建设的基本内容</h3><ol>
<li>保证全党服从中央，坚持党中央权威和集中统一领导，是党的政治建设的首要任务</li>
<li>全党要坚定执行党的政治路线，严格遵守政治纪律和政治规矩。</li>
<li>要尊崇党章，严格执行新形势下党内政治生活若干准则。</li>
<li>完善和落实民主集中制的各项制度，坚持民主基础上的集中和集中指导下的民主相结合。</li>
<li>弘扬忠诚老实、公道正派、实事求是、公正廉洁等价值观，坚决防止和反对个人主义、分散主义、自由主义、本位主义、好人主义，坚决防止和反对宗派主义、圈子文化、码头文化，坚决反对搞两面派、做两面人。</li>
<li>全党同志要加强党性锻炼，提高政治觉悟和政治能力。</li>
</ol>
<h3 id="如何坚持全面从严治党"><a href="#如何坚持全面从严治党" class="headerlink" title="如何坚持全面从严治党"></a>如何坚持全面从严治党</h3><ol>
<li>加强党的思想建设。思想建设是党的基础性建设。</li>
<li>加强党的组织建设。党的组织建设主要包括民主集中制建设、党的基层组织建设、干部队伍建设和党员队伍建设等内容。</li>
<li>持之以恒正风肃纪。作风建设的核心是保持党同人民群众的血肉联系。</li>
<li>将制度建设贯穿党的各项建设之中。制度问题带有根本性、全局性、稳定性、长期性，加强制度建设是全面从严治党的长远之根本之策。</li>
<li>深化标本兼治，夺取反腐败斗争压倒性胜利。廉政建设和反腐败斗争，是从严治党的重中之重。</li>
</ol>
<h2 id="第十二章-全面推进国防和军队现代化"><a href="#第十二章-全面推进国防和军队现代化" class="headerlink" title="第十二章 全面推进国防和军队现代化"></a>第十二章 全面推进国防和军队现代化</h2><h3 id="习近平强军思想的主要内容："><a href="#习近平强军思想的主要内容：" class="headerlink" title="习近平强军思想的主要内容："></a>习近平强军思想的主要内容：</h3><ol>
<li>强国必须强军，巩固国防和强大人民军队是新时代坚持和发展中国特色社会主义、实现中华民族伟大复兴的战略支撑。</li>
<li>党在新时代的强军目标是建设一支听党指挥、能打胜仗、作风优良的人民军队，必须同国家现代化进程相一致。</li>
<li>党对军队的绝对领导是人民军队建军之本、强军之魂，必须全面贯彻党领导军队的一系列根本原则和制度，确保部队绝对忠诚、绝对纯洁、绝对可靠。</li>
<li>军队是要准备打仗的，必须聚焦能打仗、打胜仗，创新发展军事战略指导，构建中国特色现代作战体系，全面提高新时代备战打仗能力，有效塑造态势、管控危机、遏制战争、打赢战争。</li>
<li>作风优良是我军鲜明特色和政治优势，必须加强作风建设、纪律建设，坚定不移正风肃纪、反腐惩恶，大力弘扬我党我军光荣传统和优良作风，永葆人民军队性质、宗旨、本色。</li>
<li>推进强军事业必须坚持政治建军、改革强军、科技兴军、依法治军，更加注重聚焦实战、更加注重创新驱动、更加注重体系建设、更加注重集约高效、更加注重军民融合，全面提高革命化现代化正规化水平。</li>
<li>改革是强军的必由之路，必须推进军队组织形态现代化，构建中国特色现代军事力量体系。完善中国特色社会主义军事制度。</li>
<li>创新是引领发展的第一动力，必须坚持向科技创新要战斗力，统筹推进军事理论、技术、组织、管理、文化等各方面创新，建设创新型人民军队。</li>
<li>现代化军队必须构建中国特色军事法治体系，推进治军方式根本性转变，提高国防和军队建设法治化水平。</li>
<li>军民融合发展是兴国之举、强军之策，必须坚持发展和安全兼顾、富国和强军统一，形成全要素、多领域、高效益军民融合深度发展格局，构建一体化的国家战略体系和能力。</li>
</ol>
<h3 id="习近平强军思想的重要意义"><a href="#习近平强军思想的重要意义" class="headerlink" title="习近平强军思想的重要意义"></a>习近平强军思想的重要意义</h3><p>习近平强军思想，是习近平新时代中国特色社会主义思想的组成部分，开拓了马克思主义军事理论和当代中国军事实践发展新境界，标志着党的军事指导理论的与时俱进。</p>
<h3 id="新时代应当如何强军"><a href="#新时代应当如何强军" class="headerlink" title="新时代应当如何强军"></a>新时代应当如何强军</h3><p>面向新时代，我们要坚持党对人民军队的绝对领导，全面贯彻习近平强军思想，不断推进政治建军、改革强军、科技兴军、依法治军，加快形成中国特色、世界一流的武装力量体系，构建中国特色现代作战体系，推动人民军队切实担负起党和人民赋予的新时代使命任务。</p>
<h3 id="党对军队的绝对领导是中国特色社会主义的本质特征，是党和国家的重要政治优势。"><a href="#党对军队的绝对领导是中国特色社会主义的本质特征，是党和国家的重要政治优势。" class="headerlink" title="党对军队的绝对领导是中国特色社会主义的本质特征，是党和国家的重要政治优势。"></a>党对军队的绝对领导是中国特色社会主义的本质特征，是党和国家的重要政治优势。</h3><h3 id="党的领导是人民军队战无不胜的根本保证。"><a href="#党的领导是人民军队战无不胜的根本保证。" class="headerlink" title="党的领导是人民军队战无不胜的根本保证。"></a>党的领导是人民军队战无不胜的根本保证。</h3><h3 id="党对军队的绝对领导的基本内容"><a href="#党对军队的绝对领导的基本内容" class="headerlink" title="党对军队的绝对领导的基本内容"></a>党对军队的绝对领导的基本内容</h3><p>军队必须完全地无条件地置于中国共产党的领导之下，在思想上政治上行动上始终与党中央、中央军委保持高度一致，坚决维护党中央、中央军委权威，任何时候任何情况下都坚决听从党中央、中央军委指挥。</p>
<h3 id="保证党对军队绝对领导的制度内容"><a href="#保证党对军队绝对领导的制度内容" class="headerlink" title="保证党对军队绝对领导的制度内容"></a>保证党对军队绝对领导的制度内容</h3><ol>
<li>军队最高领导权和指挥权属于党中央和中央军委，中央军委实行主席负责制。</li>
<li>实行党委制、政治委员制、政治机关制。</li>
<li>实行支部建在连上。</li>
</ol>
<p>军委主席负责制是党对军队绝对领导的<strong>最高实现形式</strong>。</p>
<p>党委、政治委员和政治机关是党从思想上政治上组织上建设和掌握部队的<strong>重要组织支撑</strong>。</p>
<p>党委统一的集体领导下的首长分工负责制是党领导军队的<strong>根本制度</strong>。</p>
<p>支部建在连上是党指挥枪原则落地生根的<strong>坚实基础</strong>。</p>
<h3 id="如何坚持党对军队的绝对领导，把党指挥枪的原则落到实处"><a href="#如何坚持党对军队的绝对领导，把党指挥枪的原则落到实处" class="headerlink" title="如何坚持党对军队的绝对领导，把党指挥枪的原则落到实处"></a>如何坚持党对军队的绝对领导，把党指挥枪的原则落到实处</h3><ol>
<li>不折不扣落实好党领导军队的一整套制度。</li>
<li>坚持五湖四海、任人唯贤，坚持德才兼备、以德为先，坚持对党忠诚、谋善打仗、敢于担当、实绩突出、清正廉洁的军队好干部标准，完善干部选拔任用机制，增强选人用人的科学性、准确性、公信度。</li>
<li>严守政治纪律和政治规律，加大从严治党、从严治军力度。</li>
</ol>
<h3 id="如何建设世界一流军队"><a href="#如何建设世界一流军队" class="headerlink" title="如何建设世界一流军队"></a>如何建设世界一流军队</h3><ol>
<li>牢固树立战斗力这个唯一的根本的标准。</li>
<li>坚持政治建军、改革强军、科技兴军、依法治军。</li>
<li>构建中国特色现代军事力量体系。</li>
<li>深入推进练兵备战。</li>
</ol>
<h3 id="坚持富国和强军相统一的科学内涵"><a href="#坚持富国和强军相统一的科学内涵" class="headerlink" title="坚持富国和强军相统一的科学内涵"></a>坚持富国和强军相统一的科学内涵</h3><ol>
<li>坚持富国和强军相统一是我们党的一贯主张。</li>
<li>坚持富国和强军相统一是经济建设和国防建设协调发展规律的内在要求。富国才能强军，强军才能卫国。</li>
<li>走军民融合式发展路子，是实现富国和强军统一的重要途径。</li>
</ol>
<h3 id="如何加快形成军民融合深度发展格局"><a href="#如何加快形成军民融合深度发展格局" class="headerlink" title="如何加快形成军民融合深度发展格局"></a>如何加快形成军民融合深度发展格局</h3><ol>
<li>坚持全国一盘棋。军民融合是国家战略，必须站在党和国家事业发展全局的高度思考问题，切实把思想和行动统一到党中央决策部署上来。</li>
<li>健全体制机制。在国家层面成立中央军民融合发展委员会，建立推进军民融合发展机制，形成组织管理体系。各省设置军民融合发展领导机构，完善职能配置和工作机制。</li>
<li>强化战略规划。把国民经济和社会发展规划、军队建设发展规划统筹起来、同步论证，建立专门资金渠道，落实军民融合发展资金保障，加强主导检查、建立问责机制，强化规划刚性约束和执行力。</li>
<li>突出重点领域。向重点领域聚焦用力，以点带面推动整体水平提升。民用科技向军事领域拓展；吸纳和利用民用先进技术发展高新技术武器装备；建设符合国防要求的重大基础设施；人才资源共育共享；构建物资储备网络布局；推进多领域的军民融合。</li>
<li>军政军民团结是实现富国和强军相统一的重要政治保障，是我党我军特有的政治优势。使关心国防、热爱国防、建设国防、保卫国防成为全社会的思想共识和自觉行动。</li>
</ol>
<h2 id="中国特色大国外交"><a href="#中国特色大国外交" class="headerlink" title="中国特色大国外交"></a>中国特色大国外交</h2><h3 id="当前世界局势"><a href="#当前世界局势" class="headerlink" title="当前世界局势"></a>当前世界局势</h3><ul>
<li>世界多极化在曲折中发展</li>
<li>经济全球化深入发展</li>
<li>文化多样化持续推进</li>
<li>社会信息化快速发展</li>
<li>科学技术孕育新突破</li>
</ul>
<h3 id="中国独立自主的和平外交政策"><a href="#中国独立自主的和平外交政策" class="headerlink" title="中国独立自主的和平外交政策"></a>中国独立自主的和平外交政策</h3><ol>
<li>就是把国家主权和安全放在第一位，坚定地维护我国的国家利益，反对任何国家损害我国的独立、主权、安全和尊严；</li>
<li>就是从我国人民和世界人民的根本利益出发，对于一切国家事务，都要根据事情本身的是非曲直决定自己的立场和政策，秉持公道，伸张正义，不屈从于任何外来压力；</li>
<li>就是坚持各国的失误应有本国政府和人民决定，世界上的事情应由各国政府和人民平等协商，反对一切形式的霸权主义和强权政治；</li>
<li>就是主张和平解决国际争端和热点问题，反对动辄诉诸武力或以武力相威胁，反对颠覆别国合法政权，反对一切形式的恐怖主义。</li>
</ol>
<h3 id="为什么中国要实行独立自主的和平外交政策"><a href="#为什么中国要实行独立自主的和平外交政策" class="headerlink" title="为什么中国要实行独立自主的和平外交政策"></a>为什么中国要实行独立自主的和平外交政策</h3><ol>
<li>中国坚定不移地奉行独立自主的和平外交政策，走和平发展道路，这是由我国的社会主义性质和在国际上的地位所决定的，是从历史、现实、未来的客观判断中得出的结论，是思想自信和实践自觉地有机统一。</li>
<li>中国走和平发展道路的自信和自觉，来源于中华文明的深厚渊源，来源于对现实中国发展目标条件的认知，来源于对世界发展大势的把握。</li>
<li>走和平发展道路，对中国有利，对亚洲有利，对世界也有利。</li>
<li>中国坚持走和平发展道路，既积极争取和平的国际环境发展自己，又以自身发展促进世界和平；既让中国更好利用世界的机遇，又让世界更好分享中国的机遇，促进中国和世界各国良性互动、互利共赢。</li>
</ol>
<h3 id="维护世界和平、促进共同发展，是中国外交政策的宗旨。"><a href="#维护世界和平、促进共同发展，是中国外交政策的宗旨。" class="headerlink" title="维护世界和平、促进共同发展，是中国外交政策的宗旨。"></a>维护世界和平、促进共同发展，是<strong>中国外交政策的宗旨</strong>。</h3><h3 id="新型国际关系“新”在哪里（新型国际关系的特点）"><a href="#新型国际关系“新”在哪里（新型国际关系的特点）" class="headerlink" title="新型国际关系“新”在哪里（新型国际关系的特点）"></a>新型国际关系“新”在哪里（新型国际关系的特点）</h3><p>“新”在互相尊重，“新”在公平正义，特别是“新”在合作共赢。</p>
<h3 id="如何推动新型国际关系"><a href="#如何推动新型国际关系" class="headerlink" title="如何推动新型国际关系"></a>如何推动新型国际关系</h3><ol>
<li>坚决维护国家核心利益。</li>
<li>在和平共处五项原则基础上发展同世界各国的友好合作。</li>
<li>积极参与全球治理体系改革和建设。</li>
<li>加强涉外法律工作，完善涉外法律法规体系。</li>
<li>把互相尊重、公平正义、合作共赢理念体现到政治、经济、安全、文化等对外合作的方方面面，推动构建人类命运共同体。</li>
</ol>
<h3 id="构建人类命运共同体思想的时代背景"><a href="#构建人类命运共同体思想的时代背景" class="headerlink" title="构建人类命运共同体思想的时代背景"></a>构建人类命运共同体思想的时代背景</h3><ol>
<li>世界格局正处于加快演变进程之中，国与国之间的联系程度空前加深</li>
<li>世界发展面临各种问题和挑战，国际社会迫切呼唤新的全球治理理念</li>
</ol>
<h3 id="构建人类命运共同体思想的内涵"><a href="#构建人类命运共同体思想的内涵" class="headerlink" title="构建人类命运共同体思想的内涵"></a>构建人类命运共同体思想的内涵</h3><ol>
<li>政治上，要相互尊重、平等协商，坚决摒弃冷战思维和强权政治，走对话而不对抗、结伴而不结盟的国与国交往新路。</li>
<li>安全上，要坚持以对话解决争端、以协商化解分歧，统筹应对传统和非传统安全威胁，反对一切形式的恐怖主义。</li>
<li>经济上，要同舟共济，促进贸易和投资自由化便利化，推动经济全球化朝着更加开放、包容、普惠、平衡、供应的方向发展。</li>
<li>文化上，要尊重世界文明多样性，以文明交流超越文明隔阂、文明互鉴超越文明冲突、文明共存超越文明优越。</li>
<li>生态上，要坚持环境友好，合作应对气候变化，保护好人类赖以生存的地球家园。</li>
</ol>
<h3 id="构建人类命运共同体思想的意义"><a href="#构建人类命运共同体思想的意义" class="headerlink" title="构建人类命运共同体思想的意义"></a>构建人类命运共同体思想的意义</h3><p>构建人类命运共同体顺应了历史潮流，回应了时代要求，凝聚了各国共识，为人类社会实现共同发展、持续繁荣、长治久安绘制了蓝图。这一思想继承和发展了新中国不同时期重大外交思想和主张，反映了中外优秀文化和全人类共同价值追求，适应了新时代中国与世界关系的历史性变化，成为中国引领时代潮流和人类文明进步方向的鲜明旗帜，已被多次写入联合国文件，对中国的和平发展、世界的繁荣进步都有重大和深远的意义。</p>
<h3 id="为什么要推进“一带一路”"><a href="#为什么要推进“一带一路”" class="headerlink" title="为什么要推进“一带一路”"></a>为什么要推进“一带一路”</h3><p>共建“一带一路”符合国际社会的根本利益，彰显人类社会共同理想和美好追求，是国际合作以及全球治理新模式的积累探索，将为世界和平发展增添新的正能量。推进“一带一路”建设计是中国扩大和深化对外开放的需要，也是加强和欧亚非拉及世界各国互利合作的需要。</p>
<h3 id="共建“一带一路”倡议"><a href="#共建“一带一路”倡议" class="headerlink" title="共建“一带一路”倡议"></a>共建“一带一路”倡议</h3><p>恪守联合国宪章的宗旨和原则，坚持开放合作、和谐包容、市场运作、互利共赢。<br>秉持和平合作、开放包容、互利共赢的理念，全方位推进务实合作，打造政治互信、经济融合、文化包容的利益共同体、命运共同体和责任共同体，以政策沟通、设施联通、贸易畅通、资金融通、民心相通为主要内容加强合作。</p>
<h3 id="“一带一路”建设要求"><a href="#“一带一路”建设要求" class="headerlink" title="“一带一路”建设要求"></a>“一带一路”建设要求</h3><ol>
<li>坚持引进来和走出去并重，深化双向投资合作。</li>
<li>坚持共商共建共享原则。</li>
<li>加强创新能力开放合作，主要是加强技术创新合作、理论创新交流互鉴、创新人才资源交流合作。</li>
<li>把“一带一路”与构建人类命运共同体更加紧密结合起来，与落实2030年可持续发展议程紧密结合起来，打造国际合作新平台，增添共同发展新动力，把“一带一路”建成和平之路、繁荣之路、开放之路、创新之路、文明之路。</li>
</ol>
<h3 id="共商共建人类命运共同体的任务要求"><a href="#共商共建人类命运共同体的任务要求" class="headerlink" title="共商共建人类命运共同体的任务要求"></a>共商共建人类命运共同体的任务要求</h3><ol>
<li>坚持和平发展道路，推动建设新型国际关系。</li>
<li>不断完善外交布局，积极发展全球伙伴关系。</li>
<li>深度参与全球治理，积极引导国际秩序变革方向。</li>
<li>推动国际社会从伙伴关系、安全格局、经济发展、文明交流、生态建设等方面为建立人类命运共同体做出努力。</li>
</ol>
<h2 id="第十四章-坚持和加强党的领导"><a href="#第十四章-坚持和加强党的领导" class="headerlink" title="第十四章 坚持和加强党的领导"></a>第十四章 坚持和加强党的领导</h2><h3 id="中国共产党的领导地位是历史和人民的选择"><a href="#中国共产党的领导地位是历史和人民的选择" class="headerlink" title="中国共产党的领导地位是历史和人民的选择"></a>中国共产党的领导地位是历史和人民的选择</h3><ul>
<li>历史表明，历史和人民选择中国共产党领导中华民族伟大复兴的事业是正确的，必须长期坚持、永不动摇</li>
<li>中国共产党领导中国人民开辟的中国特色社会主义道路是正确的，必须 长期坚持、永不动摇</li>
<li>中国共产党和中国人民扎根中国大地、吸纳人类文明优秀成果、独立自主实现国家发展的战略是正确的，必须长期坚持、永不动摇</li>
</ul>
<h3 id="为什么说党的领导是中国特色社会主义最本质的特征"><a href="#为什么说党的领导是中国特色社会主义最本质的特征" class="headerlink" title="为什么说党的领导是中国特色社会主义最本质的特征"></a>为什么说党的领导是中国特色社会主义最本质的特征</h3><ol>
<li>这是由科学社会主义的理论逻辑所决定的。坚持无产阶级政党的领导是无产阶级革命和社会主义建设取得胜利的根本保障。</li>
<li>这是由中国特色社会主义产生与发展的历史逻辑所决定的。中国特色社会主义是在改革开放40年的伟大实践中的得来的，是在中华人民共和国成立近70年的持续探索中得来的，是在我们党领导人民进行伟大社会革命90多年的实践中得来的，是党和人民历经千辛万苦、付出各种代价取得的宝贵成果。取得这一成果最根本的就是中国共产党的领导。</li>
<li>这是由中国特色社会主义迈向新征程的实践逻辑所决定的。实现中华民族伟大复兴，关键在党。要坚定走中国道路，把13多亿人口聚集成中国力量，焕发出中国精神，实现中华民族的伟大复兴，必须坚持中国共产党的领导。</li>
</ol>
<h3 id="为什么说党的领导是中国特色社会主义制度的最大优势"><a href="#为什么说党的领导是中国特色社会主义制度的最大优势" class="headerlink" title="为什么说党的领导是中国特色社会主义制度的最大优势"></a>为什么说党的领导是中国特色社会主义制度的最大优势</h3><ol>
<li>中国特色社会主义制度是党领导人民创建的。没有中国共产党，就没有中国特色社会主义制度，制度优势就无从谈起。</li>
<li>党的领导是充分发挥中国特色社会主义制度优势的根本保障。</li>
<li>党的自身优势是中国特色社会主义制度优势的主要来源。</li>
</ol>
<h3 id="新时代中国共产党的历史使命"><a href="#新时代中国共产党的历史使命" class="headerlink" title="新时代中国共产党的历史使命"></a>新时代中国共产党的历史使命</h3><p>统揽伟大斗争、伟大工程、伟大事业、伟大梦想，在全面建成小康社会的基础上全面建成社会主义现代化强国，实现中华民族伟大复兴的中国梦。</p>
<h3 id="实现伟大梦想的任务要求"><a href="#实现伟大梦想的任务要求" class="headerlink" title="实现伟大梦想的任务要求"></a>实现伟大梦想的任务要求</h3><ol>
<li>必须进行具有许多新的历史特点的伟大斗争。</li>
<li>必须深入推进党的建设新的伟大工程。</li>
<li>必须推进中国特色社会主义伟大事业。</li>
</ol>
<h3 id="伟大斗争、伟大工程、伟大事业、伟大梦想的辩证关系"><a href="#伟大斗争、伟大工程、伟大事业、伟大梦想的辩证关系" class="headerlink" title="伟大斗争、伟大工程、伟大事业、伟大梦想的辩证关系"></a>伟大斗争、伟大工程、伟大事业、伟大梦想的辩证关系</h3><p>伟大斗争、伟大工程、伟大事业、伟大梦想是一个紧密联系、相互贯通、相互作用、有机统一的整体，统一于新时代坚持和发展中国特色社会主义伟大实践。</p>
<ul>
<li>伟大梦想是目标，指引前进方向。</li>
<li>伟大斗争是手段，激发前进动力。</li>
<li>伟大工程是保障，提供前进保证。</li>
<li>伟大事业是主题，开辟前进道路。</li>
</ul>
<p>其中起决定性作用的是党的建设伟大工程。伟大工程直接关系到党能否进行伟大斗争、推进伟大事业、实现伟大梦想。<br>因此必须把党建设好，把伟大工程建设好，确保党在世界形势深刻变化的历史进程中始终走在时代前列，在应对国内外各种风险和考验的历史进程中始终成为全国人民的主心骨，再坚持和发展中国特色社会主义的历史进程中始终成为坚强领导核心。</p>
<h3 id="党是最高政治领导力量"><a href="#党是最高政治领导力量" class="headerlink" title="党是最高政治领导力量"></a>党是最高政治领导力量</h3><ol>
<li>这是马克思主义政党的基本要求。无产阶级执政党必须坚持党对国家政权的最高领导权，这是马克思主义政党学说的基本原则。</li>
<li>这是对党领导革命、建设和改革历史经验的深刻总结。</li>
<li>这是推进伟大事业的根本保证。</li>
</ol>
<h3 id="如何确保党始终总揽全局协调各方"><a href="#如何确保党始终总揽全局协调各方" class="headerlink" title="如何确保党始终总揽全局协调各方"></a>如何确保党始终总揽全局协调各方</h3><ol>
<li>必须增强政治意识、大局意识、核心意识、看齐意识，自觉维护党中央权威和集中统一领导，自觉在思想上政治上行动上同党中央高度保持一致。</li>
<li>必须坚持和完善党的领导的体制机制。</li>
<li>必须坚持党的民主集中制原则。</li>
</ol>
<h3 id="如何全面增强党的执政本领"><a href="#如何全面增强党的执政本领" class="headerlink" title="如何全面增强党的执政本领"></a>如何全面增强党的执政本领</h3><ol>
<li>增强学习本领。坚持用习近平新时代中国特色社会主义思想武装头脑、指导实践、推进工作，全面、系统、富有探索精神地学习，并付诸于实践，在实践中增长解决问题的新本领。</li>
<li>增强政治领导本领。坚持战略思维、创新思维、辩证思维、法治思维、底线思维，科学制定和坚决执行党的路线方针政策，把党总揽全局、协调各方落到实处。</li>
<li>增强改革创新本领。解放思想、与时俱进、锐意进取，既要登高望远，又要居安思危。善于结合实际传造型推动工作，善于运用互联网技术和信息手段开展工作。</li>
<li>增强科学发展本领。坚定不移贯彻穿心、协调、绿色、开放、共享的发展理念，统筹推进“五位一体”总体布局，协调推进“四个全面”战略布局，不断增强我国创新经济创新力和竞争力，不断开创发展新局面。</li>
<li>增强依法执政本领。加快形成覆盖党的领导和党的建设各方面的党内法规制度体系，坚持依法治国与依规治党统筹推进，一体建设，坚持依法治国也依规治党有机统一。</li>
<li>增强群众工作本领。组织、领导群众，发挥联系群众的桥梁和纽带作用。</li>
<li>增强狠抓落实本领。坚持说实话、谋实事、出实招，以钉钉子精神做实做细做好各项工作。</li>
<li>增强驾驭风险本领。健全各方面风险防控机制，善于处理各种复杂矛盾，用于战胜前进路上的各种艰难险阻，牢牢把握工作主动权。</li>
</ol>
<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="十三个显著优势"><a href="#十三个显著优势" class="headerlink" title="十三个显著优势"></a>十三个显著优势</h3><ol>
<li>坚持党的集中统一领导，坚持党的科学理论，保持政治稳定，确保国家始终沿着社会主义方向前进的显著优势。</li>
<li>坚持人民当家作主，发展人民民主，密切联系群众，紧紧依靠人民推动国家发展的显著优势。</li>
<li>坚持全面依法治国，建设社会主义法治国家，切实保障社会公平正义和人民权利的显著优势。</li>
<li>坚持全国一盘棋，调动各方面积极性，集中力量办大事的显著优势。</li>
<li>坚持各民族一律平等，铸牢中华民族共同体意识，实现共同团结奋斗、共同繁荣发展的显著优势。</li>
<li>坚持公有制为主体、多种所有制经济共同发展和按劳分配为主体、多种分配方式并存，把社会主义制度和市场经济有机结合起来，不断解放和发展社会生产力的显著优势。</li>
<li>坚持共同的理想信念、价值理念、道德观念，弘扬中华优秀传统文化、革命文化、社会主义先进文化，促进全体人民在思想上精神上紧紧团结在一起的显著优势。</li>
<li>坚持以人民为中心的发展思想，不断保障和改善民生、增进人民福祉，走共同富裕道路的显著优势。</li>
<li>坚持改革创新、与时俱进，善于自我完善、自我发展，使社会充满生机活力的显著优势。</li>
<li>坚持德才兼备、选贤任能，聚天下英才而用之，培养造就更多更优秀人才的显著优势。</li>
<li>坚持党指挥枪，确保人民军队绝对忠诚于党和人民，有力保障国家主权、安全、发展利益的显著优势。</li>
<li>坚持“一国两制”，保持香港、澳门长期繁荣稳定，促进祖国和平统一的显著优势。</li>
<li>坚持独立自主和对外开放相统一，积极参与全球治理，为构建人类命运共同体不断作出贡献的显著优势。</li>
</ol>
<h3 id="一个总体目标"><a href="#一个总体目标" class="headerlink" title="一个总体目标"></a>一个总体目标</h3><p>到我们党成立一百年时，在各方面制度更加成熟更加定型上取得明显成效；到2035年，各方面制度更加完善，基本实现国家治理体系和治理能力现代化；到新中国成立一百年时，全面实现国家治理体系和治理能力现代化，使中国特色社会主义制度更加巩固、优越性充分展现。</p>
<h3 id="十三个坚持和完善"><a href="#十三个坚持和完善" class="headerlink" title="十三个坚持和完善"></a>十三个坚持和完善</h3><ol>
<li>坚持和完善党的领导制度体系，提高党科学执政、民主执政、依法执政水平。</li>
<li>坚持和完善人民当家作主制度体系，发展社会主义民主政治。</li>
<li>坚持和完善中国特色社会主义法治体系，提高党依法治国、依法执政能力。</li>
<li>坚持和完善中国特色社会主义行政体制，构建职责明确、依法行政的政府治理体系。</li>
<li>坚持和完善社会主义基本经济制度，推动经济高质量发展。</li>
<li>坚持和完善繁荣发展社会主义先进文化的制度，巩固全体人民团结奋斗的共同思想基础。</li>
<li>坚持和完善统筹城乡的民生保障制度，足人民日益增长的美好生活需要。</li>
<li>坚持和完善共建共治共享的社会治理制度，保持社会稳定、维护国家安全。</li>
<li>坚持和完善生态文明制度体系，促进人与自然和谐共生。生态文明建设是关系中华民族永续发展的千年大计。</li>
<li>坚持和完善党对人民军队的绝对领导制度，确保人民军队忠实履行新时代使命任务。</li>
<li>坚持和完善“一国两制”制度体系，推进祖国和平统一。</li>
<li>坚持和完善独立自主的和平外交政策，推动构建人类命运共同体。</li>
<li>坚持和完善党和国家监督体系，强化对权力运行的制约和监督。</li>
</ol>
<h3 id="党的十九届四中全会的重大意义"><a href="#党的十九届四中全会的重大意义" class="headerlink" title="党的十九届四中全会的重大意义"></a><strong>党的十九届四中全会的重大意义</strong></h3><ol>
<li><strong>为党和国家事业兴旺发达、长治久安提供坚强制度保证。</strong></li>
<li><strong>为更好应对百年未有之大变局作出重要安排。</strong></li>
<li><strong>为“中国之治”成功经验上升为系统性制度成果提供根本遵循。</strong></li>
<li><strong>为人类社会创造更好制度提供中国智慧和中国方案。</strong></li>
</ol>
<h3 id="中国特色社会主义的制度优势"><a href="#中国特色社会主义的制度优势" class="headerlink" title="中国特色社会主义的制度优势"></a><strong>中国特色社会主义的制度优势</strong></h3><ol>
<li><strong>中国特色社会主义制度具有强大生命力和巨大优越性。</strong></li>
<li><strong>中国特色社会主义制度是党和人民在长期实践探索中形成的科学制度体系。</strong></li>
<li><strong>中国特色社会主义制度的优越性体现在国家治理各个方面。</strong></li>
<li><strong>发挥中国特色社会主义制度优越性需要推动制度创新。</strong></li>
</ol>
<h3 id="更好地把我国制度优势转化为国家治理效能"><a href="#更好地把我国制度优势转化为国家治理效能" class="headerlink" title="更好地把我国制度优势转化为国家治理效能"></a><strong>更好地把我国制度优势转化为国家治理效能</strong></h3><ol>
<li><strong>坚持党中央集中统一领导。</strong></li>
<li><strong>切实提升制度执行能力。</strong></li>
<li><strong>坚持系统治理、依法治理、综合治理、源头治理。</strong></li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>期末</tag>
        <tag>毛概</tag>
      </tags>
  </entry>
</search>
